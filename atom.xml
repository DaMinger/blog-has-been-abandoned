<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DaMinger's blog]]></title>
  <subtitle><![CDATA[乐于鼓捣各种小实验]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://github.com/DaMinger/DaMinger.github.io.git/"/>
  <updated>2014-11-25T10:43:59.237Z</updated>
  <id>https://github.com/DaMinger/DaMinger.github.io.git/</id>
  
  <author>
    <name><![CDATA[DaMinger]]></name>
    <email><![CDATA[564400632@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[mysql、mysqladmin、mysqldump常用命令总结]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/11/25/Mysql/mysql_mysqladmin_mysqldump/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/11/25/Mysql/mysql_mysqladmin_mysqldump/</id>
    <published>2014-11-25T07:00:19.000Z</published>
    <updated>2014-11-25T08:26:24.000Z</updated>
    <content type="html"><![CDATA[<p>除了mysql -u root -p 等这些常用的参数外，总结一下基础指令</p>
<pre><code><span class="comment">mysqldump</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">help</span>
<span class="comment">mysql</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">help</span> 
<span class="comment">mysqladmin</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">help</span>    <span class="comment">你懂得</span>
</code></pre><h3 id="mysql常用命令">mysql常用命令</h3>
<h6 id="自动补全">自动补全</h6>
<pre><code>方法一
[mysql]
#no-<span class="keyword">auto</span>-rehash
<span class="keyword">auto</span>-rehash
方法二
mysql -u root --<span class="keyword">auto</span>-rehash
</code></pre><h6 id="-D_使用哪个数据库">-D  使用哪个数据库</h6>
<pre><code>mysql <span class="attribute">-u</span> root <span class="attribute">-D</span> test  
</code></pre><h6 id="-default-character-set设置默认字符集">--default-character-set设置默认字符集</h6>
<pre><code>mysql <span class="attribute">-u</span> root <span class="attribute">-D</span> test  <span class="subst">--</span>default<span class="attribute">-character</span><span class="attribute">-set</span><span class="subst">=</span>utf8
</code></pre><h6 id="-e_执行mysql的sql语句">-e 执行mysql的sql语句</h6>
<pre><code>mysql <span class="attribute">-uroot</span> <span class="attribute">-D</span> bak_test <span class="attribute">-e</span> <span class="string">"show tables;"</span> 
这个很有用的，因为我不用进入mysql客户里面去，就能把我要的数据取出来，这个可以配合shell脚本的话，能发挥很大的功能
</code></pre><h6 id="-h_指定连接端口号">-h 指定连接端口号</h6>
<pre><code>mysql <span class="attribute">-u</span> root <span class="attribute">-h</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.102</span>  指定端口号很重要
</code></pre><h6 id="-E_垂直打印查询输出">-E 垂直打印查询输出</h6>
<pre><code>mysql <span class="attribute">-uroot</span> bak_test <span class="attribute">-e</span> <span class="string">"show tables;"</span> <span class="attribute">-E</span>  
</code></pre><h6 id="-f_如果有错误跳过去，继续执行下面的">-f 如果有错误跳过去，继续执行下面的</h6>
<pre><code>mysql -uroot bak_test -e "<span class="operator"><span class="keyword">show</span> databaseds;</span><span class="operator"><span class="keyword">show</span> tables;</span>" -f  
上面的databaseds拼错了，依旧能输出
</code></pre><h6 id="-N_不显示列信息">-N 不显示列信息</h6>
<pre><code>mysql <span class="attribute">-uroot</span> bak_test <span class="attribute">-e</span> <span class="string">"select * from user"</span> <span class="attribute">-N</span> 
</code></pre><h6 id="-H_-X以HTML、XML报表呈现">-H -X以HTML、XML报表呈现</h6>
<pre><code>mysql <span class="attribute">-uroot</span> bak_test <span class="attribute">-e</span> <span class="string">"show tables  "</span> <span class="attribute">-X</span> 
mysql <span class="attribute">-uroot</span> bak_test <span class="attribute">-e</span> <span class="string">"show tables  "</span> <span class="attribute">-H</span> 
做报表的时候可以考虑
</code></pre><h6 id="-S_连接服务器的sockey文件">-S 连接服务器的sockey文件</h6>
<pre><code>mysql <span class="attribute">-u</span> root <span class="attribute">-D</span> test   <span class="attribute">-S</span> /tmp/mysql<span class="built_in">.</span>sock  
当我们一台服务器启动了二个不同mysql版本的时候，存放socket的文件是不能一样的，－S用来指定连接到那个
</code></pre><h6 id="-P_设置端口号">-P 设置端口号</h6>
<pre><code>mysql <span class="attribute">-u</span> root <span class="attribute">-o</span> test  <span class="attribute">-P</span> <span class="number">13306</span>  <span class="attribute">-S</span> /tmp/mysql<span class="built_in">.</span>sock
</code></pre><p>以上我认为这些用的还多，注意组合使用。</p>
<h3 id="mysqladmin常用命令">mysqladmin常用命令</h3>
<p>mysqladmin和mysql有些参数功能上是一样的</p>
<h6 id="status查看服务器的状况">status查看服务器的状况</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> status
mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> <span class="attribute">-i</span> <span class="number">2</span> <span class="attribute">-c</span> <span class="number">5</span> status每个两秒查看一次服务器的状态，总共重复<span class="number">5</span>次
</code></pre><h6 id="修改root密码">修改root密码</h6>
<pre><code>mysqladmin <span class="attribute">-u</span> root <span class="attribute">-poldpassword</span> password newpassword    
</code></pre><h6 id="ping检查mysqlserver是否可用">ping检查mysqlserver是否可用</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> ping
</code></pre><h6 id="version查询服务器的版本">version查询服务器的版本</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> version
</code></pre><h6 id="extended-status查看服务器状态的当前值：">extended-status查看服务器状态的当前值：</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> extended<span class="attribute">-status</span>
</code></pre><h6 id="variables查询服务器系统变量值：">variables查询服务器系统变量值：</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> variables
</code></pre><h6 id="processlist显示服务器所有运行的进程：">processlist显示服务器所有运行的进程：</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> processlist
mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span><span class="attribute">-i</span> <span class="number">1</span> processlist 每秒刷新一次
</code></pre><h6 id="创建数据库">创建数据库</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> create daba<span class="attribute">-test</span>
</code></pre><h6 id="删除数据库">删除数据库</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> drop daba<span class="attribute">-test</span>
</code></pre><h6 id="重载权限信息">重载权限信息</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> reload
</code></pre><h6 id="执行kill_进程">执行kill 进程</h6>
<pre><code>mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> processlist
mysqladmin <span class="attribute">-uroot</span> <span class="attribute">-p</span> kill idnum
</code></pre><h6 id="停止和启动MySQL_replication_on_a_slave_server">停止和启动MySQL replication on a slave server</h6>
<pre><code>mysqladmin <span class="attribute">-u</span> root <span class="attribute">-p</span> stop<span class="attribute">-slave</span>
mysqladmin <span class="attribute">-u</span> root <span class="attribute">-p</span> start<span class="attribute">-slave</span>
</code></pre><h6 id="flush选项">flush选项</h6>
<pre><code>mysqladmin <span class="attribute">-u</span> root <span class="attribute">-p</span> flush<span class="attribute">-hosts</span><span class="subst">|</span>flush<span class="attribute">-logs</span><span class="subst">|</span>flush<span class="attribute">-privileges</span><span class="subst">|</span>flush<span class="attribute">-status</span><span class="subst">|</span>flush<span class="attribute">-tables</span><span class="subst">|</span>flush<span class="attribute">-threads</span>
</code></pre><h6 id="mysqlshow指令">mysqlshow指令</h6>
<pre><code>mysqlshow <span class="attribute">-uroot</span> <span class="attribute">-p</span> 显示服务器上的所有数据库
mysqlshow <span class="attribute">-uroot</span> <span class="attribute">-p</span> daba<span class="attribute">-test</span> 显示数据库daba<span class="attribute">-test</span>下有些什么表
mysqlshow <span class="attribute">-uroot</span> <span class="attribute">-p</span> daba<span class="attribute">-test</span> <span class="attribute">-v</span> 统计daba<span class="attribute">-test</span> 下数据库表列的汇总
mysqlshow <span class="attribute">-uroot</span> <span class="attribute">-p</span> daba<span class="attribute">-test</span> <span class="attribute">-v</span> <span class="attribute">-v</span> 统计daba<span class="attribute">-test</span> 下数据库表的列数和行数
</code></pre><h3 id="mysqldump常用指令">mysqldump常用指令</h3>
<p>先看几个常用用例</p>
<h6 id="导出整个数据库">导出整个数据库</h6>
<pre><code>mysqldump <span class="attribute">-u</span> 用户名 <span class="attribute">-p</span> 数据库名 <span class="subst">&gt;</span> 导出的文件名 
mysqldump <span class="attribute">-u</span> wcnc <span class="attribute">-p</span> smgp_apps_wcnc <span class="subst">&gt;</span> wcnc<span class="built_in">.</span>sql
</code></pre><h6 id="导出一个表">导出一个表</h6>
<pre><code>mysqldump <span class="attribute">-u</span> 用户名 <span class="attribute">-p</span> 数据库名 表名<span class="subst">&gt;</span> 导出的文件名
</code></pre><h6 id="导出一个数据库结构_-d">导出一个数据库结构 -d</h6>
<pre><code>mysqldump -u wcnc -p -d --add-<span class="keyword">drop</span>-table smgp_apps_wcnc &gt;d:\wcnc_db.sql
#-d 不导出数据只导出结构 --add-<span class="keyword">drop</span>-table 在每个create语句之前增加一个<span class="keyword">drop</span> table 
</code></pre><h6 id="导入数据库，常用source_命令">导入数据库，常用source 命令</h6>
<pre><code>先确认好客户端字符集和导入字符集
mysql&gt;<span class="built_in">source</span> d:\wcnc_db.sql
</code></pre><h6 id="默认参数参考">默认参数参考</h6>
<pre><code><span class="subst">--</span>add<span class="attribute">-drop</span><span class="attribute">-table</span>
每个数据表创建之前添加drop数据表语句。(默认为打开状态，使用<span class="subst">--</span><span class="keyword">skip</span><span class="attribute">-add</span><span class="attribute">-drop</span><span class="attribute">-table</span>取消选项)
mysqldump  <span class="attribute">-uroot</span> <span class="attribute">-p</span> <span class="subst">--</span><span class="literal">all</span><span class="attribute">-databases</span>  (默认添加drop语句)
mysqldump  <span class="attribute">-uroot</span> <span class="attribute">-p</span> <span class="subst">--</span><span class="literal">all</span><span class="attribute">-databases</span> –<span class="attribute">-skip</span><span class="attribute">-add</span><span class="attribute">-drop</span><span class="attribute">-table</span>  (取消drop语句)
<span class="subst">--</span>add<span class="attribute">-locks</span>
在每个表导出之前增加LOCK TABLES并且之后UNLOCK  TABLE。(默认为打开状态，使用<span class="subst">--</span><span class="keyword">skip</span><span class="attribute">-add</span><span class="attribute">-locks</span>取消选项)
mysqldump  <span class="attribute">-uroot</span> <span class="attribute">-p</span> <span class="subst">--</span><span class="literal">all</span><span class="attribute">-databases</span>  (默认添加LOCK语句)
mysqldump  <span class="attribute">-uroot</span> <span class="attribute">-p</span> <span class="subst">--</span><span class="literal">all</span><span class="attribute">-databases</span> <span class="subst">-</span>–<span class="keyword">skip</span><span class="attribute">-add</span><span class="attribute">-locks</span>   (取消LOCK语句)
</code></pre><p>mysqldump其余参数参考网址<br><a href="http://www.cnblogs.com/xuejie/archive/2013/01/11/2856911.html" target="_blank">http://www.cnblogs.com/xuejie/archive/2013/01/11/2856911.html</a></p>
]]></content>
    
    
      <category term="Mysql" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Mysql/"/>
    
      <category term="Mysql" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos6.5编译安装（percona5.5）简略步骤及问题]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/11/19/Mysql/percona_install/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/11/19/Mysql/percona_install/</id>
    <published>2014-11-19T03:40:11.000Z</published>
    <updated>2014-11-19T03:47:12.000Z</updated>
    <content type="html"><![CDATA[<h4 id="安装Centos6-5_采用最小化安装">安装Centos6.5 采用最小化安装</h4>
<p>   注意点：因为是最小化安装，网卡不会自启动，设置自启动，关闭防火墙和selinux，配置yum,安装wget工具。</p>
<h4 id="安装依赖包">安装依赖包</h4>
<pre><code>yum install  gcc gcc<span class="attribute">-c</span><span class="subst">++</span> ncurses ncurses<span class="attribute">-devel</span> 
</code></pre><h4 id="下载相关源码包">下载相关源码包</h4>
<pre><code>wget http://www<span class="preprocessor">.cmake</span><span class="preprocessor">.org</span>/files/v2<span class="number">.8</span>/cmake-<span class="number">2.8</span><span class="number">.11</span><span class="number">.2</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
wget http://www<span class="preprocessor">.percona</span><span class="preprocessor">.com</span>/redir/downloads/Percona-Server-<span class="number">5.5</span>/LATEST/source/tarball/percona-server-<span class="number">5.5</span><span class="number">.40</span>-<span class="number">36.1</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
</code></pre><h4 id="cmake安装">cmake安装</h4>
<pre><code>tar xzf cmake-<span class="number">2.8</span><span class="number">.11</span><span class="number">.2</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
cd cmake-<span class="number">2.8</span><span class="number">.11</span><span class="number">.2</span>
./configure
make &amp;&amp;  make install
</code></pre><h4 id="Percona_5-5预编译">Percona 5.5预编译</h4>
<pre><code>tar zxf percona-server-5.5.40-36.1.tar.gz
cd percona-server-5.5.40-36.1
useradd -M -s /sbin/nologin mysql
mkdir -p /data/percona
chown mysql.mysql -R /data/percona
cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/percona \
-<span class="ruby"><span class="constant">DMYSQL_UNIX_ADDR</span>=<span class="regexp">/tmp/mysql</span>.sock \
</span>-<span class="ruby"><span class="constant">DMYSQL_DATADIR</span>=<span class="regexp">/data/percona</span> \
</span>-<span class="ruby"><span class="constant">DSYSCONFDIR</span>=<span class="regexp">/etc \
</span></span>-<span class="ruby"><span class="constant">DMYSQL_TCP_PORT</span>=<span class="number">3306</span> \
</span>-<span class="ruby"><span class="constant">DWITH_INNOBASE_STORAGE_ENGINE</span>=<span class="number">1</span> \
</span>-<span class="ruby"><span class="constant">DWITH_PARTITION_STORAGE_ENGINE</span>=<span class="number">1</span> \
</span>-<span class="ruby"><span class="constant">DWITH_BLACKHOLE_STORAGE_ENGINE</span>=<span class="number">1</span> \
</span>-<span class="ruby"><span class="constant">DWITH_MYISAM_STORAGE_ENGINE</span>=<span class="number">1</span> \
</span>-<span class="ruby"><span class="constant">DWITH_READLINE</span>=<span class="number">1</span> \
</span>-<span class="ruby"><span class="constant">DENABLED_LOCAL_INFILE</span>=<span class="number">1</span> \
</span>-<span class="ruby"><span class="constant">DDEFAULT_CHARSET</span>=utf8 \
</span>-<span class="ruby"><span class="constant">DDEFAULT_COLLATION</span>=utf8_general_ci \
</span>-<span class="ruby"><span class="constant">DWITH_EXTRA_CHARSETS</span>=all
</span>编译参数解释
CMAKE_INSTALL_PREFIX #安装路径
MYSQL_UNIX_ADDR #unix socket路径
MYSQL_DATADIR #数据库存放路径
SYSCONFDIR #配置文件路径
MYSQL_TCP_PORT #数据库端口
WITH_INNOBASE_STORAGE_ENGINE #安装innodb引擎
WITH_PARTITION_STORAGE_ENGINE #安装分区引擎
WITH_BLACKHOLE_STORAGE_ENGINE #安装blackhole引擎
WITH_MYISAM_STORAGE_ENGINE #安装myisam引擎
WITH_READLINE #快捷键功能
ENABLED_LOCAL_INFILE #允许从本地导入数据
DEFAULT_CHARSET #默认编码
DEFAULT_COLLATION #默认字符集
WITH_EXTRA_CHARSETS #是否使用其他编码，all表示所有
</code></pre><h4 id="编译安装">编译安装</h4>
<pre><code><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install
</code></pre><h4 id="启动脚本，设置开机自启动">启动脚本，设置开机自启动</h4>
<pre><code><span class="keyword">cp</span> support-files/mysql<span class="preprocessor">.server</span> /etc/init<span class="preprocessor">.d</span>/mysqld
chmod +<span class="built_in">x</span> /etc/init<span class="preprocessor">.d</span>/mysqld
chkconfig --<span class="keyword">add</span> mysqld
chkconfig mysqld on
</code></pre><h4 id="/etc/my-cnf，（网上的一份，具体参数需调整，此次试验采用此脚本）">/etc/my.cnf，（网上的一份，具体参数需调整，此次试验采用此脚本）</h4>
<pre><code>[mysqld]
<span class="constant">basedir</span> = /usr/local/percona
<span class="constant">datadir</span> = /data/percona
pid-file = /data/percona/mysql.pid
character-set-server = utf8
collation-server = utf8_general_ci
<span class="constant">user</span> = mysql
<span class="constant">port</span> = 3306
<span class="constant">default_storage_engine</span> = InnoDB
<span class="constant">innodb_file_per_table</span> = 1
<span class="constant">server_id</span> = 1
<span class="constant">log_bin</span> = mysql-bin
<span class="constant">binlog_format</span> = mixed
<span class="constant">expire_logs_days</span> = 7
bind-address = 0.0.0.0

<span class="comment"># name-resolve</span>
skip-name-resolve
skip-host-cache

<span class="comment">#lower_case_table_names = 1</span>
<span class="constant">ft_min_word_len</span> = 1
<span class="constant">query_cache_size</span> = 64M
<span class="constant">query_cache_type</span> = 1

skip-external-locking
<span class="constant">key_buffer_size</span> = 16M
<span class="constant">max_allowed_packet</span> = 1M
<span class="constant">table_open_cache</span> = 64
<span class="constant">sort_buffer_size</span> = 512K
<span class="constant">net_buffer_length</span> = 8K
<span class="constant">read_buffer_size</span> = 256K
<span class="constant">read_rnd_buffer_size</span> = 512K
<span class="constant">myisam_sort_buffer_size</span> = 8M

<span class="comment"># LOG</span>
<span class="constant">log_error</span> = /data/percona/mysql-error.log
<span class="constant">long_query_time</span> = 1
slow_query_log
<span class="constant">slow_query_log_file</span> = /data/percona/mysql-slow.log

<span class="comment"># Oher</span>
<span class="comment">#max_connections = 1000</span>
<span class="constant">open_files_limit</span> = 65535

[client]
<span class="constant">port</span> = 3306
</code></pre><h4 id="初始化数据库，设置环境变量">初始化数据库，设置环境变量</h4>
<pre><code>/usr/<span class="built_in">local</span>/percona/scripts/mysql_install_db <span class="subst">--</span>user<span class="subst">=</span>mysql <span class="subst">--</span>basedir<span class="subst">=</span>/usr/<span class="built_in">local</span>/percona <span class="subst">--</span>datadir<span class="subst">=</span>/<span class="built_in">data</span>/percona
chown mysql<span class="built_in">.</span>mysql <span class="attribute">-R</span> /<span class="built_in">data</span>/percona
export PATH<span class="subst">=</span><span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/percona/bin
echo <span class="string">"export PATH=\$PATH:/usr/local/percona/bin"</span> <span class="subst">&gt;&gt;</span> /etc/profile
<span class="built_in">.</span> /etc/profile
</code></pre><h4 id="启动Percona数据库">启动Percona数据库</h4>
<pre><code>service mysqld <span class="operator"><span class="keyword">start</span></span>
</code></pre><h4 id="设置数据库root密码，删除空密码、测试数据库">设置数据库root密码，删除空密码、测试数据库</h4>
<pre><code>出现问题及解决方式
/usr/local/percona/bin/mysqladmin -u root password “lqm”   将root默认口令更改后，mysql服务重启后登陆不进去
出现错误如下
<span class="symbol">mysqladmin:</span> connect to server at <span class="string">'localhost'</span> failed
<span class="symbol">error:</span> <span class="string">'Access denied for user '</span>root<span class="string">'@'</span>localhost<span class="string">' (using password: YES)'</span>
解决方式
<span class="comment"># vi /etc/my.cnf</span>
在[mysqld]的段中加上一句<span class="symbol">:skip-grant-tables</span>
重启mysqld  
<span class="comment">#service mysqld restart,</span>
登陆并修改mysql的root密码
<span class="comment"># mysql</span>
mysql&gt; <span class="constant">USE</span> mysql ;
mysql&gt; <span class="constant">UPDATE</span> user <span class="constant">SET</span> <span class="constant">Password</span> = password ( <span class="string">'new-password'</span> ) <span class="constant">WHERE</span> <span class="constant">User</span> = <span class="string">'root'</span> ;
mysql&gt; flush privileges ;
将<span class="constant">MySQL</span>的登录设置修改回来
<span class="comment"># vi /etc/my.cnf</span>
将刚才在[mysqld]的段中加上的skip-grant-tables删除
保存并且退出vi。
重新启动mysqld
</code></pre>]]></content>
    
    
      <category term="Mysql" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Mysql/"/>
    
      <category term="Mysql" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Mysql/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基于OpenCV的车牌识别系统]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/07/17/OpenCv/opencv_2/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/07/17/OpenCv/opencv_2/</id>
    <published>2014-07-17T01:24:18.000Z</published>
    <updated>2014-07-21T12:02:43.000Z</updated>
    <content type="html"><![CDATA[<p>前一段时间忙死了，各种考试，今天有点空，把我那个学年课程设计（车牌识别）处理流程写一下，做个记录</p>
<h4 id="车牌识别流程图">车牌识别流程图</h4>
<p><img src="/img/OpenCv/car_card_1.jpg" alt="车牌识别流程图 "></p>
<h4 id="图像预处理模块">图像预处理模块</h4>
<h6 id="将彩色图像转化为灰度图像">将彩色图像转化为灰度图像</h6>
<p>真彩图转换具有信息量大的优点，但同时其数据量也大，因此主要利用汽车牌照的灰度图像进行处理，灰度图像数据量小，能提高后面图像处理的运行速度<br><img src="/img/OpenCv/car_card_2.jpg" alt="灰度化 "></p>
<h6 id="去除图像的干扰噪声">去除图像的干扰噪声</h6>
<p>采用中值滤波，中值滤波就是利用一个有奇数点的滑动窗口，将窗口中心点的值用窗口内各点的中值代替，中值滤波对于消除孤立噪声点的干扰十分有用，更重要的是使用这种窗口进行滤波时，除有效地消除噪声外，还能很有效地保护边界的信息。<br><img src="/img/OpenCv/car_card_3.jpg" alt="去除噪音 "></p>
<h6 id="图像边缘检测">图像边缘检测</h6>
<p>物体的边缘是以图像局部特征的不连续性的形式出现的，例如，灰度值的突变，颜色的突变，纹理结构的突变等。边缘常常意味着一个区域的结束和另一个区域的开始。车牌与车牌周围一般具有明显的灰度变化，经边缘处理后可将车牌形成独立的区域，便于车牌定位时形成与周围不相连的单连通区域。</p>
<p>我采用Canny 算子法能比较好地提取出连续的字符轮廓边缘,同时对于噪声有很好的抑制。<br><img src="/img/OpenCv/car_card_4.jpg" alt="边缘化处理 "></p>
<h4 id="车牌粗定位模块">车牌粗定位模块</h4>
<h6 id="边缘密度法">边缘密度法</h6>
<p>给出“ 边缘密度法”的定义：在某一宽度范围的模板内, 灰度值大于某一阈值的边缘点的总和。设计如下扫描算法如下</p>
<pre><code>(1)扫描整幅图像,二值化将灰度小于某阈值的点置0, 否则置255
(2)记录每行的值255为点的个数，删除点数小于某数值的行
(3)移动模板计算模板内点的密度，大于某阈值是将模板区图像全部置225，否则置0。
(4)对图像进行一定的膨胀操作。
</code></pre><p><img src="/img/OpenCv/car_card_5.jpg" alt="膨松二值性 "></p>
<h6 id="种子法标定单连通区域">种子法标定单连通区域</h6>
<p>在使用边缘密度法后可形成多个单连通区域，要通过利用种子方法实现单连通区域的搜索，找到各个单连通区域的边界。<br><img src="/img/OpenCv/car_card_6.jpg" alt="感兴趣的区域一 "><br><img src="/img/OpenCv/car_card_7.jpg" alt="感兴趣的区域二 "><br><img src="/img/OpenCv/car_card_8.jpg" alt="最终标记 "></p>
<h4 id="车牌字分割模块">车牌字分割模块</h4>
<p>首先二值化，然后根据下表进行字符分割<br><img src="/img/OpenCv/car_card_10.jpg" alt="分割系 "><br><img src="/img/OpenCv/car_card_9.jpg" alt="效果图 "></p>
<h4 id="车牌字符识别模块">车牌字符识别模块</h4>
<p>采用十三特征模版匹配</p>
<pre><code>首先把字符平均分成8份。分别统计这8个区域中的白色点像素的数目，可以得到8个特征．
然后统计水平方向中间两列和竖直方向中间两列的白色像素点的个数作为4个特征，最后统计所有白色像素点的个数作为第13个特征。
将字符图像的全部白色像素的数目的总和作为一个特征，总共即得到13个特征。
</code></pre><p><img src="/img/OpenCv/car_card_11.jpg" alt="效果图 "></p>
]]></content>
    
    
      <category term="OpenCv" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/OpenCv/"/>
    
      <category term="OpenCv" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/OpenCv/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle12c Rman Recover Table(基于时间点)]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/23/Oracle/Oracle12c/oracle12c_recover_table/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/23/Oracle/Oracle12c/oracle12c_recover_table/</id>
    <published>2014-06-23T07:41:41.000Z</published>
    <updated>2014-06-23T09:26:11.000Z</updated>
    <content type="html"><![CDATA[<p>实验贴，感谢飞总技术分享<a href="http://www.xifenfei.com/4229.html" target="_blank">http://www.xifenfei.com/4229.html</a></p>
<h4 id="简介">简介</h4>
<p>Oracle12c的rman中出现可以进行table级别的恢复，本试验测试了rman基于时间点恢复一个被删除表的操作过程</p>
<h4 id="查看数据库版本">查看数据库版本</h4>
<pre><code>SQL&gt; <span class="keyword">select</span> * from v$version;

BANNER                                                                    CON_ID
<span class="comment">--------------------------------------------------------------------- ----------</span>
Oracle Database <span class="number">12</span>c Enterprise Edition <span class="keyword">Release</span> <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - <span class="number">64</span><span class="typename">bit</span> Pro          <span class="number">0</span>
duction

PL/SQL <span class="keyword">Release</span> <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production                                         <span class="number">0</span>
CORE    <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span>      Production                                             <span class="number">0</span>
TNS <span class="keyword">for</span> Linux: Version <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production                                 <span class="number">0</span>
NLSRTL Version <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production                                         <span class="number">0</span>
</code></pre><h4 id="创建表并插入数据（我是在自定义用户lqm下做操作的）">创建表并插入数据（我是在自定义用户lqm下做操作的）</h4>
<pre><code>SQL&gt; select to<span class="emphasis">_char(sysdate,'yyyy-mm-dd hh24:mi:ss') from dual;

</span><span class="header">TO_CHAR(SYSDATE,'YY
-------------------</span>
2014-06-23 11:08:55

SQL&gt; create table t<span class="emphasis">_lqm(id number,insert_</span>time date);

Table created.

SQL&gt; insert into t<span class="emphasis">_lqm values(1,sysdate);

</span>1 row created.

SQL&gt; commit;

Commit complete.
SQL&gt; archive log list;
Database log mode              Archive Mode
Automatic archival             Enabled
Archive destination            USE<span class="emphasis">_DB_</span>RECOVERY<span class="emphasis">_FILE_</span>DEST
Oldest online log sequence     11
Next log sequence to archive   13
Current log sequence           13
SQL&gt;  select to<span class="emphasis">_char(sysdate,'yyyy-mm-dd hh24:mi:ss') from dual;

</span><span class="header">TO_CHAR(SYSDATE,'YY
-------------------</span>
2014-06-23 11:10:34
</code></pre><h4 id="备份数据库">备份数据库</h4>
<pre><code>RMAN&gt; backup  <span class="keyword">as</span> compressed backupset database  format '/tmp/lqm_db_%U';

Starting backup <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
using target database control <span class="type">file</span> <span class="keyword">instead of</span> recovery catalog
allocated channel: ORA_DISK_1
channel ORA_DISK_1: SID=<span class="number">51</span> device type=DISK
channel ORA_DISK_1: starting compressed full datafile backup <span class="keyword">set</span>
channel ORA_DISK_1: specifying datafile(s) <span class="keyword">in</span> backup <span class="keyword">set</span>
input datafile <span class="type">file</span> <span class="type">number</span>=<span class="number">00001</span> <span class="property">name</span>=/u01/app/oracle/oradata/lqm/system01.dbf
input datafile <span class="type">file</span> <span class="type">number</span>=<span class="number">00003</span> <span class="property">name</span>=/u01/app/oracle/oradata/lqm/sysaux01.dbf
input datafile <span class="type">file</span> <span class="type">number</span>=<span class="number">00002</span> <span class="property">name</span>=/u01/app/oracle/oradata/lqm/example01.dbf
input datafile <span class="type">file</span> <span class="type">number</span>=<span class="number">00004</span> <span class="property">name</span>=/u01/app/oracle/oradata/lqm/undotbs01.dbf
input datafile <span class="type">file</span> <span class="type">number</span>=<span class="number">00006</span> <span class="property">name</span>=/u01/app/oracle/oradata/lqm/users01.dbf
channel ORA_DISK_1: starting piece <span class="number">1</span> <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
channel ORA_DISK_1: finished piece <span class="number">1</span> <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
piece handle=/tmp/lqm_db_03pbi8mq_1_1 tag=TAG20140623T111121 comment=NONE
channel ORA_DISK_1: backup <span class="keyword">set</span> complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">02</span>:<span class="number">25</span>
channel ORA_DISK_1: starting compressed full datafile backup <span class="keyword">set</span>
channel ORA_DISK_1: specifying datafile(s) <span class="keyword">in</span> backup <span class="keyword">set</span>
including current control <span class="type">file</span> <span class="keyword">in</span> backup <span class="keyword">set</span>
including current SPFILE <span class="keyword">in</span> backup <span class="keyword">set</span>
channel ORA_DISK_1: starting piece <span class="number">1</span> <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
channel ORA_DISK_1: finished piece <span class="number">1</span> <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
piece handle=/tmp/lqm_db_04pbi8rb_1_1 tag=TAG20140623T111121 comment=NONE
channel ORA_DISK_1: backup <span class="keyword">set</span> complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span>
Finished backup <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
</code></pre><h4 id="插入数据继续测试">插入数据继续测试</h4>
<pre><code>SQL&gt; insert <span class="keyword">into</span> t_lqm values(<span class="number">2</span>,sysdate);

<span class="number">1</span> row created.

SQL&gt; commit;

Commit complete.

SQL&gt;  alter system switch logfile;

System altered.

SQL&gt;  alter system switch logfile;

System altered.

SQL&gt; insert <span class="keyword">into</span> t_lqm values(<span class="number">3</span>,sysdate);

<span class="number">1</span> row created.

SQL&gt; insert <span class="keyword">into</span> t_lqm values(<span class="number">4</span>,sysdate);

<span class="number">1</span> row created.

SQL&gt; commit;

Commit complete.

SQL&gt; archive <span class="command">log</span> <span class="type">list</span>;
Database <span class="command">log</span> mode              Archive Mode
Automatic archival             Enabled
Archive destination            USE_DB_RECOVERY_FILE_DEST
Oldest online <span class="command">log</span> sequence     <span class="number">13</span>
Next <span class="command">log</span> sequence <span class="keyword">to</span> archive   <span class="number">15</span>
Current <span class="command">log</span> sequence           <span class="number">15</span>
SQL&gt; select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') <span class="keyword">from</span> dual;

TO_CHAR(SYSDATE,'YY
<span class="comment">-------------------</span>
<span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">16</span>:<span class="number">06</span>
SQL&gt; select <span class="property">id</span>,to_char(insert_time,'yyyy-mm-dd hh24:mi:ss') <span class="keyword">from</span> t_lqm;

        ID TO_CHAR(INSERT_TIME
<span class="comment">---------- -------------------</span>
         <span class="number">1</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">50</span>
         <span class="number">2</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">14</span>:<span class="number">59</span>
         <span class="number">3</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">17</span>
         <span class="number">4</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">21</span>
</code></pre><h4 id="删除测试表">删除测试表</h4>
<pre><code>SQL&gt; drop table t<span class="emphasis">_lqm purge;

</span>Table dropped.

SQL&gt;  select to<span class="emphasis">_char(sysdate,'yyyy-mm-dd hh24:mi:ss') from dual;

</span><span class="header">TO_CHAR(SYSDATE,'YY
-------------------</span>
2014-06-23 11:17:09
</code></pre><h4 id="rman_recover_table">rman recover table</h4>
<pre><code>[<span class="function_or_atom">oracle</span>@<span class="function_or_atom">oracle12c</span> ~]$ <span class="function_or_atom">rman</span> <span class="function_or_atom">target</span> <span class="function_or_atom">sys</span>/<span class="function_or_atom">oracle</span> <span class="function_or_atom">log</span>=/<span class="function_or_atom">tmp</span>/<span class="function_or_atom">recover_table</span>.<span class="function_or_atom">log</span>
<span class="variable">RMAN</span>&gt; <span class="variable">RECOVER</span> <span class="variable">TABLE</span> <span class="variable">LQM</span>.<span class="string">"T_LQM"</span>
<span class="prompt">2&gt; </span><span class="function_or_atom">until</span> <span class="function_or_atom">time</span>  <span class="string">"to_date('2014-06-23 11:16:06','yyyy-mm-dd hh24:mi:ss')"</span>
<span class="prompt">3&gt; </span><span class="variable">AUXILIARY</span> <span class="variable">DESTINATION</span> <span class="string">'/tmp/recovertable'</span>
<span class="prompt">4&gt; </span><span class="variable">REMAP</span> <span class="variable">TABLE</span> <span class="string">'LQM'</span>.<span class="string">'T_LQM'</span>:<span class="string">'T_LQM_NEW'</span>;
</code></pre><p>这里出了点错，’/tmp/recovertable’忘了赋权限了（oracle:oinstall），具体恢复过程请看文章最后附的log</p>
<h4 id="验证数据库">验证数据库</h4>
<pre><code>SQL&gt; <span class="keyword">select</span> id,to_char(insert_time,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) <span class="keyword">from</span> t_lqm_new;

        ID TO_CHAR(INSERT_TIME
---------- -------------------
         <span class="number">1</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">50</span>
         <span class="number">2</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">14</span>:<span class="number">59</span>
         <span class="number">3</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">17</span>
         <span class="number">4</span> <span class="number">2014</span>-<span class="number">06</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">21</span>
</code></pre><h4 id="流程总结与重要提示">流程总结与重要提示</h4>
<h5 id="流程总结">流程总结</h5>
<p>案例脚本</p>
<figure class="highlight 案例脚本"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>RMAN&gt; connect target <span class="string">"username/password as SYSBACKUP"</span>; 
RMAN&gt; RECOVER TABLE username.tablename UNTIL TIME <span class="string">'TIMESTAMP…'</span> 
AUXILIARY DESTINATION <span class="string">'/u01/tablerecovery'</span> 
DATAPUMP DESTINATION <span class="string">'/u01/dpump'</span> 
DUMP FILE <span class="string">'tablename.dmp'</span> 
NOTABLEIMPORT -- <span class="keyword">this</span> option avoids importing the table automatically.(此选项避免自动导入表) 
REMAP TABLE <span class="string">'username.tablename'</span>: <span class="string">'username.new_table_name'</span>; -- can rename table <span class="keyword">with</span> <span class="keyword">this</span> option.(此选项可以对表重命名)
</pre></td></tr></table></figure>

<p>大致过程：还原system,undo,sysaux表空间,然后read only数据库,然后重启数据库还原表所在表空间,然后expdp导出表,根据需要决定是否导入表到数据库。</p>
<h5 id="重要提示：">重要提示：</h5>
<p>rman recover table 必须使用sys用户登录,而不能使用/,因为12c默认有backup用户。</p>
<p>确保对于辅助数据库在/u01文件系统下（本例中是/tmp）有足够的可用空间，同时对数据泵文件也有同样保证(因为rman recover table 需要还原system,undo,sysaux表空间,需要还原表所在表空间,和expdp导出文件空间)。</p>
<p>必须要存在一份完整的数据库备份，或者至少是要有SYSTEM相关的表空间备份。</p>
<p>SYS用户表或分区无法恢复。</p>
<p>存储于SYSAUX和SYSTEM表空间下的表和分区无法恢复。</p>
<p>当REMAP选项用来恢复的表包含NOT NULL约束时，恢复此表是不可行的。</p>
<h4 id="附：recover_table-log">附：recover_table.log</h4>
<pre><code>[root@oracle12c tmp]<span class="comment"># cat recover_table.log </span>

Recovery Manager: Release <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production <span class="function_start"><span class="keyword">on</span></span> Mon Jun <span class="number">23</span> <span class="number">11</span>:<span class="number">49</span>:<span class="number">13</span> <span class="number">2014</span>

Copyright (c) <span class="number">1982</span>, <span class="number">2013</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> <span class="keyword">its</span> affiliates.  All rights reserved.

connected <span class="keyword">to</span> target database: LQM (DBID=<span class="number">3049410225</span>)

RMAN&gt; <span class="number">2</span>&gt; <span class="number">3</span>&gt; <span class="number">4</span>&gt; 
Starting recover <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
using target database control <span class="type">file</span> <span class="keyword">instead of</span> recovery catalog
allocated channel: ORA_DISK_1
channel ORA_DISK_1: SID=<span class="number">52</span> device type=DISK
RMAN-<span class="number">05026</span>: WARNING: presuming following <span class="keyword">set</span> <span class="keyword">of</span> tablespaces applies <span class="keyword">to</span> specified Point-<span class="keyword">in</span>-Time

List <span class="keyword">of</span> tablespaces expected <span class="keyword">to</span> have UNDO segments
Tablespace SYSTEM
Tablespace UNDOTBS1

Creating automatic instance, <span class="keyword">with</span> SID='eAAi'

initialization parameters used <span class="keyword">for</span> automatic instance:
db_name=LQM
db_unique_name=eAAi_pitr_LQM
compatible=<span class="number">12.1</span><span class="number">.0</span><span class="number">.0</span><span class="number">.0</span>
db_block_size=<span class="number">8192</span>
db_files=<span class="number">200</span>
sga_target=<span class="number">1</span>G
processes=<span class="number">80</span>
diagnostic_dest=/u01/app/oracle
db_create_file_dest=/tmp/recovertable
log_archive_dest_1='location=/tmp/recovertable'
<span class="comment">#No auxiliary parameter file used</span>


starting up automatic instance LQM

Oracle instance started

Total System Global Area    <span class="number">1068937216</span> bytes

Fixed Size                     <span class="number">2296576</span> bytes
Variable Size                <span class="number">281019648</span> bytes
Database Buffers             <span class="number">780140544</span> bytes
Redo Buffers                   <span class="number">5480448</span> bytes
Automatic instance created

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># set requested point in time</span>
<span class="keyword">set</span> <span class="keyword">until</span>  <span class="property">time</span> <span class="string">"to_date('2014-06-23 11:16:06','yyyy-mm-dd hh24:mi:ss')"</span>;
<span class="comment"># restore the controlfile</span>
restore clone controlfile;
<span class="comment"># mount the controlfile</span>
sql clone 'alter database mount clone database';
<span class="comment"># archive current online log </span>
sql 'alter system archive <span class="command">log</span> current';
}
executing Memory Script

executing command: SET <span class="keyword">until</span> clause

Starting restore <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
allocated channel: ORA_AUX_DISK_1
channel ORA_AUX_DISK_1: SID=<span class="number">20</span> device type=DISK

channel ORA_AUX_DISK_1: starting datafile backup <span class="keyword">set</span> restore
channel ORA_AUX_DISK_1: restoring control <span class="type">file</span>
channel ORA_AUX_DISK_1: reading <span class="keyword">from</span> backup piece /tmp/lqm_db_04pbi8rb_1_1
channel ORA_AUX_DISK_1: piece handle=/tmp/lqm_db_04pbi8rb_1_1 tag=TAG20140623T111121
channel ORA_AUX_DISK_1: restored backup piece <span class="number">1</span>
channel ORA_AUX_DISK_1: restore complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">00</span>:<span class="number">55</span>
output <span class="type">file</span> <span class="property">name</span>=/tmp/recovertable/LQM/controlfile/o1_mf_9th8z5hk_.ctl
Finished restore <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>

sql statement: alter database mount clone database

sql statement: alter system archive <span class="command">log</span> current

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># set requested point in time</span>
<span class="keyword">set</span> <span class="keyword">until</span>  <span class="property">time</span> <span class="string">"to_date('2014-06-23 11:16:06','yyyy-mm-dd hh24:mi:ss')"</span>;
<span class="comment"># set destinations for recovery set and auxiliary set datafiles</span>
<span class="keyword">set</span> newname <span class="keyword">for</span> clone datafile  <span class="number">1</span> <span class="keyword">to</span> new;
<span class="keyword">set</span> newname <span class="keyword">for</span> clone datafile  <span class="number">4</span> <span class="keyword">to</span> new;
<span class="keyword">set</span> newname <span class="keyword">for</span> clone datafile  <span class="number">3</span> <span class="keyword">to</span> new;
<span class="keyword">set</span> newname <span class="keyword">for</span> clone tempfile  <span class="number">1</span> <span class="keyword">to</span> new;
<span class="comment"># switch all tempfiles</span>
switch clone tempfile all;
<span class="comment"># restore the tablespaces in the recovery set and the auxiliary set</span>
restore clone datafile  <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>;
switch clone datafile all;
}
executing Memory Script

executing command: SET <span class="keyword">until</span> clause

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

executing command: SET NEWNAME

renamed tempfile <span class="number">1</span> <span class="keyword">to</span> /tmp/recovertable/LQM/datafile/o1_mf_temp_%u_.tmp <span class="keyword">in</span> control <span class="type">file</span>

Starting restore <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
using channel ORA_AUX_DISK_1

channel ORA_AUX_DISK_1: starting datafile backup <span class="keyword">set</span> restore
channel ORA_AUX_DISK_1: specifying datafile(s) <span class="keyword">to</span> restore <span class="keyword">from</span> backup <span class="keyword">set</span>
channel ORA_AUX_DISK_1: restoring datafile <span class="number">00001</span> <span class="keyword">to</span> /tmp/recovertable/LQM/datafile/o1_mf_system_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile <span class="number">00004</span> <span class="keyword">to</span> /tmp/recovertable/LQM/datafile/o1_mf_undotbs1_%u_.dbf
channel ORA_AUX_DISK_1: restoring datafile <span class="number">00003</span> <span class="keyword">to</span> /tmp/recovertable/LQM/datafile/o1_mf_sysaux_%u_.dbf
channel ORA_AUX_DISK_1: reading <span class="keyword">from</span> backup piece /tmp/lqm_db_03pbi8mq_1_1
channel ORA_AUX_DISK_1: piece handle=/tmp/lqm_db_03pbi8mq_1_1 tag=TAG20140623T111121
channel ORA_AUX_DISK_1: restored backup piece <span class="number">1</span>
channel ORA_AUX_DISK_1: restore complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">01</span>:<span class="number">56</span>
Finished restore <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>

datafile <span class="number">1</span> switched <span class="keyword">to</span> datafile <span class="keyword">copy</span>
input datafile <span class="keyword">copy</span> RECID=<span class="number">4</span> STAMP=<span class="number">850996384</span> <span class="type">file</span> <span class="property">name</span>=/tmp/recovertable/LQM/datafile/o1_mf_system_9th91fkw_.dbf
datafile <span class="number">4</span> switched <span class="keyword">to</span> datafile <span class="keyword">copy</span>
input datafile <span class="keyword">copy</span> RECID=<span class="number">5</span> STAMP=<span class="number">850996384</span> <span class="type">file</span> <span class="property">name</span>=/tmp/recovertable/LQM/datafile/o1_mf_undotbs1_9th91g7j_.dbf
datafile <span class="number">3</span> switched <span class="keyword">to</span> datafile <span class="keyword">copy</span>
input datafile <span class="keyword">copy</span> RECID=<span class="number">6</span> STAMP=<span class="number">850996384</span> <span class="type">file</span> <span class="property">name</span>=/tmp/recovertable/LQM/datafile/o1_mf_sysaux_9th91flw_.dbf

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># set requested point in time</span>
<span class="keyword">set</span> <span class="keyword">until</span>  <span class="property">time</span> <span class="string">"to_date('2014-06-23 11:16:06','yyyy-mm-dd hh24:mi:ss')"</span>;
<span class="comment"># online the datafiles restored or switched</span>
sql clone <span class="string">"alter database datafile  1 online"</span>;
sql clone <span class="string">"alter database datafile  4 online"</span>;
sql clone <span class="string">"alter database datafile  3 online"</span>;
<span class="comment"># recover and open database read only</span>
recover clone database tablespace  <span class="string">"SYSTEM"</span>, <span class="string">"UNDOTBS1"</span>, <span class="string">"SYSAUX"</span>;
sql clone 'alter database open <span class="command">read</span> only';
}
executing Memory Script

executing command: SET <span class="keyword">until</span> clause

sql statement: alter database datafile  <span class="number">1</span> online

sql statement: alter database datafile  <span class="number">4</span> online

sql statement: alter database datafile  <span class="number">3</span> online

Starting recover <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
using channel ORA_AUX_DISK_1

starting media recovery

archived <span class="command">log</span> <span class="keyword">for</span> thread <span class="number">1</span> <span class="keyword">with</span> sequence <span class="number">13</span> <span class="keyword">is</span> already <span class="function_start"><span class="keyword">on</span></span> disk <span class="keyword">as</span> <span class="type">file</span> /u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_13_9th6xygs_.arc
archived <span class="command">log</span> <span class="keyword">for</span> thread <span class="number">1</span> <span class="keyword">with</span> sequence <span class="number">14</span> <span class="keyword">is</span> already <span class="function_start"><span class="keyword">on</span></span> disk <span class="keyword">as</span> <span class="type">file</span> /u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_14_9th6y06s_.arc
archived <span class="command">log</span> <span class="keyword">for</span> thread <span class="number">1</span> <span class="keyword">with</span> sequence <span class="number">15</span> <span class="keyword">is</span> already <span class="function_start"><span class="keyword">on</span></span> disk <span class="keyword">as</span> <span class="type">file</span> /u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_15_9th78jx5_.arc
archived <span class="command">log</span> <span class="type">file</span> <span class="property">name</span>=/u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_13_9th6xygs_.arc thread=<span class="number">1</span> sequence=<span class="number">13</span>
archived <span class="command">log</span> <span class="type">file</span> <span class="property">name</span>=/u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_14_9th6y06s_.arc thread=<span class="number">1</span> sequence=<span class="number">14</span>
archived <span class="command">log</span> <span class="type">file</span> <span class="property">name</span>=/u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_15_9th78jx5_.arc thread=<span class="number">1</span> sequence=<span class="number">15</span>
media recovery complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">00</span>:<span class="number">02</span>
Finished recover <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>

sql statement: alter database open <span class="command">read</span> only

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
   sql clone <span class="string">"create spfile from memory"</span>;
   shutdown clone immediate;
   startup clone nomount;
   sql clone <span class="string">"alter system set  control_files = 
  ''/tmp/recovertable/LQM/controlfile/o1_mf_9th8z5hk_.ctl'' comment=
 ''RMAN set'' scope=spfile"</span>;
   shutdown clone immediate;
   startup clone nomount;
<span class="comment"># mount database</span>
sql clone 'alter database mount clone database';
}
executing Memory Script

sql statement: create spfile <span class="keyword">from</span> memory

database closed
database dismounted
Oracle instance shut down

connected <span class="keyword">to</span> auxiliary database (<span class="keyword">not</span> started)
Oracle instance started

Total System Global Area    <span class="number">1068937216</span> bytes

Fixed Size                     <span class="number">2296576</span> bytes
Variable Size                <span class="number">285213952</span> bytes
Database Buffers             <span class="number">775946240</span> bytes
Redo Buffers                   <span class="number">5480448</span> bytes

sql statement: alter system <span class="keyword">set</span>  control_files =   ''/tmp/recovertable/LQM/controlfile/o1_mf_9th8z5hk_.ctl'' comment= ''RMAN <span class="keyword">set</span>'' scope=spfile

Oracle instance shut down

connected <span class="keyword">to</span> auxiliary database (<span class="keyword">not</span> started)
Oracle instance started

Total System Global Area    <span class="number">1068937216</span> bytes

Fixed Size                     <span class="number">2296576</span> bytes
Variable Size                <span class="number">285213952</span> bytes
Database Buffers             <span class="number">775946240</span> bytes
Redo Buffers                   <span class="number">5480448</span> bytes

sql statement: alter database mount clone database

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># set requested point in time</span>
<span class="keyword">set</span> <span class="keyword">until</span>  <span class="property">time</span> <span class="string">"to_date('2014-06-23 11:16:06','yyyy-mm-dd hh24:mi:ss')"</span>;
<span class="comment"># set destinations for recovery set and auxiliary set datafiles</span>
<span class="keyword">set</span> newname <span class="keyword">for</span> datafile  <span class="number">6</span> <span class="keyword">to</span> new;
<span class="comment"># restore the tablespaces in the recovery set and the auxiliary set</span>
restore clone datafile  <span class="number">6</span>;
switch clone datafile all;
}
executing Memory Script

executing command: SET <span class="keyword">until</span> clause

executing command: SET NEWNAME

Starting restore <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
allocated channel: ORA_AUX_DISK_1
channel ORA_AUX_DISK_1: SID=<span class="number">7</span> device type=DISK

channel ORA_AUX_DISK_1: starting datafile backup <span class="keyword">set</span> restore
channel ORA_AUX_DISK_1: specifying datafile(s) <span class="keyword">to</span> restore <span class="keyword">from</span> backup <span class="keyword">set</span>
channel ORA_AUX_DISK_1: restoring datafile <span class="number">00006</span> <span class="keyword">to</span> /tmp/recovertable/EAAI_PITR_LQM/datafile/o1_mf_users_%u_.dbf
channel ORA_AUX_DISK_1: reading <span class="keyword">from</span> backup piece /tmp/lqm_db_03pbi8mq_1_1
channel ORA_AUX_DISK_1: piece handle=/tmp/lqm_db_03pbi8mq_1_1 tag=TAG20140623T111121
channel ORA_AUX_DISK_1: restored backup piece <span class="number">1</span>
channel ORA_AUX_DISK_1: restore complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span>
Finished restore <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>

datafile <span class="number">6</span> switched <span class="keyword">to</span> datafile <span class="keyword">copy</span>
input datafile <span class="keyword">copy</span> RECID=<span class="number">8</span> STAMP=<span class="number">850996449</span> <span class="type">file</span> <span class="property">name</span>=/tmp/recovertable/EAAI_PITR_LQM/datafile/o1_mf_users_9th9710c_.dbf

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># set requested point in time</span>
<span class="keyword">set</span> <span class="keyword">until</span>  <span class="property">time</span> <span class="string">"to_date('2014-06-23 11:16:06','yyyy-mm-dd hh24:mi:ss')"</span>;
<span class="comment"># online the datafiles restored or switched</span>
sql clone <span class="string">"alter database datafile  6 online"</span>;
<span class="comment"># recover and open resetlogs</span>
recover clone database tablespace  <span class="string">"USERS"</span>, <span class="string">"SYSTEM"</span>, <span class="string">"UNDOTBS1"</span>, <span class="string">"SYSAUX"</span> delete archivelog;
alter clone database open resetlogs;
}
executing Memory Script

executing command: SET <span class="keyword">until</span> clause

sql statement: alter database datafile  <span class="number">6</span> online

Starting recover <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>
using channel ORA_AUX_DISK_1

starting media recovery

archived <span class="command">log</span> <span class="keyword">for</span> thread <span class="number">1</span> <span class="keyword">with</span> sequence <span class="number">13</span> <span class="keyword">is</span> already <span class="function_start"><span class="keyword">on</span></span> disk <span class="keyword">as</span> <span class="type">file</span> /u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_13_9th6xygs_.arc
archived <span class="command">log</span> <span class="keyword">for</span> thread <span class="number">1</span> <span class="keyword">with</span> sequence <span class="number">14</span> <span class="keyword">is</span> already <span class="function_start"><span class="keyword">on</span></span> disk <span class="keyword">as</span> <span class="type">file</span> /u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_14_9th6y06s_.arc
archived <span class="command">log</span> <span class="keyword">for</span> thread <span class="number">1</span> <span class="keyword">with</span> sequence <span class="number">15</span> <span class="keyword">is</span> already <span class="function_start"><span class="keyword">on</span></span> disk <span class="keyword">as</span> <span class="type">file</span> /u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_15_9th78jx5_.arc
archived <span class="command">log</span> <span class="type">file</span> <span class="property">name</span>=/u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_13_9th6xygs_.arc thread=<span class="number">1</span> sequence=<span class="number">13</span>
archived <span class="command">log</span> <span class="type">file</span> <span class="property">name</span>=/u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_14_9th6y06s_.arc thread=<span class="number">1</span> sequence=<span class="number">14</span>
archived <span class="command">log</span> <span class="type">file</span> <span class="property">name</span>=/u01/app/oracle/fast_recovery_area/LQM/archivelog/<span class="number">2014</span>_06_23/o1_mf_1_15_9th78jx5_.arc thread=<span class="number">1</span> sequence=<span class="number">15</span>
media recovery complete, elapsed <span class="property">time</span>: <span class="number">00</span>:<span class="number">00</span>:<span class="number">01</span>
Finished recover <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>

database opened

<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># create directory for datapump import</span>
sql <span class="string">"create or replace directory TSPITR_DIROBJ_DPDIR as ''
/tmp/recovertable''"</span>;
<span class="comment"># create directory for datapump export</span>
sql clone <span class="string">"create or replace directory TSPITR_DIROBJ_DPDIR as ''
/tmp/recovertable''"</span>;
}
executing Memory Script

sql statement: create <span class="keyword">or</span> replace directory TSPITR_DIROBJ_DPDIR <span class="keyword">as</span> ''/tmp/recovertable''

sql statement: create <span class="keyword">or</span> replace directory TSPITR_DIROBJ_DPDIR <span class="keyword">as</span> ''/tmp/recovertable''

Performing export <span class="keyword">of</span> tables...
   EXPDP&gt; Starting <span class="string">"SYS"</span>.<span class="string">"TSPITR_EXP_eAAi_wFyn"</span>:  
   EXPDP&gt; Estimate <span class="keyword">in</span> progress using BLOCKS method...
   EXPDP&gt; Processing object type TABLE_EXPORT/TABLE/TABLE_DATA
   EXPDP&gt; Total estimation using BLOCKS method: <span class="number">64</span> KB
   EXPDP&gt; Processing object type TABLE_EXPORT/TABLE/TABLE
   EXPDP&gt; Processing object type TABLE_EXPORT/TABLE/STATISTICS/TABLE_STATISTICS
   EXPDP&gt; Processing object type TABLE_EXPORT/TABLE/STATISTICS/MARKER
   EXPDP&gt; ORA-<span class="number">39127</span>: unexpected <span class="keyword">error</span> <span class="keyword">from</span> call <span class="keyword">to</span> export_string :=SYS.DBMS_TRANSFORM_EXIMP.INSTANCE_INFO_EXP('AQ$_ORDERS_QUEUETABLE_S','IX',<span class="number">1</span>,<span class="number">1</span>,'<span class="number">12.01</span><span class="number">.00</span><span class="number">.00</span><span class="number">.00</span>',newblock) 
ORA-<span class="number">00376</span>: <span class="type">file</span> <span class="number">2</span> cannot be <span class="command">read</span> <span class="keyword">at</span> this <span class="property">time</span>
ORA-<span class="number">01110</span>: data <span class="type">file</span> <span class="number">2</span>: '/u01/app/oracle/oradata/lqm/example01.dbf'
ORA-<span class="number">06512</span>: <span class="keyword">at</span> <span class="string">"SYS.DBMS_TRANSFORM_EXIMP"</span>, line <span class="number">197</span>
ORA-<span class="number">06512</span>: <span class="keyword">at</span> line <span class="number">1</span>
ORA-<span class="number">06512</span>: <span class="keyword">at</span> <span class="string">"SYS.DBMS_METADATA"</span>, line <span class="number">9901</span>
ORA-<span class="number">39127</span>: unexpected <span class="keyword">error</span> <span class="keyword">from</span> call <span class="keyword">to</span> export_string :=SYS.DBMS_TRANSFORM_EXIMP.INSTANCE_INFO_EXP('AQ$_STREAMS_QUEUE_TABLE_S','IX',<span class="number">1</span>,<span class="number">1</span>,'<span class="number">12.01</span><span class="number">.00</span><span class="number">.00</span><span class="number">.00</span>',newblock) 
ORA-<span class="number">00376</span>: <span class="type">file</span> <span class="number">2</span> cannot be <span class="command">read</span> <span class="keyword">at</span> this <span class="property">time</span>
ORA-<span class="number">01110</span>: data <span class="type">file</span> <span class="number">2</span>: '/u01/app/oracle/oradata/lqm/example01.dbf'
ORA-<span class="number">06512</span>: <span class="keyword">at</span> <span class="string">"SYS.DBMS_TRANSFORM_EXIMP"</span>, line <span class="number">197</span>
ORA-<span class="number">06512</span>: <span class="keyword">at</span> line <span class="number">1</span>
ORA-<span class="number">06512</span>: <span class="keyword">at</span> <span class="string">"SYS.DBMS_METADATA"</span>, line <span class="number">9901</span>
   EXPDP&gt; . . exported <span class="string">"LQM"</span>.<span class="string">"T_LQM"</span>                               <span class="number">5.507</span> KB       <span class="number">4</span> rows
   EXPDP&gt; Master table <span class="string">"SYS"</span>.<span class="string">"TSPITR_EXP_eAAi_wFyn"</span> successfully loaded/unloaded
   EXPDP&gt; ******************************************************************************
   EXPDP&gt; Dump <span class="type">file</span> <span class="keyword">set</span> <span class="keyword">for</span> SYS.TSPITR_EXP_eAAi_wFyn <span class="keyword">is</span>:
   EXPDP&gt;   /tmp/recovertable/tspitr_eAAi_29849.dmp
   EXPDP&gt; Job <span class="string">"SYS"</span>.<span class="string">"TSPITR_EXP_eAAi_wFyn"</span> completed <span class="keyword">with</span> <span class="number">2</span> <span class="keyword">error</span>(s) <span class="keyword">at</span> Mon Jun <span class="number">23</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">28</span> <span class="number">2014</span> elapsed <span class="number">0</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">03</span>
Export completed


<span class="property">contents</span> <span class="keyword">of</span> Memory Script:
{
<span class="comment"># shutdown clone before import</span>
shutdown clone abort
}
executing Memory Script

Oracle instance shut down

Performing import <span class="keyword">of</span> tables...
   IMPDP&gt; Master table <span class="string">"SYS"</span>.<span class="string">"TSPITR_IMP_eAAi_hnrb"</span> successfully loaded/unloaded
   IMPDP&gt; Starting <span class="string">"SYS"</span>.<span class="string">"TSPITR_IMP_eAAi_hnrb"</span>:  
   IMPDP&gt; Processing object type TABLE_EXPORT/TABLE/TABLE
   IMPDP&gt; Processing object type TABLE_EXPORT/TABLE/TABLE_DATA
   IMPDP&gt; . . imported <span class="string">"LQM"</span>.<span class="string">"T_LQM_NEW"</span>                           <span class="number">5.507</span> KB       <span class="number">4</span> rows
   IMPDP&gt; Processing object type TABLE_EXPORT/TABLE/STATISTICS/TABLE_STATISTICS
   IMPDP&gt; Processing object type TABLE_EXPORT/TABLE/STATISTICS/MARKER
   IMPDP&gt; Job <span class="string">"SYS"</span>.<span class="string">"TSPITR_IMP_eAAi_hnrb"</span> successfully completed <span class="keyword">at</span> Mon Jun <span class="number">23</span> <span class="number">11</span>:<span class="number">57</span>:<span class="number">27</span> <span class="number">2014</span> elapsed <span class="number">0</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">33</span>
Import completed


Removing automatic instance
Automatic instance removed
auxiliary instance <span class="type">file</span> /tmp/recovertable/LQM/datafile/o1_mf_temp_9th95brp_.tmp deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/EAAI_PITR_LQM/onlinelog/o1_mf_3_9th9771q_.<span class="command">log</span> deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/EAAI_PITR_LQM/onlinelog/o1_mf_2_9th975hp_.<span class="command">log</span> deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/EAAI_PITR_LQM/onlinelog/o1_mf_1_9th9739h_.<span class="command">log</span> deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/EAAI_PITR_LQM/datafile/o1_mf_users_9th9710c_.dbf deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/LQM/datafile/o1_mf_sysaux_9th91flw_.dbf deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/LQM/datafile/o1_mf_undotbs1_9th91g7j_.dbf deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/LQM/datafile/o1_mf_system_9th91fkw_.dbf deleted
auxiliary instance <span class="type">file</span> /tmp/recovertable/LQM/controlfile/o1_mf_9th8z5hk_.ctl deleted
auxiliary instance <span class="type">file</span> tspitr_eAAi_29849.dmp deleted
Finished recover <span class="keyword">at</span> <span class="number">23</span>-JUN-<span class="number">14</span>

RMAN&gt; 
RMAN&gt; 
RMAN&gt; 
RMAN&gt; 

Recovery Manager complete.
</code></pre>]]></content>
    
    
      <category term="Oracle" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Oracle/"/>
    
      <category term="Oracle" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Oracle12c的Top-N Queries初步使用]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/23/Oracle/Oracle12c/oracle12c_top/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/23/Oracle/Oracle12c/oracle12c_top/</id>
    <published>2014-06-23T07:40:29.000Z</published>
    <updated>2014-06-23T08:27:24.000Z</updated>
    <content type="html"><![CDATA[<h4 id="简介">简介</h4>
<p>Oracle12C中终于推出了方便的Top-N Queries功能，弥补了与其他数据库的差距(SQL Server TOP用法，MYSQL Limit用法)</p>
<h5 id="语法规则">语法规则</h5>
<pre><code>[ OFFSET offset <span class="list">{ ROW | ROWS }</span> ]
[ FETCH <span class="list">{ FIRST | NEXT }</span> [ <span class="list">{ rowcount | percent PERCENT }</span> ]
<span class="list">{ ROW | ROWS }</span> <span class="list">{ ONLY | WITH TIES }</span> ]
</code></pre><p><img src="/img/Oracle/Oracle12c/top.jpg" alt="TOP语法图解 "></p>
<h4 id="准备测试表和数据">准备测试表和数据</h4>
<h5 id="查看数据库版本">查看数据库版本</h5>
<pre><code>SQL&gt;  <span class="keyword">select</span> * from v$version;

BANNER                                                                    CON_ID
<span class="comment">--------------------------------------------------------------------- ----------</span>
Oracle Database <span class="number">12</span>c Enterprise Edition <span class="keyword">Release</span> <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - <span class="number">64</span><span class="typename">bit</span> Pro          <span class="number">0</span>
duction

PL/SQL <span class="keyword">Release</span> <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production                                         <span class="number">0</span>
CORE    <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span>      Production                                             <span class="number">0</span>
TNS <span class="keyword">for</span> Linux: Version <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production                                 <span class="number">0</span>
NLSRTL Version <span class="number">12.1</span><span class="number">.0</span><span class="number">.1</span><span class="number">.0</span> - Production                                         <span class="number">0</span>
</code></pre><h6 id="创建表并插入数据">创建表并插入数据</h6>
<pre><code>SQL&gt; DROP TABLE rownum_order_test;

Table dropped.

SQL&gt; <span class="keyword">CREATE</span> TABLE rownum_order_test (
  <span class="number">2</span>    val  NUMBER
  <span class="number">3</span>  );

Table created.

SQL&gt; INSERT ALL
  <span class="number">2</span>    <span class="keyword">INTO</span> rownum_order_test
  <span class="number">3</span>    <span class="keyword">INTO</span> rownum_order_test
  <span class="number">4</span>  <span class="keyword">SELECT</span> level
  <span class="number">5</span>  <span class="keyword">FROM</span>   dual
  <span class="number">6</span>  CONNECT <span class="keyword">BY</span> level &lt;= <span class="number">10</span>;

<span class="number">20</span> rows created.

SQL&gt; COMMIT;

Commit complete.
</code></pre><h6 id="现在我们有20个数据，10行数据不重复">现在我们有20个数据，10行数据不重复</h6>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val;</span>

<span class="header">       VAL
----------</span>
<span class="code">         1</span>
<span class="code">         1</span>
<span class="code">         2</span>
<span class="code">         2</span>
<span class="code">         3</span>
<span class="code">         3</span>
<span class="code">         4</span>
<span class="code">         4</span>
<span class="code">         5</span>
<span class="code">         5</span>
<span class="code">         6</span>

<span class="header">       VAL
----------</span>
<span class="code">         6</span>
<span class="code">         7</span>
<span class="code">         7</span>
<span class="code">         8</span>
<span class="code">         8</span>
<span class="code">         9</span>
<span class="code">         9</span>
<span class="code">        10</span>
<span class="code">        10</span>

20 rows selected.
</code></pre><h4 id="查出最大的5个值(使用only关键字限定行数）">查出最大的5个值(使用only关键字限定行数）</h4>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val DESC</span>
<span class="code">  4  FETCH FIRST 5 ROWS ONLY;</span>

<span class="header">       VAL
----------</span>
<span class="code">        10</span>
<span class="code">        10</span>
<span class="code">         9</span>
<span class="code">         9</span>
<span class="code">         8</span>
</code></pre><h4 id="当在限定第N行有多个匹配值（使用with_ties_看例子_翻译的不好）">当在限定第N行有多个匹配值（使用with ties   看例子 翻译的不好）</h4>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val DESC</span>
<span class="code">  4  FETCH FIRST 5 ROWS WITH TIES;</span>

<span class="header">       VAL
----------</span>
<span class="code">        10</span>
<span class="code">        10</span>
<span class="code">         9</span>
<span class="code">         9</span>
<span class="code">         8</span>
<span class="code">         8</span>

6 rows selected.
</code></pre><h4 id="按百分比返回（使用percent）">按百分比返回（使用percent）</h4>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val</span>
<span class="code">  4  FETCH FIRST 20 PERCENT ROWS ONLY;</span>

<span class="header">       VAL
----------</span>
<span class="code">         1</span>
<span class="code">         1</span>
<span class="code">         2</span>
<span class="code">         2</span>
</code></pre><h4 id="分页展示数据">分页展示数据</h4>
<p>原先写法（采用子查询）：</p>
<pre><code>SQL&gt; <span class="keyword">SELECT</span> val
  <span class="number">2</span>  <span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> val, rownum <span class="keyword">AS</span> rnum
  <span class="number">3</span>          <span class="keyword">FROM</span>   (<span class="keyword">SELECT</span> val
  <span class="number">4</span>                  <span class="keyword">FROM</span>   rownum_order_test
  <span class="number">5</span>                  <span class="keyword">ORDER</span> <span class="keyword">BY</span> val)
  <span class="number">6</span>          <span class="keyword">WHERE</span> rownum &lt;= <span class="number">8</span>)
  <span class="number">7</span>  <span class="keyword">WHERE</span>  rnum &gt;= <span class="number">5</span>;

       VAL
----------
         <span class="number">3</span>
         <span class="number">3</span>
         <span class="number">4</span>
         <span class="number">4</span>
</code></pre><p>看看新写法：</p>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val</span>
<span class="code">  4  OFFSET 4 ROWS FETCH NEXT 4 ROWS ONLY;</span>

<span class="header">       VAL
----------</span>
<span class="code">         3</span>
<span class="code">         3</span>
<span class="code">         4</span>
<span class="code">         4</span>
</code></pre><p>开始点是OFFSET+1，比子查询简洁了不少</p>
<p>百分比写法：</p>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val</span>
<span class="code">  4  OFFSET 4 ROWS FETCH NEXT 20 PERCENT ROWS ONLY;</span>

<span class="header">       VAL
----------</span>
<span class="code">         3</span>
<span class="code">         3</span>
<span class="code">         4</span>
<span class="code">         4</span>
</code></pre><h4 id="支持绑定变量">支持绑定变量</h4>
<pre><code>SQL&gt; VARIABLE v_offset NUMBER;
SQL&gt; VARIABLE v_next NUMBER;
SQL&gt; <span class="keyword">BEGIN</span>
  <span class="number">2</span>  :v_offset := <span class="number">4</span>;
  <span class="number">3</span>   :v_next   := <span class="number">4</span>;
  <span class="number">4</span>  <span class="keyword">END</span>;
  <span class="number">5</span>  /

PL/SQL <span class="function"><span class="keyword">procedure</span> <span class="title">successfully</span> <span class="title">completed</span>.

<span class="title">SQL</span>&gt; <span class="title">SELECT</span> <span class="title">val</span>
  2  <span class="title">FROM</span>   <span class="title">rownum_order_test</span>
  3  <span class="title">ORDER</span> <span class="title">BY</span> <span class="title">val</span>
  4  <span class="title">OFFSET</span> :</span>v_offset ROWS FETCH NEXT :v_next ROWS ONLY;

       VAL
----------
         <span class="number">3</span>
         <span class="number">3</span>
         <span class="number">4</span>
         <span class="number">4</span>
</code></pre><h4 id="执行计划">执行计划</h4>
<p>子查询的执行计划：</p>
<pre><code>SQL&gt; set autotrace on;
SQL&gt; SELECT val
<span class="code">  2  FROM   (SELECT val, rownum AS rnum</span>
<span class="code">  3          FROM   (SELECT val</span>
<span class="code">  4                  FROM   rownum_order_test</span>
<span class="code">  5                  ORDER BY val)</span>
<span class="code">  6          WHERE rownum &lt;= 8)</span>
<span class="code">  7  WHERE  rnum &gt;= 5;</span>

<span class="header">       VAL
----------</span>
<span class="code">         3</span>
<span class="code">         3</span>
<span class="code">         4</span>
<span class="code">         4</span>


<span class="header">Execution Plan
----------------------------------------------------------</span>
Plan hash value: 2927523340

<span class="code">----------------------------------------------------------------------------------------------
| Id  | Operation                | Name              | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------------</span>
|   0 | SELECT STATEMENT         |                   |     8 |   208 |     2   (0)| 00:00:01 |
|*  1 |  VIEW                    |                   |     8 |   208 |     2   (0)| 00:00:01 |
|*  2 |   COUNT STOPKEY          |                   |       |       |            |          |
|   3 |    VIEW                  |                   |    20 |   260 |     2   (0)| 00:00:01 |
|*  4 |     SORT ORDER BY STOPKEY|                   |    20 |   260 |     2   (0)| 00:00:01 |
<span class="header">|   5 |      TABLE ACCESS FULL   | ROWNUM_ORDER_TEST |    20 |   260 |     2   (0)| 00:00:01 |
----------------------------------------------------------------------------------------------</span>

<span class="header">Predicate Information (identified by operation id):
---------------------------------------------------</span>

<span class="code">   1 - filter("RNUM"&gt;=5)</span>
<span class="code">   2 - filter(ROWNUM&lt;=8)</span>
<span class="code">   4 - filter(ROWNUM&lt;=8)</span>

<span class="header">Note
-----</span>
<span class="code">   - dynamic statistics used: dynamic sampling (level=2)</span>


<span class="header">Statistics
----------------------------------------------------------</span>
<span class="code">          0  recursive calls</span>
<span class="code">          0  db block gets</span>
<span class="code">          3  consistent gets</span>
<span class="code">          0  physical reads</span>
<span class="code">          0  redo size</span>
<span class="code">        604  bytes sent via SQL*Net to client</span>
<span class="code">        543  bytes received via SQL*Net from client</span>
<span class="code">          2  SQL*Net roundtrips to/from client</span>
<span class="code">          1  sorts (memory)</span>
<span class="code">          0  sorts (disk)</span>
<span class="code">          4  rows processed</span>
</code></pre><p>新写法执行计划：</p>
<pre><code>SQL&gt; SELECT val
<span class="code">  2  FROM   rownum_order_test</span>
<span class="code">  3  ORDER BY val</span>
<span class="code">  4  OFFSET 4 ROWS FETCH NEXT 4 ROWS ONLY;</span>

<span class="header">       VAL
----------</span>
<span class="code">         3</span>
<span class="code">         3</span>
<span class="code">         4</span>
<span class="code">         4</span>


<span class="header">Execution Plan
----------------------------------------------------------</span>
Plan hash value: 1664719511

<span class="code">----------------------------------------------------------------------------------------------
| Id  | Operation                | Name              | Rows  | Bytes | Cost (%CPU)| Time     |
----------------------------------------------------------------------------------------------</span>
|   0 | SELECT STATEMENT         |                   |    20 |   780 |     2   (0)| 00:00:01 |
|*  1 |  VIEW                    |                   |    20 |   780 |     2   (0)| 00:00:01 |
|*  2 |   WINDOW SORT PUSHED RANK|                   |    20 |   260 |     2   (0)| 00:00:01 |
<span class="header">|   3 |    TABLE ACCESS FULL     | ROWNUM_ORDER_TEST |    20 |   260 |     2   (0)| 00:00:01 |
----------------------------------------------------------------------------------------------</span>

<span class="header">Predicate Information (identified by operation id):
---------------------------------------------------</span>

<span class="code">   1 - filter("from$_subquery$_002"."rowlimit_$$_rownumber"&lt;=CASE  WHEN (4&gt;=0) THEN 4</span>
<span class="code">              ELSE 0 END +4 AND "from$_subquery$_002"."rowlimit_$$_rownumber"&gt;4)</span>
<span class="code">   2 - filter(ROW_NUMBER() OVER ( ORDER BY "VAL")&lt;=CASE  WHEN (4&gt;=0) THEN 4 ELSE 0</span>
<span class="code">              END +4)</span>

<span class="header">Note
-----</span>
<span class="code">   - dynamic statistics used: dynamic sampling (level=2)</span>


<span class="header">Statistics
----------------------------------------------------------</span>
<span class="code">          0  recursive calls</span>
<span class="code">          0  db block gets</span>
<span class="code">          3  consistent gets</span>
<span class="code">          0  physical reads</span>
<span class="code">          0  redo size</span>
<span class="code">        604  bytes sent via SQL*Net to client</span>
<span class="code">        543  bytes received via SQL*Net from client</span>
<span class="code">          2  SQL*Net roundtrips to/from client</span>
<span class="code">          1  sorts (memory)</span>
<span class="code">          0  sorts (disk)</span>
<span class="code">          4  rows processed</span>

SQL&gt; set autotrace off
</code></pre><p>执行计划比原先简洁不少，小数据两种消耗差不多，不知道大数据怎么样。</p>
]]></content>
    
    
      <category term="Oracle" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Oracle/"/>
    
      <category term="Oracle" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Oracle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenCv的安装]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/22/OpenCv/opencv_1/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/22/OpenCv/opencv_1/</id>
    <published>2014-06-22T11:55:25.000Z</published>
    <updated>2014-06-22T13:00:34.000Z</updated>
    <content type="html"><![CDATA[<p>最近在做学年课程设计，老师给了几个题目，全是XX信息管理系统，打心底不想再做管理系统了，于是换题，考虑最后答辩的工程量，放弃一开始想做的基于python的FTP软件，整这个车牌识别的东西，这玩意没接触过，探索一段时间，发现可以用OpenCv来解决，特此记录其中的一些知识点和想法。</p>
<h4 id="下载和安装OpenCv">下载和安装OpenCv</h4>
<p><a href="http://opencv.org/" target="_blank">http://opencv.org/</a> 我下载的是版本是2.4.9，双击解压，我解压到 D:\dy 得到bulid和sources，开发IDE VS2010</p>
<h4 id="配置环境变量">配置环境变量</h4>
<p>【计算机】-&gt;【（右键）属性】-&gt;【高级系统设置】-&gt;【高级（标签）】-&gt;【环境变量】-&gt;“双击”系统变量中的PATH-&gt;在变量值里面添加相应的路径。<br>例如 D:\dy\opencv\build\x86\vc10\bin  x86—&gt;32位系统 vc10—&gt;vs2010</p>
<h4 id="配置工程包含（include）目录">配置工程包含（include）目录</h4>
<p>新建工程 看下面三幅图<br><img src="/img/OpenCv/install_1.jpg" alt="图1 "><br><img src="/img/OpenCv/install_2.jpg" alt="图2 "><br><img src="/img/OpenCv/install_3.jpg" alt="图3 "><br>在工程添加一个cpp文件 名称叫main<br>每次新建opencv工程都会重新配置一些东西，解决办法：&lt;视图&gt;—&lt;属性管理器&gt;<br><img src="/img/OpenCv/install_4.jpg" alt="图4 "><br><img src="/img/OpenCv/install_5.jpg" alt="图5 "><br>打开属性页面【通用属性】 -&gt;【VC++目录】 -&gt;【包含目录】<br><img src="/img/OpenCv/install_6.jpg" alt="图6 "></p>
<h4 id="工程库（lib）目录的配置">工程库（lib）目录的配置</h4>
<p>打开属性页面【通用属性】 -&gt;【VC++目录】 -&gt;【库目录】<br><img src="/img/OpenCv/install_7.jpg" alt="图7 "></p>
<h4 id="链接库的配置">链接库的配置</h4>
<p>打开属性页面【通用属性】 -&gt;【链接器】-&gt;【输入】-&gt;【附加的依赖项】<br><img src="/img/OpenCv/install_8.jpg" alt="图8 "><br>这里说明一下：所粘贴内容即为之前我们解压的OpencV目录D:dy\opencv\build\x86\vc10\lib下所有lib库文件的名字；其中的249代表我们的OpenCV版本为2.4.9，我粘的包全是后面带个d的包，因为我是在debug模式下调win32程序，若想在release下调试，需要把release版（即不带d）的相关lib添加进去，这里说明：带d的包和不带d的包不能同时引进，要不然报错。</p>
<h4 id="验证配置是否完成">验证配置是否完成</h4>
<pre><code><span class="preprocessor">#include&lt;iostream&gt;</span>
<span class="preprocessor">#include &lt;opencv2/core/core.hpp&gt;</span>
<span class="preprocessor">#include &lt;opencv2/highgui/highgui.hpp&gt;</span>


<span class="keyword">using</span> <span class="keyword">namespace</span> cv;


<span class="keyword">int</span> main()
{
    <span class="comment">// 读入一张图片</span>
    Mat img=imread(<span class="string">"g:/opencv_pic/3.jpg"</span>);
    <span class="comment">// 创建一个名为 "test"窗口</span>
    cvNamedWindow(<span class="string">"test"</span>);
    <span class="comment">// 在窗口中显示图片</span>
    imshow(<span class="string">"test"</span>,img);
    <span class="comment">// 等待事件关闭窗口</span>
    waitKey(<span class="number">0</span>);
}
</code></pre><p><img src="/img/OpenCv/install_9.jpg" alt="图9 "></p>
]]></content>
    
    
      <category term="OpenCv" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/OpenCv/"/>
    
      <category term="OpenCv" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/OpenCv/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[剑指offer:编写一个方法，将字符串的空格全部替换为“%20”]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer_02/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/09/数据结构与算法/剑指offer/剑指offer_02/</id>
    <published>2014-06-09T12:36:07.000Z</published>
    <updated>2014-06-09T12:44:35.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>编写一个方法，将字符串的空格全部替换为“<span class="variable">%20</span>”。
假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。
（注：用JAVA实现的话，请使用字符数组实现，以便直接在数组上操作）
</code></pre><p>思路：从尾部扫描，第一次扫描先数出字符串中有多少空格，算出最终的字符串有多长，第二次扫描，遇到空格则将%20复制到下一个位置，如不是空格，就复制原先的字符</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span>  <span class="keyword">void</span> replaceSpace(<span class="keyword">char</span>[]<span class="keyword">str</span>，<span class="keyword">int</span> length){
        <span class="keyword">if</span>(<span class="keyword">str</span>==<span class="keyword">null</span>||<span class="keyword">str</span>.length==<span class="number">0</span>)
            <span class="keyword">return</span>;
        <span class="keyword">int</span> spaceCount=<span class="number">0</span>,i,newlength;
        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;length;i++){
            <span class="keyword">if</span>(<span class="keyword">str</span>[i]==<span class="string">' '</span>){
                spaceCount++;
            }
        }
        newlength=length+spaceCount*<span class="number">2</span>;
        <span class="comment">//java不会再最后自动加\0，c语言，c++才会</span>
        <span class="keyword">str</span>[newlength]=<span class="string">'\0'</span>;
        <span class="keyword">for</span>(i=length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){
            <span class="keyword">if</span>(<span class="keyword">str</span>[i]==<span class="string">' '</span>){
                <span class="keyword">str</span>[newlength-<span class="number">1</span>]=<span class="string">'0'</span>;
                <span class="keyword">str</span>[newlength-<span class="number">2</span>]=<span class="string">'2'</span>;
                <span class="keyword">str</span>[newlength-<span class="number">3</span>]=<span class="string">'%'</span>;
                newlength=newlength-<span class="number">3</span>;
            }<span class="keyword">else</span>{
                <span class="keyword">str</span>[newlength-<span class="number">1</span>]=<span class="keyword">str</span>[i];
                newlength=newlength-<span class="number">1</span>;
            }
        }
    }
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[剑指offer:在一个二维数组中判断给定整数是否存在，要求在O(n)内实现]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/%E5%89%91%E6%8C%87offer_01/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/08/数据结构与算法/剑指offer/剑指offer_01/</id>
    <published>2014-06-08T02:12:52.000Z</published>
    <updated>2014-06-08T02:35:05.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>在一个二维数组中，每一行元素从左到右递增，从上到下递增，现输入一个整数，
判断数组中是否存在该整数，要求时间复杂度为<span class="keyword">O</span>(n)
</code></pre><p>思路：可以数组分为三个部分，数组右上角，左边，下面，数组如下</p>
<pre><code>
    1  2  8  9
    2  4  9  12
    4  7  10 13
    6  8  11 15
</code></pre>

<p>查找元需为7，数组右上角元素为9，因为7&lt;9,则在9左边的三列中寻找7元素，将col减1</p>
<pre><code>
    1  2  8
    2  4  9
    4  7  10
    6  8  11
</code></pre>

<p>再取数组右上角元素8，7&lt;8,则在8左边的两列中寻找7元素，将col减1</p>
<pre><code>    
    1  2
    2  4
    4  7
    6  8
</code></pre>

<p>再取数组右上角元素2，7&gt;2,则在2下边三行中寻找元素7</p>
<pre><code>    
    2  4 
    4  7
    6  8
</code></pre>

<p>再取数组的右上角元素4，7&gt;4，则在4下边2行中寻找</p>
<pre><code>        
    4  7
    6  8
</code></pre>    

<p>再取数组的右上角元素7，7==4,返回，查找成功</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getPos</span>(<span class="keyword">int</span> [][]a, <span class="keyword">int</span> key)
    {
        <span class="keyword">int</span> col = a[<span class="number">0</span>].length - <span class="number">1</span>;
        <span class="keyword">int</span> row = <span class="number">0</span>;
        <span class="keyword">while</span>(a[row][col] != key)
        {
            <span class="keyword">if</span>(a[row][col] &gt; key)
            {
                --col;
            }
            <span class="keyword">else</span>
            {
                ++row;
            }
        }
        <span class="keyword">if</span>(a[row][col] == key)
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">else</span> 
            <span class="keyword">return</span> <span class="keyword">false</span>;
    }
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Word Ladder I]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/word_ladder_i/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/word_ladder_i/</id>
    <published>2014-06-06T05:20:53.000Z</published>
    <updated>2014-06-06T05:27:49.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given two <span class="property">words</span> (start <span class="keyword">and</span> <span class="keyword">end</span>), <span class="keyword">and</span> a dictionary, find <span class="keyword">the</span> <span class="property">length</span> <span class="keyword">of</span> shortest transformation sequence <span class="keyword">from</span> start <span class="keyword">to</span> <span class="keyword">end</span>, such <span class="keyword">that</span>:

Only one letter can be changed <span class="keyword">at</span> a <span class="property">time</span>
Each intermediate <span class="property">word</span> must exist <span class="keyword">in</span> <span class="keyword">the</span> dictionary
For example,

Given:
start = <span class="string">"hit"</span>
<span class="keyword">end</span> = <span class="string">"cog"</span>
dict = [<span class="string">"hot"</span>,<span class="string">"dot"</span>,<span class="string">"dog"</span>,<span class="string">"lot"</span>,<span class="string">"log"</span>]
As one shortest transformation <span class="keyword">is</span> <span class="string">"hit"</span> -&gt; <span class="string">"hot"</span> -&gt; <span class="string">"dot"</span> -&gt; <span class="string">"dog"</span> -&gt; <span class="string">"cog"</span>,
<span class="command">return</span> <span class="keyword">its</span> <span class="property">length</span> <span class="number">5.</span>
</code></pre><p>思路：把它看成一颗树，用两个队列，一个储存节点，一个储存距离，BFS即可</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span>(String start, String end, HashSet&lt;String&gt; dict) {

        <span class="keyword">if</span> (dict.size() == <span class="number">0</span>)  
            <span class="keyword">return</span> <span class="number">0</span>; 

        LinkedList&lt;String&gt; wordQueue = <span class="keyword">new</span> LinkedList&lt;String&gt;();
        LinkedList&lt;Integer&gt; distanceQueue = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();

        wordQueue.add(start);
        distanceQueue.add(<span class="number">1</span>);


        <span class="keyword">while</span>(!wordQueue.isEmpty()){
            String currWord = wordQueue.pop();
            Integer currDistance = distanceQueue.pop();

            <span class="keyword">if</span>(currWord.equals(end)){
                <span class="keyword">return</span> currDistance;
            }

            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;currWord.length(); i++){
                <span class="keyword">char</span>[] currCharArr = currWord.toCharArray();
                <span class="keyword">for</span>(<span class="keyword">char</span> c=<span class="string">'a'</span>; c&lt;=<span class="string">'z'</span>; c++){
                    currCharArr[i] = c;

                    String newWord = <span class="keyword">new</span> String(currCharArr);
                    <span class="keyword">if</span>(dict.contains(newWord)){
                        wordQueue.add(newWord);
                        distanceQueue.add(currDistance+<span class="number">1</span>);
                        dict.remove(newWord);
                    }
                }
            }
        }

        <span class="keyword">return</span> <span class="number">0</span>;
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Word Break I]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/word_break_i/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/word_break_i/</id>
    <published>2014-06-06T05:15:12.000Z</published>
    <updated>2014-06-06T05:25:51.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given <span class="operator">a</span> <span class="keyword">string</span> s <span class="operator">and</span> <span class="operator">a</span> dictionary <span class="operator">of</span> <span class="keyword">words</span> dict, determine <span class="keyword">if</span> s can be segmented <span class="keyword">into</span> <span class="operator">a</span> <span class="constant">space</span>-separated sequence <span class="operator">of</span> <span class="constant">one</span> <span class="operator">or</span> more dictionary <span class="keyword">words</span>.

For example, given
s = <span class="string">"leetcode"</span>,
dict = [<span class="string">"leet"</span>, <span class="string">"code"</span>].

Return <span class="constant">true</span> because <span class="string">"leetcode"</span> can be segmented <span class="keyword">as</span> <span class="string">"leet code"</span>.
</code></pre><p>思路：动态规划，定义array t[]，当t[i]==true， 0-(i-1) 能被字典分段</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span>
    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span>(String s, Set&lt;String&gt; dict) {
        <span class="keyword">boolean</span>[] t = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>];
        t[<span class="number">0</span>] = <span class="keyword">true</span>; <span class="comment">//set first to be true</span>

        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++){
            <span class="comment">//should continue from match position</span>
            <span class="keyword">if</span>(!t[i]) 
                <span class="keyword">continue</span>;

            <span class="keyword">for</span>(String a: dict){
                <span class="keyword">int</span> len = a.length();
                <span class="keyword">int</span> end = i + len;
                <span class="keyword">if</span>(end &gt; s.length())
                    <span class="keyword">continue</span>;

                <span class="keyword">if</span>(t[end]) <span class="keyword">continue</span>;

                <span class="keyword">if</span>(s.substring(i, end).equals(a)){
                    t[end] = <span class="keyword">true</span>;
                }
            }
        }

        <span class="keyword">return</span> t[s.length()];
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Validate Binary Search Tree]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/validate_binary_search_tree/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/validate_binary_search_tree/</id>
    <published>2014-06-06T05:11:05.000Z</published>
    <updated>2014-06-06T05:13:41.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given a binary tree, determine <span class="keyword">if</span> <span class="keyword">it</span> <span class="keyword">is</span> a valid binary search tree (BST).

Assume a BST <span class="keyword">is</span> defined <span class="keyword">as</span> follows:

The left subtree <span class="keyword">of</span> a node <span class="keyword">contains</span> only nodes <span class="keyword">with</span> keys <span class="keyword">less than</span> <span class="keyword">the</span> node's key.
The right subtree <span class="keyword">of</span> a node <span class="keyword">contains</span> only nodes <span class="keyword">with</span> keys <span class="keyword">greater than</span> <span class="keyword">the</span> node's key.
Both <span class="keyword">the</span> left <span class="keyword">and</span> right subtrees must also be binary search trees.
confused what <span class="string">"{1,#,2,3}"</span> means? &gt; <span class="command">read</span> more <span class="function_start"><span class="keyword">on</span></span> how binary tree <span class="keyword">is</span> serialized <span class="function_start"><span class="keyword">on</span></span> OJ.
</code></pre><p>思路：递归</p>
<h4 id="解法">解法</h4>
<pre><code><span class="comment">//  Definition for binary tree</span>
class TreeNode {
    <span class="keyword">int</span> val;
    TreeNode left;
    TreeNode right;

    TreeNode(<span class="keyword">int</span> x) {
        val = x;
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span>

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span>(TreeNode root) {
        <span class="keyword">return</span> validate(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validate</span>(TreeNode root, <span class="keyword">int</span> min, <span class="keyword">int</span> max) {
        <span class="keyword">if</span> (root == <span class="keyword">null</span>) {
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }

        <span class="comment">// not in range</span>
        <span class="keyword">if</span> (root.val &lt;= min || root.val &gt;= max) {
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }

        <span class="comment">// left subtree must be &lt; root.val &amp;&amp; right subtree must be &gt; root.val</span>
        <span class="keyword">return</span> validate(root.left, min, root.val) &amp;&amp; validate(root.right, root.val, max);
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Triangle]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/triangle/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/triangle/</id>
    <published>2014-06-06T05:03:10.000Z</published>
    <updated>2014-06-06T05:32:08.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given a triangle, find <span class="keyword">the</span> minimum path sum <span class="keyword">from</span> top <span class="keyword">to</span> bottom. Each step you may move <span class="keyword">to</span> adjacent numbers <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> row <span class="keyword">below</span>.

For example, <span class="keyword">given</span> <span class="keyword">the</span> following triangle
[
     [<span class="number">2</span>],
    [<span class="number">3</span>,<span class="number">4</span>],
   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],
  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]
]
The minimum path sum <span class="keyword">from</span> top <span class="keyword">to</span> bottom <span class="keyword">is</span> <span class="number">11</span> (i.e., <span class="number">2</span> + <span class="number">3</span> + <span class="number">5</span> + <span class="number">1</span> = <span class="number">11</span>).

Note:
Bonus point <span class="keyword">if</span> you are able <span class="keyword">to</span> do this using only O(n) extra <span class="constant">space</span>, <span class="keyword">where</span> n <span class="keyword">is</span> <span class="keyword">the</span> total <span class="type">number</span> <span class="keyword">of</span> rows <span class="keyword">in</span> <span class="keyword">the</span> triangle.
</code></pre><p>思路：经典动态规划问题，可以定义成dp[node]表示从当前node到bottom的最小路径和，对于最下面一层，因为它们是最底层，故它们到bottom的最小路径和就是它们自身；再往上一层，最小路径就是该节点加上该节点肩上的两个点的最小值。</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span>(List&lt;List&lt;Integer&gt;&gt; triangle) {
        <span class="keyword">if</span>(triangle==<span class="keyword">null</span>||triangle.size()==<span class="number">0</span>){
            <span class="keyword">return</span> <span class="number">0</span>;
        }
        <span class="keyword">int</span> row=triangle.size();
        <span class="keyword">int</span> []num=<span class="keyword">new</span> <span class="keyword">int</span>[row];
        <span class="keyword">for</span>(<span class="keyword">int</span> i=row-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--){
            <span class="keyword">int</span> col=triangle.<span class="keyword">get</span>(i).size();
            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++){
                <span class="comment">//最底层赋值</span>
                <span class="keyword">if</span>(i==row-<span class="number">1</span>){
                    num[j]=triangle.<span class="keyword">get</span>(i).<span class="keyword">get</span>(j);
                    <span class="keyword">continue</span>;
                }
                num[j]=Math.min(num[j],num[j+<span class="number">1</span>])+ triangle.<span class="keyword">get</span>(i).<span class="keyword">get</span>(j);
            }
        }
        <span class="keyword">return</span> num[<span class="number">0</span>];
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Same Tree]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/same_tree/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/same_tree/</id>
    <published>2014-06-06T05:00:13.000Z</published>
    <updated>2014-06-06T05:02:17.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given two binary trees, <span class="command">write</span> a function <span class="keyword">to</span> check <span class="keyword">if</span> they are <span class="keyword">equal</span> <span class="keyword">or</span> <span class="keyword">not</span>.

Two binary trees are considered <span class="keyword">equal</span> <span class="keyword">if</span> they are structurally identical <span class="keyword">and</span> <span class="keyword">the</span> nodes have <span class="keyword">the</span> same value.
</code></pre><p>思路：递归比较</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> boolean <span class="title">isSameTree</span>(TreeNode p, TreeNode q) {
        <span class="keyword">if</span>(p==<span class="keyword">null</span>&amp;&amp;q==<span class="keyword">null</span>)
            <span class="keyword">return</span> <span class="keyword">true</span>;
        <span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="keyword">null</span>||q==<span class="keyword">null</span>)
            <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">if</span>(p.val==q.val)
            <span class="keyword">return</span> isSameTree(p.left,q.left)&amp;&amp;isSameTree(q.right, p.right);
        <span class="keyword">else</span>
            <span class="keyword">return</span> <span class="keyword">false</span>;
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Swap Nodes in Pairs]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/swap_nodes_in_pairs/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/swap_nodes_in_pairs/</id>
    <published>2014-06-06T04:55:54.000Z</published>
    <updated>2014-06-06T04:59:10.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given a linked <span class="type">list</span>, swap <span class="keyword">every</span> two adjacent nodes <span class="keyword">and</span> <span class="constant">return</span> <span class="keyword">its</span> head.

For example,
Given <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>, you should <span class="constant">return</span> <span class="keyword">the</span> <span class="type">list</span> <span class="keyword">as</span> <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3.</span>

Your algorithm should use only <span class="type">constant</span> <span class="constant">space</span>. You may <span class="keyword">not</span> modify <span class="keyword">the</span> values <span class="keyword">in</span> <span class="keyword">the</span> <span class="type">list</span>, only nodes itself can be changed.
</code></pre><p>思路：递归遍历链表，每两个改变指针指向</p>
<h4 id="解法">解法</h4>
<pre><code><span class="javadoc">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span>
    <span class="keyword">public</span> ListNode <span class="title">swapPairs</span>(ListNode head) {
        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;
        <span class="keyword">if</span>(head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode first = head;
        ListNode second = head.next;
        ListNode third = second.next;
        second.next = first;
        first.next = swapPairs(third);
        <span class="keyword">return</span> second;
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Search Insert Position]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/search_insert_position/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/06/数据结构与算法/LeetCode/search_insert_position/</id>
    <published>2014-06-06T04:49:56.000Z</published>
    <updated>2014-06-06T04:54:17.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given a sorted array <span class="keyword">and</span> a target value, <span class="constant">return</span> <span class="keyword">the</span> index <span class="keyword">if</span> <span class="keyword">the</span> target <span class="keyword">is</span> found. If <span class="keyword">not</span>, <span class="constant">return</span> <span class="keyword">the</span> index <span class="keyword">where</span> <span class="keyword">it</span> would be <span class="keyword">if</span> <span class="keyword">it</span> were inserted <span class="keyword">in</span> order.

You may assume no duplicates <span class="keyword">in</span> <span class="keyword">the</span> array.

Here are few examples.
[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">5</span> → <span class="number">2</span>
[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">2</span> → <span class="number">1</span>
[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">7</span> → <span class="number">4</span>
[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">0</span> → <span class="number">0</span>
</code></pre><p>思路：方法一是遍历去找，方法二是二分法</p>
<h4 id="解法">解法</h4>
<pre><code><span class="comment">//方法一</span>
<span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target) {

        <span class="keyword">if</span>(A==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;

        <span class="keyword">if</span>(target &lt;= A[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;

        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;A.length-<span class="number">1</span>; i++){
            <span class="keyword">if</span>(target &gt; A[i] &amp;&amp; target &lt;= A[i+<span class="number">1</span>]){
                <span class="keyword">return</span> i+<span class="number">1</span>;
            }
        }

        <span class="keyword">return</span> A.length;
    }
}
<span class="comment">//方法二</span>
<span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target) {
        <span class="keyword">if</span>(A==<span class="keyword">null</span>||A.length==<span class="number">0</span>)
            <span class="keyword">return</span> <span class="number">0</span>;

        <span class="keyword">return</span> searchInsert(A,target,<span class="number">0</span>,A.length-<span class="number">1</span>);
    }

    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="keyword">int</span> end){
        <span class="keyword">int</span> mid=(start+end)/<span class="number">2</span>;

        <span class="keyword">if</span>(target==A[mid]) 
            <span class="keyword">return</span> mid;
        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;A[mid]) 
            <span class="keyword">return</span> start&lt;mid?searchInsert(A,target,start,mid-<span class="number">1</span>):start;
        <span class="keyword">else</span> 
            <span class="keyword">return</span> end&gt;mid?searchInsert(A,target,mid+<span class="number">1</span>,end):(end+<span class="number">1</span>);
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Search for a Range]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/search_for_a_range/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/数据结构与算法/LeetCode/search_for_a_range/</id>
    <published>2014-06-05T02:13:08.000Z</published>
    <updated>2014-06-05T02:21:34.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given a sorted array <span class="keyword">of</span> integers, find <span class="keyword">the</span> starting <span class="keyword">and</span> ending position <span class="keyword">of</span> a <span class="keyword">given</span> target value.

Your algorithm's runtime complexity must be <span class="keyword">in</span> <span class="keyword">the</span> order <span class="keyword">of</span> O(<span class="command">log</span> n).

If <span class="keyword">the</span> target <span class="keyword">is</span> <span class="keyword">not</span> found <span class="keyword">in</span> <span class="keyword">the</span> array, <span class="constant">return</span> [-<span class="number">1</span>, -<span class="number">1</span>].

For example,
Given [<span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">10</span>] <span class="keyword">and</span> target value <span class="number">8</span>,
<span class="command">return</span> [<span class="number">3</span>, <span class="number">4</span>].
</code></pre><p>思路：就是先用二分查找找到其中一个target，然后再往左右找到target的边缘。找边缘的方法跟二分查找仍然是一样的，只是切半的条件变成相等，或者不等（往左边找则是小于，往右边找则是大于）。这样下来总共进行了三次二分查找，所以算法的时间复杂度仍是O(logn)，空间复杂度是O(1)。</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">searchRange</span>(<span class="keyword">int</span>[] A, <span class="keyword">int</span> target) {
    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];
    res[<span class="number">0</span>] = -<span class="number">1</span>;
    res[<span class="number">1</span>] = -<span class="number">1</span>;
    <span class="keyword">if</span>(A==<span class="keyword">null</span> || A.length==<span class="number">0</span>)
    {
        <span class="keyword">return</span> res;
    }
    <span class="keyword">int</span> l=<span class="number">0</span>;
    <span class="keyword">int</span> r=A.length-<span class="number">1</span>;
    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;
    <span class="keyword">while</span>(l&lt;=r)
    {
        m=(l+r)/<span class="number">2</span>;
        <span class="keyword">if</span>(A[m]==target)
        {
            res[<span class="number">0</span>]=m;
            res[<span class="number">1</span>]=m;
            <span class="keyword">break</span>;
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(A[m]&gt;target)
        {
            r = m-<span class="number">1</span>;
        }
        <span class="keyword">else</span>
        {
            l = m+<span class="number">1</span>;
        }
    }
    <span class="keyword">if</span>(A[m]!=target)
        <span class="keyword">return</span> res;
    <span class="keyword">int</span> newL = m;
    <span class="keyword">int</span> newR = A.length-<span class="number">1</span>;
    <span class="keyword">while</span>(newL&lt;=newR)
    {
        <span class="keyword">int</span> newM=(newL+newR)/<span class="number">2</span>;
        <span class="keyword">if</span>(A[newM]==target)
        {
            newL = newM+<span class="number">1</span>;
        }
        <span class="keyword">else</span>
        {
            newR = newM-<span class="number">1</span>;
        }            
    }
    res[<span class="number">1</span>]=newR;
    newL = <span class="number">0</span>;
    newR = m;
    <span class="keyword">while</span>(newL&lt;=newR)
    {
        <span class="keyword">int</span> newM=(newL+newR)/<span class="number">2</span>;
        <span class="keyword">if</span>(A[newM]==target)
        {
            newR = newM-<span class="number">1</span>;
        }
        <span class="keyword">else</span>
        {
            newL = newM+<span class="number">1</span>;
        }            
    }
    res[<span class="number">0</span>]=newL;        
    <span class="keyword">return</span> res;
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Search a 2D Matrix]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/search_a_2d_matrix/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/数据结构与算法/LeetCode/search_a_2d_matrix/</id>
    <published>2014-06-05T02:08:06.000Z</published>
    <updated>2014-06-05T02:11:45.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Write an efficient algorithm <span class="keyword">that</span> searches <span class="keyword">for</span> a value <span class="keyword">in</span> an m x n matrix. This matrix has <span class="keyword">the</span> following properties:

Integers <span class="keyword">in</span> each row are sorted <span class="keyword">from</span> left <span class="keyword">to</span> right.
The <span class="keyword">first</span> <span class="type">integer</span> <span class="keyword">of</span> each row <span class="keyword">is</span> <span class="keyword">greater than</span> <span class="keyword">the</span> <span class="keyword">last</span> <span class="type">integer</span> <span class="keyword">of</span> <span class="keyword">the</span> previous row.
For example,

Consider <span class="keyword">the</span> following matrix:

[
  [<span class="number">1</span>,   <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">7</span>],
  [<span class="number">10</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">20</span>],
  [<span class="number">23</span>, <span class="number">30</span>, <span class="number">34</span>, <span class="number">50</span>]
]
Given target = <span class="number">3</span>, <span class="constant">return</span> <span class="constant">true</span>.
</code></pre><p>思路：二分查找</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Solution {
   <span class="keyword">public</span> boolean <span class="title">searchMatrix</span>(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target) {
    <span class="keyword">int</span> row = matrix.length;
    <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;
    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[row * col];
    <span class="keyword">int</span> count = <span class="number">0</span>;
    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) {
      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++) {
        temp[count++] = matrix[i][j];
      }
    }
    <span class="keyword">int</span> low = <span class="number">0</span>;
    <span class="keyword">int</span> high = row * col-<span class="number">1</span>;
    <span class="keyword">int</span> mid = -<span class="number">1</span>;
    <span class="keyword">while</span> (low &lt;= high) {
      mid = (low + high) / <span class="number">2</span>;
      <span class="keyword">if</span> (temp[mid] == target) {
        <span class="keyword">return</span> <span class="keyword">true</span>;
      } <span class="keyword">else</span> <span class="keyword">if</span> (temp[mid] &gt; target) {
        high = mid - <span class="number">1</span>;
      } <span class="keyword">else</span> {
        low = mid + <span class="number">1</span>;
      }
    }
    <span class="keyword">return</span> <span class="keyword">false</span>;
  }
}
<span class="comment">//参考网上的，空间复杂度比上一种降低</span>
<span class="keyword">public</span> <span class="keyword">class</span> Solution {
   <span class="keyword">public</span> boolean <span class="title">searchMatrix</span>(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target) {
    <span class="keyword">int</span> row = matrix.length;
    <span class="keyword">int</span> col = matrix[<span class="number">0</span>].length;
    <span class="keyword">int</span> low = <span class="number">0</span>;
    <span class="keyword">int</span> high = row * col - <span class="number">1</span>;
    <span class="keyword">int</span> mid = -<span class="number">1</span>;
    <span class="keyword">while</span> (low &lt;= high) {
      mid = (low + high) / <span class="number">2</span>;
      <span class="keyword">if</span> (matrix[mid/col][mid%col] == target) {
        <span class="keyword">return</span> <span class="keyword">true</span>;
      } <span class="keyword">else</span> <span class="keyword">if</span> (matrix[mid/col][mid%col] &gt; target) {
        high = mid - <span class="number">1</span>;
      } <span class="keyword">else</span> {
        low = mid + <span class="number">1</span>;
      }
    }
    <span class="keyword">return</span> <span class="keyword">false</span>;
   }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Remove Duplicates from Sorted List]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/remove_duplicates_from_sorted_list/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/数据结构与算法/LeetCode/remove_duplicates_from_sorted_list/</id>
    <published>2014-06-05T02:04:18.000Z</published>
    <updated>2014-06-05T02:06:35.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given a sorted linked <span class="built_in">list</span>, delete <span class="literal">all</span> duplicates such that each element appear only once<span class="built_in">.</span>

For example,
Given <span class="number">1</span><span class="subst">-&gt;</span><span class="number">1</span><span class="subst">-&gt;</span><span class="number">2</span>, <span class="keyword">return</span> <span class="number">1</span><span class="subst">-&gt;</span><span class="number">2.</span>
Given <span class="number">1</span><span class="subst">-&gt;</span><span class="number">1</span><span class="subst">-&gt;</span><span class="number">2</span><span class="subst">-&gt;</span><span class="number">3</span><span class="subst">-&gt;</span><span class="number">3</span>, <span class="keyword">return</span> <span class="number">1</span><span class="subst">-&gt;</span><span class="number">2</span><span class="subst">-&gt;</span><span class="number">3.</span>
</code></pre><h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span>(ListNode head) {
        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)
            <span class="keyword">return</span> head;

        ListNode p = head;

        <span class="keyword">while</span>( p!= <span class="keyword">null</span> &amp;&amp; p.next != <span class="keyword">null</span>){
            <span class="keyword">if</span>(p.val == p.next.val){
                p.next = p.next.next;
            }<span class="keyword">else</span>{
                p = p.next; 
            }
        }

        <span class="keyword">return</span> head;
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Remove Duplicates from Sorted Array II]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/remove_duplicates_from_sorted_array_ii/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/数据结构与算法/LeetCode/remove_duplicates_from_sorted_array_ii/</id>
    <published>2014-06-05T02:01:29.000Z</published>
    <updated>2014-06-05T02:03:49.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Follow up <span class="keyword">for</span> <span class="string">"Remove Duplicates"</span>:
What <span class="keyword">if</span> duplicates are allowed at most twice?

<span class="keyword">For</span> example,
Given sorted <span class="keyword">array</span> A = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],

Your <span class="keyword">function</span> should <span class="keyword">return</span> length = <span class="number">5</span>, <span class="keyword">and</span> A <span class="keyword">is</span> now [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>].
</code></pre><p>思路：俩指针</p>
<h4 id="解法">解法</h4>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span>(<span class="keyword">int</span>[] A) {
        <span class="keyword">if</span> (A.length &lt;= <span class="number">2</span>)
            <span class="keyword">return</span> A.length;

        <span class="keyword">int</span> prev = <span class="number">1</span>; <span class="comment">// point to previous</span>
        <span class="keyword">int</span> curr = <span class="number">2</span>; <span class="comment">// point to current</span>

        <span class="keyword">while</span> (curr &lt; A.length) {
            <span class="keyword">if</span> (A[curr] == A[prev] &amp;&amp; A[curr] == A[prev - <span class="number">1</span>]) {
                curr++;
            } <span class="keyword">else</span> {
                prev++;
                A[prev] = A[curr];
                curr++;
            }
        }

        <span class="keyword">return</span> prev + <span class="number">1</span>;
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LeetCode:Remove Duplicates from Sorted Array]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/remove_duplicates_from_sorted_array/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/06/05/数据结构与算法/LeetCode/remove_duplicates_from_sorted_array/</id>
    <published>2014-06-05T01:52:17.000Z</published>
    <updated>2014-06-05T01:59:29.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given <span class="operator">a</span> sorted array, remove <span class="operator">the</span> duplicates <span class="operator">in</span> place such that <span class="keyword">each</span> <span class="keyword">element</span> appear only once <span class="operator">and</span> <span class="constant">return</span> <span class="operator">the</span> <span class="built_in">new</span> <span class="built_in">length</span>.

Do <span class="operator">not</span> allocate extra <span class="constant">space</span> <span class="keyword">for</span> another array, you must <span class="built_in">do</span> this <span class="operator">in</span> place <span class="operator">with</span> <span class="built_in">constant</span> memory.

For example,
Given input array A = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],

Your <span class="function"><span class="keyword">function</span> <span class="title">should</span> <span class="title">return</span> <span class="title">length</span> = <span class="title">2</span>, <span class="title">and</span> <span class="title">A</span> <span class="title">is</span> <span class="title">now</span> [<span class="title">1</span>,<span class="title">2</span>].</span>
</code></pre><h4 id="解法">解法</h4>
<pre><code><span class="comment">//这种写法有BUG，能返回数组各不相同的元素的个数，但A数组可能不对</span>
<span class="comment">//{1, 2, 2, 3, 3}-&gt;{1, 2, 3, 3, 3}  正确的数组应该是{1, 2, 3}</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeDuplicatesNaive</span>(<span class="keyword">int</span>[] A) {
    <span class="keyword">if</span> (A.length &lt; <span class="number">2</span>)
        <span class="keyword">return</span> A.length;

    <span class="keyword">int</span> j = <span class="number">0</span>;
    <span class="keyword">int</span> i = <span class="number">1</span>;

    <span class="keyword">while</span> (i &lt; A.length) {
        <span class="keyword">if</span> (A[i] == A[j]) {
            i++;
        } <span class="keyword">else</span> {
            j++;
            A[j] = A[i];
            i++;
        }
    }

    <span class="keyword">return</span> j + <span class="number">1</span>;
}
<span class="comment">//解法2</span>
<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">removeDuplicates</span>(<span class="keyword">int</span>[] A) {
    <span class="keyword">if</span> (A.length &lt; <span class="number">2</span>)
        <span class="keyword">return</span> A;

    <span class="keyword">int</span> j = <span class="number">0</span>;
    <span class="keyword">int</span> i = <span class="number">1</span>;

    <span class="keyword">while</span> (i &lt; A.length) {
        <span class="keyword">if</span> (A[i] == A[j]) {
            i++;
        } <span class="keyword">else</span> {
            j++;
            A[j] = A[i];
            i++;
        }
    }

    <span class="keyword">int</span>[] B = Arrays.copyOf(A, j + <span class="number">1</span>);

    <span class="keyword">return</span> B;
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
