<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DaMinger's blog]]></title>
  <subtitle><![CDATA[信春哥，系统稳，闭眼上线不回滚]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://github.com/DaMinger/DaMinger.github.io.git/"/>
  <updated>2014-05-20T13:40:45.333Z</updated>
  <id>https://github.com/DaMinger/DaMinger.github.io.git/</id>
  
  <author>
    <name><![CDATA[DaMinger]]></name>
    <email><![CDATA[564400632@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[设计模式之抽象工厂模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/abstractfactory/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/abstractfactory/</id>
    <published>2014-05-20T12:08:21.000Z</published>
    <updated>2014-05-20T13:06:21.000Z</updated>
    <content type="html"><![CDATA[<h4 id="定义">定义</h4>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类<br>分析：</p>
<ul>
<li>易于交换产品系列，具体工厂类在一个应用中只需要初始化的时候出现一次，这就使改变一个应用的具体工厂变得容易，它只需要改变具体工厂即可使用不同产品配置。</li>
<li>让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操纵实例，产品具体类名也被具体工厂实现分离，不会出现在客户代码中。</li>
<li>对产品的扩展比较麻烦，费力，如果需要增加一个新产品，则要改动几乎所有的工厂类。</li>
</ul>
<p><img src="/img/Design patterns/abstractfactory.png" alt="类图"></p>
<p>这个实验案例来自于网上</p>
<h4 id="Java版">Java版</h4>
<p>抽象产品角色（我们定义了一个打印机）</p>
<pre><code><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> Printer
{
    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">out</span>();

    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg);
}
</code></pre><p>抽象工厂角色</p>
<pre><code><span class="keyword">public</span> <span class="keyword">interface</span> PrinterFactory
{
    <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String type);
}
</code></pre><p>具体工厂角色（我们定义4个具体工厂，一个是高速打印机工厂，一个是普通打印机工厂，一个是戴尔打印机工厂，一个是惠普打印机工厂）</p>
<pre><code>    <span class="comment">/*
     * a、生产高速打印机的工厂
     * b、可以是戴尔，也可以是惠普
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String type)
        {
            <span class="keyword">if</span>(type.equals(<span class="string">"dell"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellBetterPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"hp"</span>))
            {
            <span class="keyword">return</span> <span class="keyword">new</span> HpBetterPrinter();
            }
            <span class="keyword">else</span>
            {
            <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }

    <span class="comment">/*
     * a、生产普通打印机的工厂
     * b、可以是戴尔，也可以是惠普
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String type)
        {
            <span class="keyword">if</span>(type.equals(<span class="string">"dell"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellCommonPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"hp"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> HpCommonPrinter();
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }


    <span class="comment">/*
     * a、生产戴尔打印机的工厂
     * b、可以是高速打印机，也可以是普通打印机
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String vendor)
        {
            <span class="keyword">if</span>(vendor.equals(<span class="string">"better"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellBetterPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(vendor.equals(<span class="string">"common"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellCommonPrinter();
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }


    <span class="comment">/*
     * a、生产惠普打印机的工厂
     * b、可以是高速打印机，也可以是普通打印机
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String vendor)
        {
            <span class="keyword">if</span>(vendor.equals(<span class="string">"better"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> HpBetterPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(vendor.equals(<span class="string">"common"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> HpCommonPrinter();
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }    
</code></pre><p>具体产品角色（我们定义四个产品。戴尔高速打印机，戴尔普通打印机，惠普高速打印机，惠普普通打印机）</p>
<pre><code><span class="javadoc">/**
 * 戴尔高速打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellBetterPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE * <span class="number">2</span>];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE * <span class="number">2</span>)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"戴尔高速打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }
    }
}


<span class="javadoc">/**
 * 戴尔普通打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellCommonPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"戴尔普通打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }

    }
}


<span class="javadoc">/**
 * 惠普高速打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpBetterPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE * <span class="number">2</span>];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE * <span class="number">2</span>)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"惠普高速打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }
    }
}


<span class="javadoc">/**
 * 惠普普通打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpCommonPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"惠普普通打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }
    }
}
</code></pre><p>制造出一个想要的工厂，去生产相对应的打印机</p>
<pre><code>/*
 * 制造出一个想要的工厂，去生产相对应的打印机
 */
<span class="keyword">public</span> <span class="keyword">class</span> PrinterFactoryFactory
{
    <span class="keyword">public</span>  PrinterFactory getPrintFactory(String <span class="class"><span class="keyword">type</span>)</span>
    {
        <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"common"</span>))<span class="comment">//造出一个生产普通打印机的工厂</span>
        {
            <span class="keyword">return</span> <span class="keyword">new</span> CommonPrinterFactory();
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"better"</span>))<span class="comment">//造出一个生产高速打印机的工厂</span>
        {
            <span class="keyword">return</span> <span class="keyword">new</span> BetterPrinterFactory();
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"dell"</span>))<span class="comment">//造出一个生产戴尔打印机的工厂</span>
        {
            <span class="keyword">return</span> <span class="keyword">new</span> DellPrinterFactory();<span class="comment">//造出一个生产惠普打印机的工厂</span>
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"hp"</span>))
        {
            <span class="keyword">return</span> <span class="keyword">new</span> HpPrinterFactory();
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">return</span> <span class="keyword">null</span>;
        }
    }
}
</code></pre><p>客户端</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Computer
{
    <span class="keyword">private</span> Printer <span class="keyword">out</span>;

    <span class="keyword">public</span> <span class="title">Computer</span>(Printer <span class="keyword">out</span>)
    {
        <span class="keyword">this</span>.<span class="keyword">out</span> = <span class="keyword">out</span>;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyIn</span>(String msg)
    {
        <span class="keyword">out</span>.getData(msg);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()
    {
        <span class="keyword">out</span>.<span class="keyword">out</span>();
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args)
    {
        PrinterFactoryFactory pff = <span class="keyword">new</span> PrinterFactoryFactory();
        PrinterFactory of = pff.getPrintFactory(<span class="string">"common"</span>);
        Computer c = <span class="keyword">new</span> Computer(of.getPrinter(<span class="string">"hp"</span>));
        c.keyIn(<span class="string">"hello"</span>);
        c.keyIn(<span class="string">"world"</span>);
        c.print();

        PrinterFactoryFactory pff2 = <span class="keyword">new</span> PrinterFactoryFactory();
        PrinterFactory of2 = pff2.getPrintFactory(<span class="string">"hp"</span>);
        Computer c2 = <span class="keyword">new</span> Computer(of2.getPrinter(<span class="string">"common"</span>));
        c2.keyIn(<span class="string">"hello"</span>);
        c2.keyIn(<span class="string">"world"</span>);
        c2.print();
    }
}
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之工厂模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/factory/</id>
    <published>2014-05-20T11:34:39.000Z</published>
    <updated>2014-05-20T12:06:36.000Z</updated>
    <content type="html"><![CDATA[<h4 id="工厂模式定义">工厂模式定义</h4>
<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p>
<h4 id="优点">优点</h4>
<ul>
<li>可以使代码结构清晰，有效地封装变化。在编程中，产品类的实例化有时候是比较复杂和多变的，通过工厂模式，将产品的实例化封装起来，使得调用者根本无需关心产品的实例化过程，只需依赖工厂即可得到自己想要的产品。</li>
<li>对调用者屏蔽具体的产品类。如果使用工厂模式，调用者只关心产品的接口就可以了，至于具体的实现，调用者根本无需关心。即使变更了具体的实现，对调用者来说没有任何影响。</li>
<li>降低耦合度。产品类的实例化通常来说是很复杂的，它需要依赖很多的类，而这些类对于调用者来说根本无需知道，如果使用了工厂方法，我们需要做的仅仅是实例化好产品类，然后交给调用者使用。对调用者来说，产品所依赖的类都是透明的。</li>
</ul>
<p><img src="/img/Design patterns/factory.png" alt="类图"></p>
<p>实验来自《大话设计模式》   程序实例：基类雷锋类，派生出学生类和志愿者类，由这两种子类完成“学雷锋”工作。子类的创建由雷锋工厂的对应的子类完成。</p>
<h4 id="Java版">Java版</h4>
<p>基类：雷锋类</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> LeiFeng {

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sweep</span>() {
        System.<span class="keyword">out</span>.println(<span class="string">"Sweep"</span>);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Wash</span>() {
        System.<span class="keyword">out</span>.println(<span class="string">"wash"</span>);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuyRice</span>() {
        System.<span class="keyword">out</span>.println(<span class="string">"buy"</span>);
    }
}
</code></pre><p>学生类和志愿者类</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volunteer</span> <span class="keyword">extends</span> <span class="title">LeiFeng</span>{</span>

}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Undergraduate</span> <span class="keyword">extends</span> <span class="title">LeiFeng</span>{</span>

}
</code></pre><p>定义雷锋工厂</p>
<pre><code><span class="keyword">public</span> <span class="keyword">interface</span> IFactory {

    LeiFeng CreateLeiFeng();
}
</code></pre><p>毕业生工厂、志愿者工厂，返回毕业生、志愿者实例</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndergraduateFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> {</span>

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> LeiFeng <span class="title">CreateLeiFeng</span>() {
        <span class="comment">// TODO Auto-generated method stub</span>
        <span class="keyword">return</span> <span class="keyword">new</span> Undergraduate();
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolunteerFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> {</span>

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> LeiFeng <span class="title">CreateLeiFeng</span>() {
        <span class="comment">// TODO Auto-generated method stub</span>
        <span class="keyword">return</span> <span class="keyword">new</span> Volunteer();
    }

}
</code></pre><p>客户端</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> test {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String args[]){
        <span class="comment">//毕业生去当雷锋，只需要得到一个实例就OK了</span>
        IFactory factory = <span class="keyword">new</span> UndergraduateFactory();
        LeiFeng stduent = factory.CreateLeiFeng();
        stduent.BuyRice();
        stduent.Wash();
        stduent.Sweep();
    }

}
</code></pre><h4 id="Python版">Python版</h4>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">LeiFeng</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Sweep</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"LeiFeng sweep"</span>

<span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(LeiFeng)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Sweep</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"Student sweep"</span>

<span class="class"><span class="keyword">class</span> <span class="title">Volenter</span><span class="params">(LeiFeng)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Sweep</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"Volenter sweep"</span>

<span class="class"><span class="keyword">class</span> <span class="title">LeiFengFactory</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">CreateLeiFeng</span><span class="params">(self)</span>:</span>
        temp = LeiFeng()
        <span class="keyword">return</span> temp

<span class="class"><span class="keyword">class</span> <span class="title">StudentFactory</span><span class="params">(LeiFengFactory)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">CreateLeiFeng</span><span class="params">(self)</span>:</span>
        temp = Student()
        <span class="keyword">return</span> temp

<span class="class"><span class="keyword">class</span> <span class="title">VolenterFactory</span><span class="params">(LeiFengFactory)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">CreateLeiFeng</span><span class="params">(self)</span>:</span>
        temp = Volenter()
        <span class="keyword">return</span> temp

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    sf = StudentFactory()
    s=sf.CreateLeiFeng()
    s.Sweep()
    sdf = VolenterFactory()
    sd=sdf.CreateLeiFeng()
    sd.Sweep()
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之单例模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/singleton/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/singleton/</id>
    <published>2014-05-20T10:15:49.000Z</published>
    <updated>2014-05-20T11:16:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="单例模式有以下特点：">单例模式有以下特点：</h4>
<ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p>应用场景  例如：数据库连接池的设计一般是采用单例模式，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单例模式来维护，就可以大大降低这种损耗。</p>
<p><img src="/img/Design patterns/Singleton.png" alt="类图"></p>
<h4 id="经典懒汉模式">经典懒汉模式</h4>
<pre><code>class LazySingleton{

    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton;

    <span class="keyword">private</span> <span class="title">LazySingleton</span>(){

    }

    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span>(){

        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>){

            singleton=<span class="keyword">new</span> LazySingleton();

        }

        <span class="keyword">return</span> singleton;

    }  

}
</code></pre><p>但是这种设计不满足线程安全的要求，在并发环境下很可能出现多个Singleton实例。</p>
<p>注：线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。或者说：一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。</p>
<h4 id="饿汉模式">饿汉模式</h4>
<pre><code>class HungrySingleton{

    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton singleton=<span class="keyword">new</span> HungrySingleton();

    <span class="keyword">private</span> <span class="title">HungrySingleton</span>(){}

    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span>(){

        <span class="keyword">return</span> singleton;

    }

}
</code></pre><p>饿汉模式就是在jvm进程启动并在我们主动使用该类的时候就会在内存中初始化一个单例对象，当我们调用getInstance()的时候直接获取该对象，它的创建是在我们调用getInstance()静态方法之前！但是这种写法没实现Lazy loading。</p>
<h4 id="改造的懒汉模式">改造的懒汉模式</h4>
<pre><code>class LazySingleton{

        <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton;

        <span class="keyword">private</span> <span class="title">LazySingleton</span>(){

        }

        <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span>(){

            <span class="keyword">if</span>(singleton==<span class="keyword">null</span>){

                singleton=<span class="keyword">new</span> LazySingleton();

            }

            <span class="keyword">return</span> singleton;

        }  

    }
</code></pre><p>懒汉模式是相对于饿汉模式而言的，在jvm进程启动并在我们主动使用该类的时候不会在内存中初始化一个单例对象，只有当我们调用getInstance()的时候才去创建该对象，它的创建是在我们调用getInstance()静态方法之后，为了并没现象同步问题，我们在getInstance()方法上加了一个锁，这个方法每次只允许一个线程进来，虽然同步问题是解决了，但是相应的性能问题就出现了。</p>
<h4 id="静态内部类">静态内部类</h4>
<pre><code>class InternalSingleton{

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> SingletonHolder{

        <span class="keyword">private</span> final <span class="keyword">static</span>  InternalSingleton INSTANCE=<span class="keyword">new</span> InternalSingleton();

    }  

    <span class="keyword">private</span> <span class="title">InternalSingleton</span>(){}

    <span class="keyword">public</span> <span class="keyword">static</span> InternalSingleton <span class="title">getInstance</span>(){

        <span class="keyword">return</span> SingletonHolder.INSTANCE;

    }

}
</code></pre><p>加载时不会初始化静态变量INSTANCE，因为没有主动使用，达到Lazy loading</p>
<h4 id="枚举">枚举</h4>
<pre><code><span class="keyword">enum</span> EnumSingleton{
    INSTANCE;
    <span class="comment">//自定义方法</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span>(){
    }
}
</code></pre><p>EnumSingleton.INSTANCE直接调用，《Effective Java》作者推荐使用的方法，优点：不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象</p>
<h4 id="双重校验锁">双重校验锁</h4>
<p>这个我没怎么看懂，就不贴代码了，如有兴趣，自行搜索。</p>
]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之策略模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/strategy/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/strategy/</id>
    <published>2014-05-20T08:29:14.000Z</published>
    <updated>2014-05-20T10:07:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="策略模式（Strategy）">策略模式（Strategy）</h4>
<p>定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的用户。</p>
<p>策略模式是一种定义一系列算法的方法，从概念上看，所有这些算法完成的都是相同的工作，只是实现上不同，它可以以相同的方式调用所有的算法，减少各种算法类与算法使用类之间的耦合。</p>
<p>策略模式是用来封装算法的，但在实践中发现，可以用它来封装几乎任何类型的规则，只要在分析过程中需要在不同时间应用不同的业务规则，就可以考虑使用策略模式来处理这种变化的可能性。</p>
<h4 id="策略模式的好处">策略模式的好处</h4>
<ul>
<li>利用继承能有助于析取出不同算法中的公共功能</li>
<li>简化了单元测试，因为每个算法都有自己的实现类，可以通过自己的接口单独进行测试</li>
<li>将不同的行为封装到一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句，因为当不同的行为堆叠在一个类中时，就难以避免用条件语句来选择合适的行为。</li>
</ul>
<p>实验来自&lt;&lt;大话设计模式&gt;&gt;<br><img src="/img/Design patterns/Strategy.jpg" alt="类图"></p>
<h4 id="Java版">Java版</h4>
<p>抽象策略类</p>
<pre><code><span class="keyword">abstract</span> class CashSuper {
    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money);
}
</code></pre><p>具体策略类</p>
<pre><code>CashNormal.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashNormal</span> <span class="keyword">extends</span> <span class="title">CashSuper</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money) {
        <span class="keyword">return</span> money;
    }

}
CashRebate.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashRebate</span> <span class="keyword">extends</span> <span class="title">CashSuper</span>{</span>

    <span class="keyword">private</span> <span class="keyword">double</span> moneyRebate =<span class="number">1</span>d;
    <span class="keyword">public</span> <span class="title">CashRebate</span>(String moneyRebate){
        <span class="keyword">this</span>.moneyRebate = Double.parseDouble(moneyRebate);
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money) {

        <span class="keyword">return</span> money * moneyRebate;
    }

}
CashReturn.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashReturn</span> <span class="keyword">extends</span> <span class="title">CashSuper</span> {</span>

    <span class="keyword">private</span> <span class="keyword">double</span> moneyCondition = <span class="number">0.0</span>d;
    <span class="keyword">private</span> <span class="keyword">double</span> moneyReturn = <span class="number">0.0</span>d;
    <span class="keyword">public</span> <span class="title">CashReturn</span>(String moneyCondition,String moneyReturn){
        <span class="keyword">this</span>.moneyCondition = Double.parseDouble(moneyCondition);
        <span class="keyword">this</span>.moneyReturn = Double.parseDouble(moneyReturn);
    }

    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money) {
        <span class="keyword">double</span> result = money;
        <span class="keyword">if</span> (money &gt;= moneyCondition) {
            result = money - Math.floor(money / moneyCondition) * moneyReturn;
        }
        <span class="keyword">return</span> result;
    }

}
</code></pre><p>定义一个Context上下文，用一个ConcreteStrategy来配置，维护Strategy对象</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> CashContext {

    CashSuper cs ;

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCs</span>(CashSuper cs) {
        <span class="keyword">this</span>.cs = cs;
    }
    <span class="keyword">public</span> <span class="title">CashContext</span>(String type){
        <span class="keyword">switch</span> (type){
        <span class="keyword">case</span> <span class="string">"1"</span>:   <span class="comment">//normal</span>
            cs = <span class="keyword">new</span> CashNormal();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"2"</span>:   <span class="comment">//return</span>
            CashReturn cr1 = <span class="keyword">new</span> CashReturn(<span class="string">"300"</span>,<span class="string">"100"</span>);
            cs = cr1;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"3"</span>:     <span class="comment">//0.8</span>
            CashRebate cr2 = <span class="keyword">new</span> CashRebate(<span class="string">"0.8"</span>);
            cs = cr2;
            <span class="keyword">break</span>;
        }
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span>(<span class="keyword">double</span> money){
        <span class="keyword">return</span> cs.acceptCash(money);
    }
}
</code></pre><p>客户端</p>
<pre><code>import java.util.Scanner;
<span class="keyword">public</span> <span class="keyword">class</span> test {

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {

        <span class="keyword">double</span> money =<span class="number">0.0</span>d;
        String strategy =<span class="keyword">null</span>;
        Scanner read =<span class="keyword">new</span> Scanner (System.<span class="keyword">in</span>);
        System.<span class="keyword">out</span>.println(<span class="string">"Please choose strategy: 1:normal 2:满300返100 3:打0.8折"</span>);
        strategy = read.next();
        System.<span class="keyword">out</span>.println(<span class="string">"Please input  money"</span>);
        money=Double.valueOf(read.next());<span class="comment">//Double.parseDouble(read.next())</span>
        <span class="keyword">double</span> totalPrices = <span class="number">0</span>d;
        CashContext csuper =<span class="keyword">new</span> CashContext(strategy);
        totalPrices=csuper.getResult(money);
        System.<span class="keyword">out</span>.println(<span class="string">" "</span>+totalPrices);
    }

}
</code></pre><h4 id="Python版">Python版</h4>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">CashSuper</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> <span class="number">0</span>

<span class="class"><span class="keyword">class</span> <span class="title">CashNormal</span><span class="params">(CashSuper)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> money

<span class="class"><span class="keyword">class</span> <span class="title">CashRebate</span><span class="params">(CashSuper)</span>:</span>
    discount = <span class="number">0</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ds)</span>:</span>
        self.discount = ds
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> money * self.discount

<span class="class"><span class="keyword">class</span> <span class="title">CashReturn</span><span class="params">(CashSuper)</span>:</span>
    total = <span class="number">0</span>;
    ret = <span class="number">0</span>;
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,t,r)</span>:</span>
        self.total = t
        self.ret = r
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">if</span> (money&gt;=self.total):
            <span class="keyword">return</span> money - self.ret
        <span class="keyword">else</span>:
            <span class="keyword">return</span> money

<span class="class"><span class="keyword">class</span> <span class="title">CashContext</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,csuper)</span>:</span>
        self.cs = csuper
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> self.cs.AcceptCash(money)

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    money = input(<span class="string">"money:"</span>)
    strategy = {}
    strategy[<span class="number">1</span>] = CashContext(CashNormal())
    strategy[<span class="number">2</span>] = CashContext(CashRebate(<span class="number">0.8</span>))
    strategy[<span class="number">3</span>] = CashContext(CashReturn(<span class="number">300</span>,<span class="number">100</span>))
    ctype = input(<span class="string">"type:[1]for normal,[2]for 80% discount [3]for 300 -100."</span>)
    <span class="keyword">if</span> ctype <span class="keyword">in</span> strategy:
        cc = strategy[ctype]
    <span class="keyword">else</span>:
        <span class="keyword">print</span> <span class="string">"Undefine type.Use normal mode."</span>
        cc = strategy[<span class="number">1</span>]
    <span class="keyword">print</span> <span class="string">"you will pay:%d"</span> %(cc.GetResult(money))
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之简单工厂模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/simplefactory/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/simplefactory/</id>
    <published>2014-05-20T07:31:09.000Z</published>
    <updated>2014-05-20T08:25:23.000Z</updated>
    <content type="html"><![CDATA[<p>何谓是简单工厂模式呢，因为在我们日常编程中，经常出现一种情况就是每当“new”一个对象之后，这个对象就依赖于某个类。如果在后期的维护过程中由于某些原因需要修改一下这个类，则唯一的做法就是打开源代码，进行修改，修改所有与这个对象有关的操作。这对我们是非常不利的。问题出来了：对象不能应对“具体实例化类型”的变化。那么简单工厂模式就是出来了，它的意图就是：专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类或接口。或者是提供一个类，由它负责根据一定的条件创建某一具体类的实例。</p>
<p>实验来自&lt;&lt;大话设计模式&gt;&gt;<br><img src="/img/Design patterns/simplefactory_1.png" alt="类图"></p>
<h4 id="Java版">Java版</h4>
<p>计算类</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Operation {

    <span class="keyword">protected</span> <span class="keyword">double</span> numA;
    <span class="keyword">protected</span> <span class="keyword">double</span> numB;
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getNumA</span>() {
        <span class="keyword">return</span> numA;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumA</span>(<span class="keyword">double</span> numA) {
        <span class="keyword">this</span>.numA = numA;
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getNumB</span>() {
        <span class="keyword">return</span> numB;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumB</span>(<span class="keyword">double</span> numB) {
        <span class="keyword">this</span>.numB = numB;
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        <span class="keyword">return</span> result;
    }
}
</code></pre><p>加减乘除类，继承计算类</p>
<pre><code>Add.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">Operation</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
    <span class="keyword">double</span> result=<span class="number">0</span>;
    result =numA+numB;
    <span class="keyword">return</span> result;
    }
}
Mul.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mul</span> <span class="keyword">extends</span> <span class="title">Operation</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        result =numA*numB;
        <span class="keyword">return</span> result;
    }
}
Sub.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Operation</span> {</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        result =numA-numB;
        <span class="keyword">return</span> result;
    }
}
Div.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Div</span> <span class="keyword">extends</span> <span class="title">Operation</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        <span class="keyword">if</span>(numB == <span class="number">0</span>){
            <span class="keyword">try</span>{
                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"00000"</span>);
            }<span class="keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }<span class="keyword">else</span>{
            result =numA+numB;
        }
    <span class="keyword">return</span> result;
    }    
}
</code></pre><p>工厂类    </p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> OperationFactory {
    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperation</span>(String operate){
        Operation oper =<span class="keyword">null</span>;
        <span class="keyword">switch</span>(operate){
        <span class="keyword">case</span> <span class="string">"+"</span>:
            oper =<span class="keyword">new</span> Add();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"-"</span>:
            oper =<span class="keyword">new</span> Sub();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"*"</span>:
            oper =<span class="keyword">new</span> Mul();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"/"</span>:
            oper =<span class="keyword">new</span> Div();
            <span class="keyword">break</span>;
        }
        <span class="keyword">return</span> oper;
    }

}
</code></pre><p>客户端</p>
<pre><code>import java<span class="preprocessor">.util</span><span class="preprocessor">.Scanner</span>；
public class test {
    public static void main(String[] args) {
        try{
            Operation oper<span class="comment">;</span>
            Scanner read =new Scanner (System<span class="preprocessor">.in</span>)<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"The first number"</span>)<span class="comment">;</span>
            String numA=read<span class="preprocessor">.next</span>()<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"The Operation"</span>)<span class="comment">;</span>
            String operate=read<span class="preprocessor">.next</span>()<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"The sencond number"</span>)<span class="comment">;</span>
            String numB=read<span class="preprocessor">.next</span>()<span class="comment">;</span>
            oper=OperationFactory<span class="preprocessor">.createOperation</span>(operate)<span class="comment">;</span>
            oper<span class="preprocessor">.numA</span> = Double<span class="preprocessor">.valueOf</span>(numA)<span class="comment">;</span>
            oper<span class="preprocessor">.numB</span> = Double<span class="preprocessor">.valueOf</span>(numB)<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(numA+operate+numB+<span class="string">"==?"</span>)<span class="comment">;</span>

            double result=<span class="number">0</span> <span class="comment">;</span>
            result =oper<span class="preprocessor">.GetResult</span>()<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"the result is:"</span>+result)<span class="comment">;</span>
            }catch (Exception e){
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"you have something wrong : "</span> + e<span class="preprocessor">.getMessage</span>())<span class="comment">;</span>
            }
    }

}
</code></pre><h4 id="优势">优势</h4>
<ul>
<li>简单工厂模式能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。通过它，外界可以从直接创建具体产品对象的尴尬局面中摆脱出来。</li>
<li>外界与具体类隔离开来，偶合性低。</li>
<li>明确区分了各自的职责和权力，有利于整个软件体系结构的优化。　</li>
</ul>
<h4 id="劣势">劣势</h4>
<ul>
<li>工厂类集中了所有实例的创建逻辑，容易违反高内聚的责任分配原则 </li>
<li>虽然简单工厂模式能够适应一定的变化，但是它所能解决的问题是远远有限的。它所能创建的类只能是事先教考虑到的，如果需要添加新的类，则就需要改变工厂类了。</li>
</ul>
<h4 id="应用情况">应用情况</h4>
<ul>
<li>工厂类负责创建的对象比较少</li>
<li>客户只知道传入了工厂类的参数，对于始何创建对象（逻辑）不关心 </li>
</ul>
<h4 id="Python版">Python版</h4>
<p>技巧 ：字典的使用</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Operation</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">pass</span>

<span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.numA+self.numB

<span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.numA-self.numB

<span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.numA*self.numB


<span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">try</span>:
            result = self.numA/self.numB
            <span class="keyword">return</span> result
        <span class="keyword">except</span>:
            <span class="keyword">print</span> <span class="string">"000000000!!"</span>
            <span class="keyword">return</span> <span class="number">0</span>


<span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span>:</span>
    operation = {}
    operation[<span class="string">"+"</span>] = OperationAdd();
    operation[<span class="string">"-"</span>] = OperationSub();
    operation[<span class="string">"*"</span>] = OperationMul();
    operation[<span class="string">"/"</span>] = OperationDiv();
    <span class="function"><span class="keyword">def</span> <span class="title">createOperation</span><span class="params">(self,ch)</span>:</span>
        <span class="keyword">if</span> ch <span class="keyword">in</span> self.operation:
            op = self.operation[ch]
        <span class="keyword">return</span> op

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    op = raw_input(<span class="string">"operator: "</span>)
    numA = input(<span class="string">"a: "</span>)
    numB = input(<span class="string">"b: "</span>)
    factory = OperationFactory()
    cal = factory.createOperation(op)
    cal.numA = numA
    cal.numB = numB
    <span class="keyword">print</span> cal.GetResult()
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UML中类之间的关系详解]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/uml/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/uml/</id>
    <published>2014-05-20T07:05:22.000Z</published>
    <updated>2014-05-20T07:27:00.000Z</updated>
    <content type="html"><![CDATA[<p>面向对象设计中，类与类之间主要有6种关系，他们分别是：依赖、关联、聚合、组合、继承、实现。他们的耦合度依次增强。</p>
<h5 id="依赖(Dependence)">依赖(Dependence)</h5>
<p><img src="/img/Design patterns/uml/1.gif" alt=" "><br><img src="/img/Design patterns/uml/2.gif" alt=" "><br>依赖关系的定义为：对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系。例如类A当中使用了类B，其中类B是作为类A的方法参数、方法中的局部变量、或者静态方法调用。类上面的图例中：People类依赖于Book类和Food类，Book类和Food类是作为类中方法的参数形式出现在People类中的。</p>
<h5 id="关联（Association）">关联（Association）</h5>
<p><img src="/img/Design patterns/uml/3.gif" alt=" "><img src="/img/Design patterns/uml/4.gif" alt=" "><img src="/img/Design patterns/uml/5.gif" alt=" "><br>单向关联<br><img src="/img/Design patterns/uml/6.gif" alt=" "><br>双向关联<br><img src="/img/Design patterns/uml/7.gif" alt=" "><br>对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象之间为关联关系。关联关系分为单向关联和双向关联。单向关联表现为：类A当中使用了类B，其中类B是作为类A的成员变量。双向关联表现为：类A当中使用了类B作为成员变量；同时类B中也使用了类A作为成员变量。</p>
<h5 id="聚合（Aggregation）">聚合（Aggregation）</h5>
<p><img src="/img/Design patterns/uml/8.gif" alt=" "><br><img src="/img/Design patterns/uml/9.gif" alt=" "><br> 聚合关系是关联关系的一种，耦合度强于关联，他们的代码表现是相同的，仅仅是在语义上有所区别：关联关系的对象间是相互独立的，而聚合关系的对象之间存在着包容关系，他们之间是“整体-个体”的相互关系。</p>
<h5 id="组合（Composition）">组合（Composition）</h5>
<p><img src="/img/Design patterns/uml/10.gif" alt=" "><br><img src="/img/Design patterns/uml/11.gif" alt=" "><br>相比于聚合，组合是一种耦合度更强的关联关系。存在组合关系的类表示“整体-部分”的关联关系，“整体”负责“部分”的生命周期，他们之间是共生共死的；并且“部分”单独存在时没有任何意义。在上图的例子中，People与Soul、Body之间是组合关系，当人的生命周期开始时，必须同时有灵魂和肉体；当人的生命周期结束时，灵魂肉体随之消亡；无论是灵魂还是肉体，都不能单独存在，他们必须作为人的组成部分存在。</p>
<h5 id="继承（Generalization）">继承（Generalization）</h5>
<p><img src="/img/Design patterns/uml/12.gif" alt=" "><br><img src="/img/Design patterns/uml/13.gif" alt=" "><br>继承表示类与类（或者接口与接口）之间的父子关系。在java中，用关键字extends表示继承关系。UML图例中，继承关系用实线+空心箭头表示，箭头指向父类。</p>
<h5 id="实现（Implementation）">实现（Implementation）</h5>
<p><img src="/img/Design patterns/uml/14.gif" alt=" "><br><img src="/img/Design patterns/uml/15.gif" alt=" "><br>表示一个类实现一个或多个接口的方法。接口定义好操作的集合，由实现类去完成接口的具体操作。在java中使用implements表示。UML图例中，实现关系用虚线+空心箭头表示，箭头指向接口。</p>
]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awk_exercise]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk_exercise/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk_exercise/</id>
    <published>2014-05-19T12:56:28.000Z</published>
    <updated>2014-05-19T13:22:28.000Z</updated>
    <content type="html"><![CDATA[<p>实验脚本来自《鸟哥的私房菜》</p>
<h4 id="假设我们有这样一个待处理的文件”grade-txt”">假设我们有这样一个待处理的文件”grade.txt”</h4>
<pre><code>M<span class="preprocessor">.Tansley</span>     <span class="number">05</span>/<span class="number">99</span>     <span class="number">48311</span>     Green     <span class="number">8</span>     <span class="number">40</span>     <span class="number">44</span>
J<span class="preprocessor">.Lulu</span>        <span class="number">06</span>/<span class="number">99</span>     <span class="number">48317</span>     green     <span class="number">9</span>     <span class="number">24</span>     <span class="number">26</span>
P<span class="preprocessor">.Bunny</span>       <span class="number">02</span>/<span class="number">99</span>     <span class="number">48</span>        Yellow     <span class="number">12</span>     <span class="number">35</span>     <span class="number">28</span>
J<span class="preprocessor">.Troll</span>       <span class="number">07</span>/<span class="number">99</span>     <span class="number">4842</span>     Brown-<span class="number">3</span>     <span class="number">12</span>     <span class="number">26</span>     <span class="number">26</span>
L<span class="preprocessor">.Tansley</span>     <span class="number">05</span>/<span class="number">99</span>     <span class="number">4712</span>     Brown-<span class="number">2</span>     <span class="number">12</span>     <span class="number">30</span>     <span class="number">28</span>
</code></pre><h5 id="打印整个文件">打印整个文件</h5>
<pre><code>$ awk <span class="string">'{print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="打印第一和第四个域">打印第一和第四个域</h5>
<pre><code>$ awk <span class="string">'{print $1,$4}'</span> grade.txt
M.Tansley <span class="keyword">Green</span>
J.Lulu green
P.Bunny <span class="keyword">Yellow</span>
J.Troll <span class="keyword">Brown</span>-<span class="number">3</span>
L.Tansley <span class="keyword">Brown</span>-<span class="number">2</span>
</code></pre><h5 id="打印表头">打印表头</h5>
<pre><code>$ awk <span class="emphasis">'BEGIN {print "Name            Belt\n---------------------------"}
&gt; {print $1"\t"$4}'</span> grade.txt
<span class="header">Name            Belt
---------------------------</span>
M.Tansley       Green
J.Lulu          green
P.Bunny         Yellow
J.Troll         Brown-3
L.Tansley       Brown-2
</code></pre><p>正则表达式相关：为使一域号匹配正则表达式，使用符号‘～’后紧跟正则表达式，也可以用 i f语句。awk中if后面的条件用（）括起来。</p>
<h5 id="下面代码打印$4_包含_Brown_的行">下面代码打印$4 包含 Brown 的行</h5>
<pre><code>$ awk <span class="string">'$4~/Brown/ {print $0}'</span> grade.txt
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="非精确匹配">非精确匹配</h5>
<pre><code>$ awk <span class="string">'$3 ~/48/ {print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="精确匹配">精确匹配</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'$3=="48" {print $0}'</span> grade.txt
<span class="constant">P</span>.<span class="constant">Bunny</span>         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="constant">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
</code></pre><h5 id="不匹配_使用_‘!~’">不匹配 使用 ‘!~’</h5>
<pre><code>$ awk <span class="string">'$0 !~ /Brown/'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>

$ awk <span class="string">'$4 != "Brown-2" {print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="小于">小于</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'$6 &lt; $7 {print $0 "$1 Try better at the next comp"}'</span> grade.txt
<span class="constant">M</span>.<span class="constant">Tansley</span>       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="constant">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span><span class="variable">$1</span> <span class="constant">Try</span> better at the <span class="keyword">next</span> comp
<span class="constant">J</span>.<span class="constant">Lulu</span>          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span><span class="variable">$1</span> <span class="constant">Try</span> better at the <span class="keyword">next</span> comp
</code></pre><h5 id="设置大小写">设置大小写</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'/[Gg]reen/'</span> grade.txt
<span class="constant">M</span>.<span class="constant">Tansley</span>       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="constant">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
<span class="constant">J</span>.<span class="constant">Lulu</span>          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
</code></pre><h5 id="匹配第一个域的第三个字符是‘a’">匹配第一个域的第三个字符是‘a’</h5>
<pre><code>$ awk <span class="string">'$1 ~/^...a/'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="‘或’匹配，使用_‘|’_，需使用括号括起来">‘或’匹配，使用 ‘|’ ，需使用括号括起来</h5>
<pre><code>$ awk <span class="string">'$0 ~/(Yellow|Brown)/'</span> grade.txt
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h4 id="先来总结一下awk内置变量：">先来总结一下awk内置变量：</h4>
<pre><code>ARGC          命令行参数个数
ARGV          命令行参数排列
ENVIRON       支持队列中系统环境变量的使用
FILENAME      awk浏览文件名
FNR           浏览文件的记录数
FS            设置输入域分隔符，等价于命令行-F选项
NF            浏览记录的域个数
NR            已读的记录数
OFS           输出域分隔符
ORS           输出例句分隔符
RS            控制记录分隔符

$ awk <span class="string">'{print NF,NR,$0} END {print FILENAME}'</span> grade.txt
<span class="number">7</span> <span class="number">1</span> M.Tansley   <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
<span class="number">7</span> <span class="number">2</span> J.Lulu      <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
<span class="number">7</span> <span class="number">3</span> P.Bunny     <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
<span class="number">7</span> <span class="number">4</span> J.Troll     <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
<span class="number">7</span> <span class="number">5</span> L.Tansley   <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
grade.txt
</code></pre><h5 id="使用_-F_参数指定分隔符">使用 -F 参数指定分隔符</h5>
<pre><code>$ <span class="built_in">echo</span> <span class="variable">$PWD</span>
/home/root
$ <span class="built_in">echo</span> <span class="variable">$PWD</span> | awk -F/ <span class="string">'{print $NF"\t"NF}'</span>
root       <span class="number">3</span>
</code></pre><h5 id="设置变量名，将27_赋值给变量BASELINE">设置变量名，将27 赋值给变量BASELINE</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'BEGIN {BASELINE="27"} $6&lt;BASELINE {print $0}'</span> grade.txt
<span class="constant">J</span>.<span class="constant">Lulu</span>  <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
<span class="constant">J</span>.<span class="constant">Troll</span> <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="constant">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="修改数值域取值，注意‘{}’">修改数值域取值，注意‘{}’</h5>
<pre><code><span class="xml">$ awk '{if(</span><span class="variable">$1</span><span class="xml">=="M.Tansley") </span><span class="variable">$6</span><span class="xml">=</span><span class="variable">$6-1</span><span class="xml">; print </span><span class="variable">$1</span><span class="xml">,</span><span class="variable">$6</span><span class="xml">,</span><span class="variable">$7}</span><span class="xml">' grade.txt
M.Tansley </span><span class="number">39</span><span class="xml"> </span><span class="number">44</span><span class="xml">
J.Lulu </span><span class="number">24</span><span class="xml"> </span><span class="number">26</span><span class="xml">
P.Bunny </span><span class="number">35</span><span class="xml"> </span><span class="number">28</span><span class="xml">
J.Troll </span><span class="number">26</span><span class="xml"> </span><span class="number">26</span><span class="xml">
L.Tansley </span><span class="number">30</span><span class="xml"> </span><span class="number">28</span><span class="xml"></span>
</code></pre><h5 id="修改文本域取值">修改文本域取值</h5>
<pre><code>$ awk '{<span class="keyword">if</span>($<span class="number">1</span>==<span class="string">"J.Troll"</span>) $<span class="number">1</span>=<span class="string">"J.L.Troll"</span>; print $<span class="number">1</span>}' grade.txt
M.Tansley
J.Lulu
P.Bunny
J.L.Troll
L.Tansley
</code></pre><h5 id="创建新的输出域，这里新的输出域为_diff">创建新的输出域，这里新的输出域为 diff</h5>
<pre><code><span class="xml">$ awk 'BEGIN {print "Name \t Difference"} {if(</span><span class="variable">$6</span><span class="xml"><span class="tag">&lt;</span></span><span class="variable">$7</span><span class="xml">) {diff=</span><span class="variable">$7-</span><span class="xml"></span><span class="variable">$6</span><span class="xml">; print </span><span class="variable">$1</span><span class="xml">,diff}}' grade.txt
Name     Difference
M.Tansley </span><span class="number">4</span><span class="xml">
J.Lulu </span><span class="number">2</span><span class="xml"></span>
</code></pre><h5 id="统计某一个域的和，使用‘+=’_下面的例子统计第六个域的和">统计某一个域的和，使用‘+=’ 下面的例子统计第六个域的和</h5>
<pre><code>$ awk <span class="string">'(tot+=$6); END{print "Club student total points: " tot}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu  <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
Club student total points: <span class="number">155</span>
</code></pre><h5 id="注意区别，加‘{}’则不打印文件">注意区别，加‘{}’则不打印文件</h5>
<pre><code>$ awk '<span class="tuple">{(tot+=$<span class="number">6</span>)}</span>; <span class="variable">END</span><span class="tuple">{print <span class="string">"Club student total points: "</span> tot}</span>' grade.txt
<span class="variable">Club</span> student total points: <span class="number">155</span>

awk 内置字符串函数

<span class="function"><span class="title">gsub</span><span class="params">(r,s)</span>          在整个$0中用<span class="title">s</span>替代<span class="title">r</span>
<span class="title">gsub</span><span class="params">(r,s,t)</span>        在整个<span class="title">t</span>中使用<span class="title">s</span>替代<span class="title">r</span>
<span class="title">index</span><span class="params">(s,t)</span>         在返回<span class="title">s</span>中字符串<span class="title">t</span>的第一个位置
<span class="title">length</span><span class="params">(s)</span>          放回<span class="title">s</span>长度
<span class="title">match</span><span class="params">(s,r)</span>         测试<span class="title">s</span>是否包含匹配<span class="title">r</span>的字符串
<span class="title">split</span><span class="params">(s,a,fs)</span>      在<span class="title">fs</span>上将<span class="title">s</span>分成序列<span class="title">a</span>
<span class="title">sprint</span><span class="params">(fmt,exp)</span>    返回经<span class="title">fmt</span>格式化后的<span class="title">exp</span>
<span class="title">sub</span><span class="params">(r,s)</span>           用$0中最左边最长的子串代替<span class="title">s</span>
<span class="title">substr</span><span class="params">(s,p)</span>        返回字符串<span class="title">s</span>中从<span class="title">p</span>开始的后缀部分
<span class="title">substr</span><span class="params">(s,p,n)</span>      返回字符串<span class="title">s</span>中从<span class="title">p</span>开始长度为<span class="title">n</span>的后缀部分</span>
</code></pre><h5 id="替换，目标串使用正则表达式格式‘//’">替换，目标串使用正则表达式格式‘//’</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'gsub(/4842/,4899) {print $0}'</span> grade.txt
<span class="constant">J</span>.<span class="constant">Troll</span> <span class="number">07</span>/<span class="number">99</span>   <span class="number">4899</span>    <span class="constant">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="查询字符串第一次出现的位置，注意使用BEGIN，否则每一行都会打印，字符串使用引号括起来">查询字符串第一次出现的位置，注意使用BEGIN，否则每一行都会打印，字符串使用引号括起来</h5>
<pre><code>$ awk '<span class="operator"><span class="keyword">BEGIN</span>{print index(<span class="string">"Bunny"</span>,<span class="string">"ny"</span>)}<span class="string">' grade.txt
4</span></span>
</code></pre><h5 id="长度">长度</h5>
<pre><code>$ awk '$<span class="number">1</span>==<span class="string">"J.Troll"</span> {print <span class="property">length</span>($<span class="number">1</span>)<span class="string">" "</span>$<span class="number">1</span>}' grade.txt
<span class="number">7</span> J.Troll
</code></pre><h5 id="match_使用：_找不到返回0，找到返模式串在匹配串中的位置，">match 使用： 找不到返回0，找到返模式串在匹配串中的位置，</h5>
<pre><code>注：单独使用 加<span class="constant">BEGIN</span>
<span class="variable">$ </span>awk <span class="string">'BEGIN {print match("ANCD",/d/)}'</span>
<span class="number">0</span>
</code></pre><h5 id="以下两种模式都正确">以下两种模式都正确</h5>
<pre><code>$ awk '$<span class="number">1</span>==<span class="string">"J.Lulu"</span> {print <span class="keyword">match</span>($<span class="number">1</span>,<span class="string">"u"</span>)}' grade.txt
<span class="number">4</span>
$ awk '$<span class="number">1</span>==<span class="string">"J.Lulu"</span> {print <span class="keyword">match</span>($<span class="number">1</span>,/u/)}' grade.txt
<span class="number">4</span>
</code></pre><h5 id="split_返回字符串数组元素个数">split 返回字符串数组元素个数</h5>
<pre><code>$ awk '<span class="operator"><span class="keyword">BEGIN</span> {print split(<span class="string">"123#456#789"</span>,myarray,<span class="string">"#"</span>);</span>print myarray[1],myarray[2],myarray[3]}'
3
123 456 789
</code></pre><h5 id="sub，发现并替换模式的第一个位置">sub，发现并替换模式的第一个位置</h5>
<pre><code>$ awk <span class="string">'$1=="J.Troll" {sub(26,29,$0)} {print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu  <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">29</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="substr，返回字符串指定范围内的子串">substr，返回字符串指定范围内的子串</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'$1=="L.Tansley" {print substr($1,1,5)}'</span> grade.txt
<span class="constant">L</span>.<span class="constant">Tan</span>
</code></pre><h5 id="使用substr返回指定位置开始的后缀部分，范围只给了一个参数，注意和上一个例子相对比">使用substr返回指定位置开始的后缀部分，范围只给了一个参数，注意和上一个例子相对比</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'{print substr($1,3)}'</span> grade.txt
<span class="constant">Tansley</span>
<span class="constant">Lulu</span>
<span class="constant">Bunny</span>
<span class="constant">Troll</span>
<span class="constant">Tansley</span>
</code></pre><h5 id="从shell中向awk传递字符串，通过_echo_加管道的方式">从shell中向awk传递字符串，通过 echo 加管道的方式</h5>
<pre><code><span class="variable">$ </span>echo <span class="string">"Test"</span> | awk <span class="string">'{print length($0)}'</span>
<span class="number">4</span>
<span class="variable">$ </span><span class="constant">STR</span>=<span class="string">"mydoc.txt"</span>
<span class="variable">$ </span>echo <span class="variable">$STR</span> | awk <span class="string">'{print substr($STR,7)}'</span>
txt
</code></pre>]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="awk" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/awk/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awk的入门]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk/</id>
    <published>2014-05-19T12:08:42.000Z</published>
    <updated>2014-05-19T12:53:49.000Z</updated>
    <content type="html"><![CDATA[<p>实验全部来自《鸟哥的私房菜》</p>
<p>sed 常常用于一整个行的处理， awk 则比较倾向于一行当中分成数个『栏位』（或者称为一个域，也就是一列）来处理。</p>
<p>awk 通常运行的模式是这样的：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># awk '条件类型1{动作1} 条件类型2{动作2} ...' filename</span>
</code></pre><p>awk 后面接两个单引号并加上大括号 {} 来配置想要对数据进行的处理动作。 awk 可以处理后续接的文件，也可以读取来自前个命令的 standard output 。 但如前面说的， awk 主要是处理『每一行的栏位内的数据』，而默认的『栏位的分隔符号为 “空白键” 或 “[tab]键” 』！举例来说，我们用 last 可以将登陆者的数据取出来，结果如下所示：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># last -n 5 &lt;==仅取出前五行</span>
root     pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Tue</span> <span class="constant">Feb</span> <span class="number">10</span> <span class="number">11</span><span class="symbol">:</span><span class="number">21</span>   still logged <span class="keyword">in</span>
root     pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Tue</span> <span class="constant">Feb</span> <span class="number">10</span> <span class="number">00</span><span class="symbol">:</span><span class="number">46</span> - <span class="number">02</span><span class="symbol">:</span><span class="number">28</span>  (<span class="number">01</span><span class="symbol">:</span><span class="number">41</span>)
root     pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Mon</span> <span class="constant">Feb</span>  <span class="number">9</span> <span class="number">11</span><span class="symbol">:</span><span class="number">41</span> - <span class="number">18</span><span class="symbol">:</span><span class="number">30</span>  (<span class="number">06</span><span class="symbol">:</span><span class="number">48</span>)
dmtsai   pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Mon</span> <span class="constant">Feb</span>  <span class="number">9</span> <span class="number">11</span><span class="symbol">:</span><span class="number">41</span> - <span class="number">11</span><span class="symbol">:</span><span class="number">41</span>  (<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>)
root     tty1                   <span class="constant">Fri</span> <span class="constant">Sep</span>  <span class="number">5</span> <span class="number">14</span><span class="symbol">:</span>09 - <span class="number">14</span><span class="symbol">:</span><span class="number">10</span>  (<span class="number">00</span><span class="symbol">:</span><span class="number">01</span>)
</code></pre><p>若我想要取出帐号与登陆者的 IP ，且帐号与 IP 之间以 [tab] 隔开，则会变成这样：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># last -n 5 | awk '{print $1 "\t" $3}'</span>
root    <span class="number">192.168</span>.<span class="number">1.100</span>
root    <span class="number">192.168</span>.<span class="number">1.100</span>
root    <span class="number">192.168</span>.<span class="number">1.100</span>
dmtsai  <span class="number">192.168</span>.<span class="number">1.100</span>
root    <span class="constant">Fri</span>
</code></pre><p>上表是 awk 最常使用的动作！透过 print 的功能将栏位数据列出来！栏位的分隔则以空白键或 [tab] 按键来隔开。 因为不论哪一行我都要处理，因此，就不需要有 “条件类型” 的限制！我所想要的是第一栏以及第三栏， 但是，第五行的内容怪怪的～这是因为数据格式的问题啊！所以使用 awk 的时候，请先确认一下你的数据当中，如果是连续性的数据，请不要有空格或 [tab] 在内，否则，就会像这个例子这样，会发生误判喔！</p>
<p>另外，由上面这个例子你也会知道，在每一行的每个栏位都是有变量名称的，那就是 $1, $2… 等变量名称。以上面的例子来说， root 是 $1 ，因为他是第一栏嘛！至於 192.168.1.100 是第三栏， 所以他就是 $3 啦！后面以此类推～呵呵！还有个变量喔！那就是 $0 ，$0 代表『一整列数据』的意思～以上面的例子来说，第一行的 $0 代表的就是『root …. 』那一行啊！ 由此可知，刚刚上面五行当中，整个 awk 的处理流程是：</p>
<ul>
<li>读入第一行，并将第一行的数据填入 $0, $1, $2…. 等变量当中；</li>
<li>依据 “条件类型” 的限制，判断是否需要进行后面的 “动作”；</li>
<li>做完所有的动作与条件类型；</li>
<li>若还有后续的『行』的数据，则重复上面 1~3 的步骤，直到所有的数据都读完为止。</li>
<li>经过这样的步骤，你会晓得， awk 是『以行为一次处理的单位』， 而『以栏位为最小的处理单位』。好了，那么 awk 怎么知道我到底这个数据有几行？有几栏呢？这就需要 awk 的内建变量的帮忙啦～</li>
</ul>
<p><img src="/img/Shell/awk/awk_1.jpg" alt="awk 的内建变量"></p>
<p>我们继续以上面 last -n 5 的例子来做说明，如果我想要：列出每一行的帐号(就是 $1)；列出目前处理的行数(就是 awk 内的 NR 变量);并且说明，该行有多少栏位(就是 awk 内的 NF 变量)</p>
<pre><code>[root@localhost ~]# last -n <span class="number">5</span>| awk '<span class="tuple">{print $<span class="number">1</span> <span class="string">"\t lines: "</span> <span class="variable">NR</span> <span class="string">"\t columns: "</span> <span class="variable">NF</span>}</span>'
root     lines: <span class="number">1</span>        columns: <span class="number">10</span>
root     lines: <span class="number">2</span>        columns: <span class="number">10</span>
root     lines: <span class="number">3</span>        columns: <span class="number">10</span>
dmtsai   lines: <span class="number">4</span>        columns: <span class="number">10</span>
root     lines: <span class="number">5</span>        columns: <span class="number">9</span>
</code></pre><p>注意，awk 后续的所有动作是以单引号『 ‘ 』括住的，由於单引号与双引号都必须是成对的， 所以， awk 的格式内容如果想要以 print 列印时，记得非变量的文字部分，都需要使用双引号来定义出来喔！因为单引号已经是 awk 的命令固定用法了！</p>
<p>注意，在 awk 内的 NR, NF 等变量要用大写，且不需要有钱字号 $ 啦！这样可以了解 NR 与 NF 的差别了吧？注：$0 表示整行，$1 代表第一项</p>
<p>好了，我们实际来运用一下逻辑判断吧！举例来说，在 /etc/passwd 当中是以冒号 “:” 来作为栏位的分隔， 该文件中第一栏位为帐号，第三栏位则是 UID。那假设我要查阅，第三栏小於 10 以下的数据，并且仅列出帐号与第三栏， 那么可以这样做：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># cat /etc/passwd | \</span>
&gt; awk <span class="string">'{FS=":"} $3 &lt; 10 {print $1 "\t " $3}'</span>
<span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
bin      <span class="number">1</span>
daemon   <span class="number">2</span>
....(以下省略)....
</code></pre><p>有趣吧！不过，怎么第一行没有正确的显示出来呢？这是因为我们读入第一行的时候，那些变量 $1, $2… 默认还是以空白键为分隔的，所以虽然我们定义了 FS=”:” 了， 但是却仅能在第二行后才开始生效。那么怎么办呢？我们可以预先配置 awk 的变量啊！ 利用 BEGIN 这个关键字喔！这样做：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># cat /etc/passwd | \</span>
&gt; awk <span class="string">'BEGIN {FS=":"} $3 &lt; 10 {print $1 "\t " $3}'</span>
root     <span class="number">0</span>
bin      <span class="number">1</span>
daemon   <span class="number">2</span>
......(以下省略)......
</code></pre><p>很有趣吧！而除了 BEGIN 之外，我们还有 END 呢！另外，如果要用 awk 来进行『计算功能』呢？以底下的例子来看， 假设我有一个薪资数据表档名为 pay.txt ，内容是这样的：</p>
<pre><code>Name    <span class="number">1</span><span class="keyword">st</span>     <span class="number">2</span>nd     <span class="number">3</span>th
VBird   <span class="number">23000</span>   <span class="number">24000</span>   <span class="number">25000</span>
DMTsai  <span class="number">21000</span>   <span class="number">20000</span>   <span class="number">23000</span>
Bird2   <span class="number">43000</span>   <span class="number">42000</span>   <span class="number">41000</span>
</code></pre><p>如何帮我计算每个人的总额呢？而且我还想要格式化输出喔！我们可以这样考虑：</p>
<p>第一行只是说明，所以第一行不要进行加总 (NR==1 时处理)；第二行以后就会有加总的情况出现 (NR&gt;=2 以后处理)</p>
<pre><code><span class="xml">[root@localhost ~]# cat pay.txt | \
&gt; awk 'NR==</span><span class="number">1</span><span class="xml">{printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s\n",</span><span class="variable">$1</span><span class="xml">,</span><span class="variable">$2</span><span class="xml">,</span><span class="variable">$3</span><span class="xml">,</span><span class="variable">$4</span><span class="xml">,"Total" }
NR&gt;=</span><span class="number">2</span><span class="xml">{total = </span><span class="variable">$2</span><span class="xml"> + </span><span class="variable">$3</span><span class="xml"> + </span><span class="variable">$4</span><span class="xml">
printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10.2</span><span class="xml">f\n", </span><span class="variable">$1</span><span class="xml">, </span><span class="variable">$2</span><span class="xml">, </span><span class="variable">$3</span><span class="xml">, </span><span class="variable">$4</span><span class="xml">, total}'
      Name        </span><span class="number">1</span><span class="xml">st        </span><span class="number">2</span><span class="xml">nd        </span><span class="number">3</span><span class="xml">th      Total
     VBird      </span><span class="number">23000</span><span class="xml">      </span><span class="number">24000</span><span class="xml">      </span><span class="number">25000</span><span class="xml">   </span><span class="number">72000.00</span><span class="xml">
    DMTsai      </span><span class="number">21000</span><span class="xml">      </span><span class="number">20000</span><span class="xml">      </span><span class="number">23000</span><span class="xml">   </span><span class="number">64000.00</span><span class="xml">
     Bird2      </span><span class="number">43000</span><span class="xml">      </span><span class="number">42000</span><span class="xml">      </span><span class="number">41000</span><span class="xml">  </span><span class="number">126000.00</span><span class="xml"></span>
</code></pre><p>上面的例子有几个重要事项应该要先说明的：</p>
<p>awk 的命令间隔：所有 awk 的动作，亦即在 {} 内的动作，如果有需要多个命令辅助时，可利用分号『;』间隔， 或者直接以 [Enter] 按键来隔开每个命令，例如上面的范例中，鸟哥共按了三次 [enter] 喔！</p>
<pre><code>逻辑运算当中，如果是『等於』的情况，则务必使用两个等号『==』！
格式化输出时，在 <span class="built_in">printf</span> 的格式配置当中，务必加上 \n ，才能进行分行！
与 bash shell 的变量不同，在 awk 当中，变量可以直接使用，不需加上 $ 符号。
</code></pre><p>利用 awk 这个玩意儿，就可以帮我们处理很多日常工作了呢！真是好用的很～ 此外， awk 的输出格式当中，常常会以 printf 来辅助，所以， 最好你对 printf 也稍微熟悉一下比较好啦！另外， awk 的动作内 {} 也是支持 if (条件) 的喔！ 举例来说，上面的命令可以修订成为这样：</p>
<pre><code><span class="xml">[root@localhost ~]# cat pay.txt | \
&gt; awk '{if(NR==</span><span class="number">1</span><span class="xml">) printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s\n",</span><span class="variable">$1</span><span class="xml">,</span><span class="variable">$2</span><span class="xml">,</span><span class="variable">$3</span><span class="xml">,</span><span class="variable">$4</span><span class="xml">,"Total"}
NR&gt;=</span><span class="number">2</span><span class="xml">{total = </span><span class="variable">$2</span><span class="xml"> + </span><span class="variable">$3</span><span class="xml"> + </span><span class="variable">$4</span><span class="xml">
printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10.2</span><span class="xml">f\n", </span><span class="variable">$1</span><span class="xml">, </span><span class="variable">$2</span><span class="xml">, </span><span class="variable">$3</span><span class="xml">, </span><span class="variable">$4</span><span class="xml">, total}'</span>
</code></pre><p>你可以仔细的比对一下上面两个输入有啥不同～从中去了解两种语法吧！我个人是比较倾向於使用第一种语法， 因为会比较有统一性啊</p>
]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="awk" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/awk/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[grep与sed的使用]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/sed/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/sed/</id>
    <published>2014-05-19T11:12:57.000Z</published>
    <updated>2014-05-19T12:07:48.000Z</updated>
    <content type="html"><![CDATA[<p>实验脚本来自《鸟哥的私房菜》</p>
<p>贴一张正则表达式特殊符号的图<br><img src="/img/Shell/sed/sed_1.jpg" alt="正则表达式特殊符号 "></p>
<p>实验脚本regular_express.txt：</p>
<pre><code><span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
Football game <span class="keyword">is</span> <span class="keyword">not</span> use feet only.
this dress doesn't fit <span class="keyword">me</span>.
However, this dress <span class="keyword">is</span> <span class="keyword">about</span> $ <span class="number">3183</span> dollars.^M
GNU <span class="keyword">is</span> free air <span class="keyword">not</span> free beer.^M
Her hair <span class="keyword">is</span> very beauty.^M
I can't finish <span class="keyword">the</span> test.^M
Oh! The soup taste good.^M
motorcycle <span class="keyword">is</span> cheap than car.
This window <span class="keyword">is</span> clear.
<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
Oh!     My god!
The gd software <span class="keyword">is</span> a library <span class="keyword">for</span> drafting programs.^M
You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
I like dog.
google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
goooooogle yes!
go! go! Let's go.
<span class="comment"># I am VBird</span>
</code></pre><h4 id="grep的使用">grep的使用</h4>
<h6 id="搜寻特定字符串：">搜寻特定字符串：</h6>
<pre><code>[root@localhost ~]<span class="comment"># grep -n 'the' regular_express.txt</span>
<span class="number">8</span>:I can't finish <span class="keyword">the</span> test.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">15</span>:You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
<span class="number">16</span>:The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
</code></pre><h6 id="反向选择，可以使用_‘v’_选项：">反向选择，可以使用 ‘v’ 选项：</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -vn 'the' regular_express.txt</span>
则所有包含 ‘the’ 的行都不会显示
</code></pre><h6 id="如果不需要区分大小写，可以使用_‘i’_选项：">如果不需要区分大小写，可以使用 ‘i’ 选项：</h6>
<pre><code>[root@localhost ~]<span class="comment"># grep -in 'the' regular_express.txt</span>
<span class="number">8</span>:I can't finish <span class="keyword">the</span> test.
<span class="number">9</span>:Oh! The soup taste good.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">14</span>:The gd software <span class="keyword">is</span> a library <span class="keyword">for</span> drafting programs.
<span class="number">15</span>:You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
<span class="number">16</span>:The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
</code></pre><h6 id="利用中括号_[_]_来搜寻集合字节">利用中括号 [ ] 来搜寻集合字节</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 't[ae]st' regular_express.txt</span>
<span class="number">8</span><span class="symbol">:I</span> can<span class="string">'t finish the test.
9:Oh! The soup taste good.</span>
</code></pre><h6 id="如果需要匹配某一部分，但是不想匹配以某些开头的情况：（匹配oo，但不匹配以g开头的情况）">如果需要匹配某一部分，但是不想匹配以某些开头的情况：（匹配oo，但不匹配以g开头的情况）</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n '[^g]oo' regular_express.txt</span>
<span class="number">2</span><span class="symbol">:apple</span> is my favorite food.
<span class="number">3</span><span class="symbol">:Football</span> game is <span class="keyword">not</span> use feet only.
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n '[^a-z]oo' regular_express.txt</span>
<span class="number">3</span><span class="symbol">:Football</span> game is <span class="keyword">not</span> use feet only.
</code></pre><h6 id="行首与行尾字节_^_$">行首与行尾字节 ^ $</h6>
<pre><code>[root@localhost ~]<span class="preprocessor"># grep -n '^the' regular_express.txt</span>
<span class="number">12</span>:the symbol <span class="string">'*'</span> <span class="keyword">is</span> represented <span class="keyword">as</span> start.
</code></pre><h6 id="匹配以小写字母开头的行：">匹配以小写字母开头的行：</h6>
<pre><code>[root@localhost ~]<span class="comment"># grep -n '^[a-z]' regular_express.txt</span>
<span class="number">2</span>:apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
<span class="number">4</span>:this dress doesn't fit <span class="keyword">me</span>.
<span class="number">10</span>:motorcycle <span class="keyword">is</span> cheap than car.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span>:goooooogle yes!
<span class="number">20</span>:go! go! Let's go.
</code></pre><h6 id="匹配非大小写字母开头的行：">匹配非大小写字母开头的行：</h6>
<pre><code>[root@localhost ~]<span class="preprocessor"># grep -n '^[^a-zA-Z]' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">21</span>:<span class="preprocessor"># I am VBird</span>
</code></pre><p>注意：那个 ^ 符号，在字节集合符号(括号[ ])之内与之外是不同的！ 在 [ ] 内代表“反向选择”，在 [ ] 之外则代表定位在行首的意义！</p>
<h6 id="匹配空行：">匹配空行：</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n '^$' regular_express.txt</span>
<span class="number">22</span><span class="symbol">:</span>
</code></pre><h6 id="任意一个字节_-_与重复字节_*">任意一个字节 . 与重复字节 *</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 'goo*g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><p>在正则表达式中‘.’ 0个或1个任意字符，‘*’代表任意多个任意字符</p>
<h6 id="限定连续_RE_字符范围_{}">限定连续 RE 字符范围 {}</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 'go\{2,5\}g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
</code></pre><p>上面的式子匹配了2个‘o’，表达式的意思是匹配2-5个‘o’<br>若第二个参数为空，则匹配 第一个参数到无穷多个的情况：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 'go\{2,\}g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><h4 id="基础的正规表示法特殊字符">基础的正规表示法特殊字符</h4>
<p><img src="/img/Shell/sed/sed_2.jpg" alt="正则表达式特殊字符 "><br><img src="/img/Shell/sed/sed_3.jpg" alt="正则表达式特殊字符 "></p>
<h4 id="sed的使用">sed的使用</h4>
<p>[root@localhost ~]# sed [-nefr] [动作]选项与参数：</p>
<pre><code>-<span class="ruby">n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 <span class="constant">STDIN</span> 
</span>     的数据一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过
     sed 特殊处理的那一行(或者动作)才会被列出来。
-<span class="ruby">e ：直接在命令列模式上进行 sed 的动作编辑；
</span>-<span class="ruby">f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 
</span>     sed 动作；
-<span class="ruby">r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
</span>-<span class="ruby">i ：直接修改读取的文件内容，而不是由萤幕输出。</span>
</code></pre><p>动作说明： [n1[,n2]]function</p>
<pre><code>n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作
         是需要在 <span class="number">10</span> 到 <span class="number">20</span> 行之间进行的，则『 <span class="number">10</span>,<span class="number">20</span>[动作行为] 』
<span class="function"><span class="keyword">function</span> ：</span>
<span class="operator">a</span> ：新增， <span class="operator">a</span> 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
d ：删除，因为是删除啊，所以 d 后面通常不接任何东西；
i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配
</code></pre><h6 id="例一：将_/etc/passwd_的内容列出并且列印行号，同时，请将第_2~5_行删除！">例一：将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed '2,5d'</span>
<span class="number">1</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
<span class="number">6</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span>
<span class="number">7</span> <span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span>
.....(后面省略).....
</code></pre><h6 id="例二：承上题，在第二行后(亦即是加在第三行)加上『drink_tea?』字样！">例二：承上题，在第二行后(亦即是加在第三行)加上『drink tea?』字样！</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed '2a drink tea'</span>
<span class="number">1</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
<span class="number">2</span> <span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span>
drink tea
<span class="number">3</span> <span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:daemon</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/nologin</span>
.....(后面省略).....
</code></pre><h6 id="例三：我想将第2-5行的内容取代成为“No_2-5_number”呢？">例三：我想将第2-5行的内容取代成为“No 2-5 number”呢？</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed '2,5c No 2-5 number'</span>
<span class="number">1</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
<span class="constant">No</span> <span class="number">2</span>-<span class="number">5</span> number
<span class="number">6</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span>
.....(后面省略).....
</code></pre><h6 id="例四：仅列出_/etc/passwd_文件内的第_5-7_行">例四：仅列出 /etc/passwd 文件内的第 5-7 行</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed -n '5,7p'</span>
<span class="number">5</span> <span class="symbol">lp:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:lp</span><span class="symbol">:/var/spool/lpd</span><span class="symbol">:/sbin/nologin</span>
<span class="number">6</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span>
<span class="number">7</span> <span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span>
</code></pre><h5 id="部分数据的搜寻并取代的功能">部分数据的搜寻并取代的功能</h5>
<p>基本使用方式：sed ‘s/要被取代的字串/新的字串/g’</p>
<h6 id="步骤一：先观察原始信息，利用_/sbin/ifconfig_查询_IP_为何？">步骤一：先观察原始信息，利用 /sbin/ifconfig 查询 IP 为何？</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0</span>
eth<span class="number">0</span> <span class="constant">Link</span> <span class="symbol">encap:</span><span class="constant">Ethernet</span> <span class="constant">HWaddr</span> <span class="number">00</span><span class="symbol">:</span><span class="number">90</span><span class="symbol">:CC</span><span class="symbol">:A6</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:</span><span class="number">84</span>
inet <span class="symbol">addr:</span><span class="number">192.168</span>.<span class="number">1.100</span> <span class="constant">Bcast</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">1.255</span> <span class="constant">Mask</span><span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span>
inet6 <span class="symbol">addr:</span> <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">290</span><span class="symbol">:ccff</span><span class="symbol">:fea6</span><span class="symbol">:</span><span class="number">3484</span>/<span class="number">64</span> <span class="constant">Scope</span><span class="symbol">:Link</span>
<span class="constant">UP</span> <span class="constant">BROADCAST</span> <span class="constant">RUNNING</span> <span class="constant">MULTICAST</span> <span class="constant">MTU</span><span class="symbol">:</span><span class="number">1500</span> <span class="constant">Metric</span><span class="symbol">:</span><span class="number">1</span>
.....(以下省略).....
</code></pre><p>我们的重点在第二行，也就是 192.168.1.100 那一行而已！先利用关键字捉出那一行！</p>
<h6 id="步骤二：利用关键字配合_grep_撷取出关键的一行数据">步骤二：利用关键字配合 grep 撷取出关键的一行数据</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0 | grep 'inet addr'</span>
inet <span class="symbol">addr:</span><span class="number">192.168</span>.<span class="number">1.100</span> <span class="constant">Bcast</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">1.255</span> <span class="constant">Mask</span><span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span>
</code></pre><p>当场仅剩下一行！接下来，我们要将开始到 addr: 通通删除，删除关键在於『 ^.*inet addr: 』啦！正规表示法出现！<br>，</p>
<h6 id="步骤三：将_IP_前面的部分予以删除">步骤三：将 IP 前面的部分予以删除</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0 | grep 'inet addr' | \</span>
&gt; sed <span class="string">'s/^.*addr://g'</span>
<span class="number">192.168</span>.<span class="number">1.100</span> <span class="constant">Bcast</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">1.255</span> <span class="constant">Mask</span><span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span>
</code></pre><p> 仔细与上个步骤比较一下，前面的部分不见了！接下来则是删除后续的部分，此时所需的正规表示法为：『 Bcast.*$ 』就是啦！</p>
<h6 id="步骤四：将_IP_后面的部分予以删除">步骤四：将 IP 后面的部分予以删除</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0 | grep 'inet addr' | \</span>
&gt; sed <span class="string">'s/^.*addr://g'</span> | sed <span class="string">'s/Bcast.*$//g'</span>
<span class="number">192.168</span>.<span class="number">1.100</span>
</code></pre><h6 id="例六：利用_sed_将_regular_express-txt_内每一行结尾若为_-_则换成_!">例六：利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># sed -i 's/\.$/\!/g' regular_express.txt  </span>
</code></pre><p>上头的 -i 选项可以让你的 sed 直接去修改后面接的文件内容而不是由屏幕输出！注意使用的时候需要对 ‘.’ 进行转义，而且需要指明是对结尾为‘.’ 的进行替换，使用 $ 符号<br>这里就顺便来实践一下，我有一个dos环境下创建的文件，当复制到 unix 环境下之后，结尾就会出现难看的“^M” 符号，如果要把这个符号去掉使用sed工具可以轻松搞定：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># sed -i 's/\^M$//g' regular_express.txt</span>
</code></pre>]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="sed" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/sed/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vi编译器的使用]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/vi/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/vi/</id>
    <published>2014-05-19T10:55:08.000Z</published>
    <updated>2014-05-19T11:12:15.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Vi编译器的使用">Vi编译器的使用</h4>
<p>工欲善其事，必先利其器。Linux下vi的强大之处不解释。</p>
<p>Vi 有三种工作模式，刚进vi是一般模式，通过i|o|h可以进入输入模式，ctrl+c又可以进入一般模式，“：命令”可以完成命令的操作</p>
<p>命令如下：<br><img src="/img/Shell/vi/vi_1.png" alt="图1 "><br><img src="/img/Shell/vi/vi_2.png" alt="图2 "><br><img src="/img/Shell/vi/vi_3.png" alt="图3 "><br><img src="/img/Shell/vi/vi_4.png" alt="图4 "></p>
<h4 id="Vi的配置文件">Vi的配置文件</h4>
<p>编写~./vimrc文件<br><img src="/img/Shell/vi/vi_5.png" alt="图5 "></p>
]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[12-15周学习计划]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/14/%E6%9D%82%E8%B0%88/plan/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/14/杂谈/plan/</id>
    <published>2014-05-14T11:55:11.000Z</published>
    <updated>2014-05-18T13:04:34.000Z</updated>
    <content type="html"><![CDATA[<p>离大三结束还剩50天吧，最近思来想后，这几周干什么！？最终还是决定把基础知识抓一抓，准备写几个专题，也是对自己的查缺补漏，使自己的基本功更扎实。</p>
<ul>
<li>设计模式  阅读《大话设计模式》 对某些设计模式进行java和python的改写</li>
<li>Shell基础与实战  参考《Shell脚本学习指南》</li>
<li>Python学习总结  写写案例，总结常用模块</li>
<li>基本的数据结构与算法     用C或者JAVA实现 </li>
<li>Oracle     理论与实验并行，原先在OneNote上的笔记 整理整理</li>
</ul>
<p>学习任务很多，给自己一个鼓励，努力坚持！</p>
]]></content>
    
    
      <category term="学习计划" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="杂谈" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sqoop的安装及数据在Mysql与HDFS之间的导入导出]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/sqoop/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/sqoop/</id>
    <published>2014-05-12T07:16:57.000Z</published>
    <updated>2014-05-12T07:19:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="解压Sqoop并cp相应的hadoop以及mysql的jar包">解压Sqoop并cp相应的hadoop以及mysql的jar包</h4>
<pre><code>[grid@hadoop01 ~]$ tar -xzvf sqoop-<span class="number">1.4</span><span class="number">.4</span><span class="preprocessor">.bin</span>__hadoop-<span class="number">1.0</span><span class="number">.0</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span> 

[grid@hadoop01 hadoop-<span class="number">1.2</span><span class="number">.1</span>]$ <span class="keyword">cp</span> hadoop-core-<span class="number">1.2</span><span class="number">.1</span><span class="preprocessor">.jar</span> ~/sqoop-<span class="number">1.4</span><span class="number">.4</span><span class="preprocessor">.bin</span>__hadoop-<span class="number">1.0</span><span class="number">.0</span>/lib/

[grid@hadoop01 lib]$ <span class="keyword">cp</span> ~/mysql-connector-java-<span class="number">5.1</span><span class="number">.25</span>-bin<span class="preprocessor">.jar</span>   ~/sqoop-<span class="number">1.4</span><span class="number">.4</span><span class="preprocessor">.bin</span>__hadoop-<span class="number">1.0</span><span class="number">.0</span>/lib/
[grid@hadoop01 ~]$ <span class="keyword">cp</span> mysql-connector-java-<span class="number">5.1</span><span class="number">.25</span>-bin<span class="preprocessor">.jar</span>  hadoop-<span class="number">1.2</span><span class="number">.1</span>/lib
</code></pre><h4 id="编辑环境变量">编辑环境变量</h4>
<pre><code>export SQOOP_HOME=/home/<span class="keyword">grid</span>/sqoop-<span class="number">1.4</span><span class="number">.4</span>.bin__hadoop-<span class="number">1.0</span><span class="number">.0</span>
export PATH=<span class="variable">$PATH</span>:<span class="variable">$SQOOP_HOME</span>/bin:<span class="variable">$SQOOP_HOME</span>
[root<span class="variable">@hadoop01</span> ~]# <span class="keyword">source</span> /etc/profile

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> conf]# cp sqoop-<span class="keyword">env</span>-template.sh  sqoop-<span class="keyword">env</span>.sh

#Set path to where bin/hadoop is available
 export HADOOP_COMMON_HOME=/home/<span class="keyword">grid</span>/hadoop-<span class="number">1.2</span><span class="number">.1</span>

#Set path to where hadoop-<span class="variable">*-</span>core.jar is available
 export HADOOP_MAPRED_HOME=/home/<span class="keyword">grid</span>/hadoop-<span class="number">1.2</span><span class="number">.1</span>
</code></pre><h4 id="建立测试表">建立测试表</h4>
<pre><code><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> sqoop;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'sqoop'</span>@<span class="string">'192.168.255.151'</span> identified <span class="keyword">by</span> <span class="string">'sqoop'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>
flush privileges;

use sqoop;
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> tb1 <span class="keyword">as</span> <span class="keyword">select</span> table_schema,table_name,table_type <span class="keyword">from</span> information_schema.TABLES;</span>
<span class="operator"><span class="keyword">show</span> tables;</span>
</code></pre><h4 id="用Sqoop把该表里的数据拷贝到HDFS上">用Sqoop把该表里的数据拷贝到HDFS上</h4>
<h5 id="测试连接">测试连接</h5>
<pre><code>sqoop <span class="type">list</span>-databases <span class="comment">--connect jdbc:mysql://192.168.255.151:3306/ --username sqoop --password sqoop</span>
sqoop <span class="type">list</span>-tables <span class="comment">--connect jdbc:mysql://192.168.255.151:3306/sqoop --username sqoop --password sqoop</span>

[grid@hadoop01 ~]$ sqoop <span class="type">list</span>-databases <span class="comment">--connect jdbc:mysql://192.168.255.151:3306/ --username sqoop password sqoop</span>
Warning: /usr/lib/hcatalog <span class="keyword">does</span> <span class="keyword">not</span> exist! HCatalog jobs will fail.
Please <span class="keyword">set</span> $HCAT_HOME <span class="keyword">to</span> <span class="keyword">the</span> root <span class="keyword">of</span> your HCatalog installation.
Warning: $HADOOP_HOME <span class="keyword">is</span> deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">43</span>:<span class="number">12</span> WARN tool.BaseSqoopTool: Setting your password <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> command-line <span class="keyword">is</span> insecure. Consider using -P instead.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">43</span>:<span class="number">12</span> INFO manager.MySQLManager: Preparing <span class="keyword">to</span> use a MySQL streaming resultset.
information_schema
hive
mysql
performance_schema
sqoop
test
</code></pre><h4 id="将数据拷贝到HDFS上">将数据拷贝到HDFS上</h4>
<pre><code>sqoop import --connect jdbc:mysql:<span class="comment">//192.168.255.151:3306/sqoop --username sqoop --password sqoop --table tb1 -m 1</span>
这个时候报错了
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">52</span> INFO mapred.JobClient: Task Id : attempt_201405101008_0008_m_000000_0, Status : FAILED
java.lang.RuntimeException: java.lang.RuntimeException: java.sql.SQLException: Access denied <span class="keyword">for</span> user <span class="string">'sqoop'</span>@<span class="string">'hadoop03.myhadoop.com'</span> (<span class="keyword">using</span> password: YES)
        at org.apache.sqoop.mapreduce.db.DBInputFormat.setConf(DBInputFormat.java:<span class="number">167</span>)
        at org.apache.hadoop.util.ReflectionUtils.setConf(ReflectionUtils.java:<span class="number">62</span>)
        at org.apache.hadoop.util.ReflectionUtils.newInstance(ReflectionUtils.java:<span class="number">117</span>)
        at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:<span class="number">722</span>)
        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:<span class="number">364</span>)
        at org.apache.hadoop.mapred.Child$<span class="number">4</span>.run(Child.java:<span class="number">255</span>)
        at java.security.AccessController.doPrivileged(Native <span class="function"><span class="keyword">Method</span>)</span>
</code></pre><h5 id="解决办法，其他节点也要设置权限">解决办法，其他节点也要设置权限</h5>
<pre><code><span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'sqoop'</span>@<span class="string">'192.168.255.152'</span> identified <span class="keyword">by</span> <span class="string">'sqoop'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'sqoop'</span>@<span class="string">'192.168.255.153'</span> identified <span class="keyword">by</span> <span class="string">'sqoop'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>
flush privileges;
<span class="operator"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CONCAT(<span class="string">'User: '''</span>,<span class="keyword">user</span>,<span class="string">'''@'''</span>,host,<span class="string">''';'</span>) <span class="keyword">AS</span> query <span class="keyword">FROM</span> mysql.<span class="keyword">user</span>;</span>
</code></pre><h4 id="重新导入">重新导入</h4>
<pre><code>[grid@hadoop01 ~]$ sqoop import --connect jdbc:mysql://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">3306</span>/sqoop --username sqoop --password sqoop --table tb1 -m <span class="number">1</span>
<span class="label">Warning:</span> /usr/lib/hcatalog does not exist! HCatalog jobs will fail.
Please <span class="keyword">set</span> $HCAT_HOME to the root of your HCatalog installation.
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">30</span> WARN tool<span class="preprocessor">.BaseSqoopTool</span>: Setting your password on the command-line is insecure. Consider using -P instead.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">30</span> INFO manager<span class="preprocessor">.MySQLManager</span>: Preparing to use a MySQL streaming resultset.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">30</span> INFO tool<span class="preprocessor">.CodeGenTool</span>: Beginning code generation
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">31</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">31</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">31</span> INFO orm<span class="preprocessor">.CompilationManager</span>: HADOOP_MAPRED_HOME is /home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>
<span class="label">Note:</span> /tmp/sqoop-grid/compile/<span class="number">4</span>a0739c3b0538ec549c03cafb8dace32/tb1<span class="preprocessor">.java</span> uses <span class="keyword">or</span> overrides a deprecated API.
<span class="label">Note:</span> Recompile with -Xlint:deprecation for details.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> INFO orm<span class="preprocessor">.CompilationManager</span>: Writing jar file: /tmp/sqoop-grid/compile/<span class="number">4</span>a0739c3b0538ec549c03cafb8dace32/tb1<span class="preprocessor">.jar</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> WARN manager<span class="preprocessor">.MySQLManager</span>: It looks like you are importing from mysql.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> WARN manager<span class="preprocessor">.MySQLManager</span>: This transfer can be faster! Use the --direct
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> WARN manager<span class="preprocessor">.MySQLManager</span>: option to exercise a MySQL-specific fast path.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> INFO manager<span class="preprocessor">.MySQLManager</span>: Setting zero DATETIME behavior to convertToNull (mysql)
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> INFO mapreduce<span class="preprocessor">.ImportJobBase</span>: Beginning import of tb1
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">43</span> INFO mapred<span class="preprocessor">.JobClient</span>: Running job: job_201405101008_0009
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">44</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">0</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">59</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">100</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>: Job complete: job_201405101008_0009
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>: Counters: <span class="number">18</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Job Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_MAPS=<span class="number">16169</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all reduces waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all maps waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Launched map tasks=<span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_REDUCES=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Output Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Written=<span class="number">4249</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   FileSystemCounters
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     HDFS_BYTES_READ=<span class="number">87</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     FILE_BYTES_WRITTEN=<span class="number">70026</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     HDFS_BYTES_WRITTEN=<span class="number">4249</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Input Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Read=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Map-Reduce Framework
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map input records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Physical memory (bytes) snapshot=<span class="number">73797632</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Spilled Records=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     CPU time spent (ms)=<span class="number">1540</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total committed heap usage (bytes)=<span class="number">15728640</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Virtual memory (bytes) snapshot=<span class="number">1564905472</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map output records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SPLIT_RAW_BYTES=<span class="number">87</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapreduce<span class="preprocessor">.ImportJobBase</span>: Transferred <span class="number">4.1494</span> KB <span class="keyword">in</span> <span class="number">24.7602</span> seconds (<span class="number">171.6062</span> bytes/<span class="keyword">sec</span>)
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapreduce<span class="preprocessor">.ImportJobBase</span>: Retrieved <span class="number">112</span> records.
</code></pre><h4 id="查看导入的文件">查看导入的文件</h4>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> bin]$ hadoop fs -<span class="keyword">ls</span> tb1
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">3</span> items
-rw-r--r--   <span class="number">2</span> <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span> /user/<span class="keyword">grid</span>/tb1/_SUCCESS
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span> /user/<span class="keyword">grid</span>/tb1/_logs
-rw-r--r--   <span class="number">2</span> <span class="keyword">grid</span> supergroup       <span class="number">4249</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span> /user/<span class="keyword">grid</span>/tb1/part-m-<span class="number">00000</span>

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> bin]$ hadoop fs -cat tb1/part-m-<span class="number">00000</span>
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

information_schema,CHARACTER_SETS,SYSTEM VIEW
information_schema,COLLATIONS,SYSTEM VIEW
information_schema,COLLATION_CHARACTER_SET_APPLICABILITY,SYSTEM VIEW
information_schema,COLUMNS,SYSTEM VIEW
information_schema,COLUMN_PRIVILEGES,SYSTEM VIEW
information_schema,ENGINES,SYSTEM VIEW
information_schema,EVENTS,SYSTEM VIEW
information_schema,FILES,SYSTEM VIEW
information_schema,GLOBAL_STATUS,SYSTEM VIEW
information_schema,GLOBAL_VARIABLES,SYSTEM VIEW
information_schema,KEY_COLUMN_USAGE,SYSTEM VIEW
information_schema,PARAMETERS,SYSTEM VIEW
information_schema,PARTITIONS,SYSTEM VIEW
information_schema,PLUGINS,SYSTEM VIEW
information_schema,PROCESSLIST,SYSTEM VIEW
information_schema,PROFILING,SYSTEM VIEW
information_schema,REFERENTIAL_CONSTRAINTS,SYSTEM VIEW
information_schema,ROUTINES,SYSTEM VIEW
information_schema,SCHEMATA,SYSTEM VIEW
information_schema,SCHEMA_PRIVILEGES,SYSTEM VIEW
information_schema,SESSION_STATUS,SYSTEM VIEW
information_schema,SESSION_VARIABLES,SYSTEM VIEW
information_schema,STATISTICS,SYSTEM VIEW
information_schema,TABLES,SYSTEM VIEW
information_schema,TABLESPACES,SYSTEM VIEW
information_schema,TABLE_CONSTRAINTS,SYSTEM VIEW
information_schema,TABLE_PRIVILEGES,SYSTEM VIEW
information_schema,TRIGGERS,SYSTEM VIEW

OK
</code></pre><h4 id="把HDFS的数据导回去mysql">把HDFS的数据导回去mysql</h4>
<pre><code>mysql&gt; use sqoop
Database changed
mysql&gt; show tables<span class="comment">;</span>
+-----------------+
| Tables_in_sqoop |
+-----------------+
| tb1             |
+-----------------+
<span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> <span class="keyword">sec</span>)

mysql&gt; truncate tb1<span class="comment">;</span>
Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> <span class="keyword">sec</span>)

sqoop export  --connect jdbc:mysql://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">3306</span>/sqoop --username sqoop --password sqoop --table tb1 --export-dir hdfs://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">9000</span>/user/grid/tb1/

[grid@hadoop01 ~]$ sqoop export  --connect jdbc:mysql://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">3306</span>/sqoop --username sqoop --password sqoop --table tb1 --export-dir hdfs://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">9000</span>/user/grid/tb1/
<span class="label">Warning:</span> /usr/lib/hcatalog does not exist! HCatalog jobs will fail.
Please <span class="keyword">set</span> $HCAT_HOME to the root of your HCatalog installation.
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">19</span> WARN tool<span class="preprocessor">.BaseSqoopTool</span>: Setting your password on the command-line is insecure. Consider using -P instead.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">20</span> INFO manager<span class="preprocessor">.MySQLManager</span>: Preparing to use a MySQL streaming resultset.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">20</span> INFO tool<span class="preprocessor">.CodeGenTool</span>: Beginning code generation
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">21</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">21</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">21</span> INFO orm<span class="preprocessor">.CompilationManager</span>: HADOOP_MAPRED_HOME is /home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>
<span class="label">Note:</span> /tmp/sqoop-grid/compile/<span class="number">605</span>c350fea684271f2c51e2f616406c7/tb1<span class="preprocessor">.java</span> uses <span class="keyword">or</span> overrides a deprecated API.
<span class="label">Note:</span> Recompile with -Xlint:deprecation for details.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">27</span> INFO orm<span class="preprocessor">.CompilationManager</span>: Writing jar file: /tmp/sqoop-grid/compile/<span class="number">605</span>c350fea684271f2c51e2f616406c7/tb1<span class="preprocessor">.jar</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">27</span> INFO mapreduce<span class="preprocessor">.ExportJobBase</span>: Beginning export of tb1
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> INFO input<span class="preprocessor">.FileInputFormat</span>: Total input paths to process : <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> INFO input<span class="preprocessor">.FileInputFormat</span>: Total input paths to process : <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> INFO util<span class="preprocessor">.NativeCodeLoader</span>: Loaded the native-hadoop library
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> WARN snappy<span class="preprocessor">.LoadSnappy</span>: Snappy native library not loaded
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">33</span> INFO mapred<span class="preprocessor">.JobClient</span>: Running job: job_201405101008_0010
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">34</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">0</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">58</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">50</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">00</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">100</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>: Job complete: job_201405101008_0010
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>: Counters: <span class="number">19</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Job Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_MAPS=<span class="number">71976</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all reduces waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all maps waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Rack-local map tasks=<span class="number">2</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Launched map tasks=<span class="number">4</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Data-local map tasks=<span class="number">2</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_REDUCES=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Output Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Written=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   FileSystemCounters
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     HDFS_BYTES_READ=<span class="number">11629</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     FILE_BYTES_WRITTEN=<span class="number">279312</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Input Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Read=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Map-Reduce Framework
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map input records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Physical memory (bytes) snapshot=<span class="number">301490176</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Spilled Records=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     CPU time spent (ms)=<span class="number">5450</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total committed heap usage (bytes)=<span class="number">62914560</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Virtual memory (bytes) snapshot=<span class="number">6251151360</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map output records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SPLIT_RAW_BYTES=<span class="number">611</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapreduce<span class="preprocessor">.ExportJobBase</span>: Transferred <span class="number">11.3564</span> KB <span class="keyword">in</span> <span class="number">34.5615</span> seconds (<span class="number">336.4727</span> bytes/<span class="keyword">sec</span>)
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapreduce<span class="preprocessor">.ExportJobBase</span>: Exported <span class="number">112</span> records.
</code></pre><h4 id="验证">验证</h4>
<pre><code>mysql&gt; use sqoop;
Database changed
<span class="header">mysql&gt; show tables;
+-----------------+</span>
<span class="header">| Tables_in_sqoop |
+-----------------+</span>
<span class="header">| tb1             |
+-----------------+</span>
1 row in set (0.00 sec)
</code></pre>]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="Sqoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Sqoop/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HBase shell的使用]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/hbase_shell/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/hbase_shell/</id>
    <published>2014-05-12T07:16:49.000Z</published>
    <updated>2014-05-12T07:18:28.000Z</updated>
    <content type="html"><![CDATA[<h4 id="HBase_Shell的一些基本操作命令">HBase Shell的一些基本操作命令</h4>
<p><table><tr><td>名称</td><td>命令表达式</td></tr><tr><td>创建表</td><td>create ‘表名称’, ‘列名称1’,’列名称2’,’列名称N’</td></tr><tr><td>添加记录</td><td>put ‘表名称’, ‘行名称’, ‘列名称:’, ‘值</td></tr><tr><td>查看记录</td><td>get ‘表名称’, ‘行名称’</td></tr><tr><td>查看表中的记录总数</td><td>count  ‘表名称’</td></tr></p>
<p><tr><td>删除记录</td><td>delete  ‘表名’ ,’行名称’ , ‘列名称’</td></tr><tr><td>删除一张表</td><td>先要屏蔽该表，才能对该表进行删除，第一步 disable ‘表名称’ 第二步  drop ‘表名称’</td></tr><tr><td>查看所有记录</td><td>scan “表名称”</td></tr><tr><td>查看某个表某个列中所有数据</td><td>scan “表名称” , [‘列名称:’]</td></tr><tr><td>更新记录</td><td>就是重写一遍进行覆盖</td></tr></table></p>
<h4 id="HBase_例子说明">HBase 例子说明</h4>
<p>我们用一个学生成绩表作为例子,对HBase的基本操作和基本概念进行讲解:</p>
<pre><code>下面是学生的成绩表:
<span class="tag">name</span>     <span class="tag">grad</span>    <span class="tag">course</span><span class="pseudo">:math</span>    <span class="tag">course</span><span class="pseudo">:art</span>
<span class="tag">Tom</span>      1       87             97

<span class="tag">Jerry</span>    2       100            80
</code></pre><p>这里grad对于表来说是一个列,course对于表来说是一个列族,这个列族由两个列组成:math和art,当然我们可以根据我们的需要在course中建立更多的列族,如computer,physics等相应的列添加入course列族.</p>
<p>有了上面的想法和需求,我们就可以在HBase中建立相应的数据表啦!</p>
<h5 id="建立一个表格_scores_具有两个列族grade和courese">建立一个表格 scores 具有两个列族grade和courese</h5>
<pre><code>hbase(main):<span class="number">002</span>:<span class="number">0</span>&gt; <span class="built_in">create</span> <span class="string">'scores'</span>, <span class="string">'grade'</span>, <span class="string">'course'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">4.1610</span> <span class="built_in">seconds</span>
</code></pre><h5 id="查看当先HBase中具有哪些表">查看当先HBase中具有哪些表</h5>
<pre><code><span class="tag">hbase</span>(<span class="tag">main</span>)<span class="pseudo">:003</span><span class="pseudo">:0</span>&gt; <span class="tag">list</span>

<span class="tag">scores</span>

1 <span class="tag">row</span>(<span class="tag">s</span>) <span class="tag">in</span> 0<span class="class">.0210</span> <span class="tag">seconds</span>
</code></pre><h5 id="查看表的构造">查看表的构造</h5>
<pre><code>hbase(main):<span class="number">004</span>:<span class="number">0</span>&gt; describe <span class="string">'scores'</span>

{NAME<span class="function"> =&gt;</span> <span class="string">'scores'</span>, IS_ROOT<span class="function"> =&gt;</span> <span class="string">'false'</span>, IS_META<span class="function"> =&gt;</span> <span class="string">'false'</span>, 
FAMILIES<span class="function"> =&gt;</span> [{NAME<span class="function"> =&gt;</span> <span class="string">'course'</span>, BLOOMFILTER<span class="function"> =&gt;</span> <span class="string">'false'</span>, IN_MEMORY<span class="function"> =&gt;</span> <span class="string">'false'</span>,LENGTH<span class="function"> =&gt;</span> <span class="string">'2147483647'</span>, BLOCKCACHE<span class="function"> =&gt;</span> <span class="string">'false'</span>, VERSIONS<span class="function"> =&gt;</span> <span class="string">'3'</span>, TTL<span class="function"> =&gt;</span> <span class="string">'-1'</span>, COMPRESSION<span class="function"> =&gt;</span> <span class="string">'NONE'</span>}, 
{NAME<span class="function"> =&gt;</span> <span class="string">'grade'</span>, BLOOMFILTER<span class="function"> =&gt;</span> <span class="string">'false'</span>, IN_MEMORY<span class="function"> =&gt;</span> <span class="string">'false'</span>, LENGTH<span class="function"> =&gt;</span> <span class="string">'2147483647'</span>,BLOCKCACHE<span class="function"> =&gt;</span> <span class="string">'false'</span>, VERSIONS<span class="function"> =&gt;</span> <span class="string">'3'</span>, TTL<span class="function"> =&gt;</span> <span class="string">'-1'</span>, COMPRESSION<span class="function"> =&gt;</span> <span class="string">'NONE'</span>}]}

<span class="number">1</span> row(s) <span class="keyword">in</span> <span class="number">0.0130</span> seconds
</code></pre><h5 id="加入一行数据,行名称为_Tom_列族grade的列名为””_值位1">加入一行数据,行名称为 Tom 列族grade的列名为”” 值位1</h5>
<pre><code>hbase(main):<span class="number">005</span>:<span class="number">0</span>&gt; <span class="built_in">put</span> <span class="string">'scores'</span>, <span class="string">'Tom'</span>, <span class="string">'grade:'</span>, <span class="string">'1'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">0.0070</span> <span class="built_in">seconds</span>
</code></pre><h5 id="给Tom这一行的数据的列族添加一列_<math,87>">给Tom这一行的数据的列族添加一列 <math,87></h5>
<pre><code>hbase(main):<span class="number">006</span>:<span class="number">0</span>&gt; <span class="built_in">put</span> <span class="string">'scores'</span>, <span class="string">'Tom'</span>, <span class="string">'course:math'</span>, <span class="string">'87'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">0.0040</span> <span class="built_in">seconds</span>
</code></pre><h5 id="给Tom这一行的数据的列族添加一列_<art,97>">给Tom这一行的数据的列族添加一列 <art,97></h5>
<pre><code>hbase(main):<span class="number">007</span>:<span class="number">0</span>&gt; <span class="built_in">put</span> <span class="string">'scores'</span>, <span class="string">'Tom'</span>, <span class="string">'course:art'</span>, <span class="string">'97'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">0.0030</span> <span class="built_in">seconds</span>
</code></pre><h5 id="加入一行数据,行名称为_Jerry_列族grad的列名为””_值位2">加入一行数据,行名称为 Jerry 列族grad的列名为”” 值位2</h5>
<pre><code>hbase(main):<span class="number">008</span>:<span class="number">0</span>&gt; <span class="built_in">put</span> <span class="string">'scores'</span>, <span class="string">'Jerry'</span>, <span class="string">'grade:'</span>, <span class="string">'2'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">0.0040</span> <span class="built_in">seconds</span>
</code></pre><h5 id="给Jerry这一行的数据的列族添加一列_<math,100>">给Jerry这一行的数据的列族添加一列 <math,100></h5>
<pre><code>hbase(main):<span class="number">009</span>:<span class="number">0</span>&gt; <span class="built_in">put</span> <span class="string">'scores'</span>, <span class="string">'Jerry'</span>, <span class="string">'course:math'</span>, <span class="string">'100'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">0.0030</span> <span class="built_in">seconds</span>
</code></pre><h5 id="给Jerry这一行的数据的列族添加一列_<art,80>">给Jerry这一行的数据的列族添加一列 <art,80></h5>
<pre><code>hbase(main):<span class="number">010</span>:<span class="number">0</span>&gt; <span class="built_in">put</span> <span class="string">'scores'</span>, <span class="string">'Jerry'</span>, <span class="string">'course:art'</span>, <span class="string">'80'</span>

<span class="number">0</span> row(s) <span class="operator">in</span> <span class="number">0.0050</span> <span class="built_in">seconds</span>
</code></pre><h5 id="查看scores表中Tom的相关数据">查看scores表中Tom的相关数据</h5>
<pre><code>hbase(main):<span class="number">011</span>:<span class="number">0</span>&gt; <span class="built_in">get</span> <span class="string">'scores'</span>, <span class="string">'Tom'</span>

COLUMN                       CELL

course:art                  timestamp=<span class="number">1224726394286</span>, <span class="built_in">value</span>=<span class="number">97</span>

course:math                 timestamp=<span class="number">1224726377027</span>, <span class="built_in">value</span>=<span class="number">87</span>

grade:                      timestamp=<span class="number">1224726360727</span>, <span class="built_in">value</span>=<span class="number">1</span>

<span class="number">3</span> row(s) <span class="operator">in</span> <span class="number">0.0070</span> <span class="built_in">seconds</span>
</code></pre><h5 id="查看scores表中所有数据">查看scores表中所有数据</h5>
<pre><code>hbase(main):<span class="number">012</span>:<span class="number">0</span>&gt; scan <span class="string">'scores'</span>

ROW                          COLUMN+CELL

Tom                         column=course:art, timestamp=<span class="number">1224726394286</span>, <span class="built_in">value</span>=<span class="number">97</span>

Tom                         column=course:math, timestamp=<span class="number">1224726377027</span>, <span class="built_in">value</span>=<span class="number">87</span>

Tom                         column=grade:, timestamp=<span class="number">1224726360727</span>, <span class="built_in">value</span>=<span class="number">1</span>

Jerry                        column=course:art, timestamp=<span class="number">1224726424967</span>, <span class="built_in">value</span>=<span class="number">80</span>

Jerry                        column=course:math, timestamp=<span class="number">1224726416145</span>, <span class="built_in">value</span>=<span class="number">100</span>

Jerry                        column=grade:, timestamp=<span class="number">1224726404965</span>, <span class="built_in">value</span>=<span class="number">2</span>

<span class="number">6</span> row(s) <span class="operator">in</span> <span class="number">0.0410</span> <span class="built_in">seconds</span>
</code></pre><h5 id="查看scores表中所有数据courses列族的所有数据">查看scores表中所有数据courses列族的所有数据</h5>
<pre><code>hbase(main):<span class="number">013</span>:<span class="number">0</span>&gt; scan <span class="string">'scores'</span>, [<span class="string">'course:'</span>]

ROW                          COLUMN+CELL

Tom                         column=course:art, timestamp=<span class="number">1224726394286</span>, <span class="built_in">value</span>=<span class="number">97</span>

Tom                         column=course:math, timestamp=<span class="number">1224726377027</span>, <span class="built_in">value</span>=<span class="number">87</span>

Jerry                        column=course:art, timestamp=<span class="number">1224726424967</span>, <span class="built_in">value</span>=<span class="number">80</span>

Jerry                        column=course:math, timestamp=<span class="number">1224726416145</span>, <span class="built_in">value</span>=<span class="number">100</span>

<span class="number">4</span> row(s) <span class="operator">in</span> <span class="number">0.0200</span> <span class="built_in">seconds</span>
</code></pre><p>上面就是HBase的基本shell操作的一个例子,可以看出,hbase的shell还是比较简单易用的,从中也可以看出HBase shell缺少很多传统sql中的一些类似于like等相关操作,当然,HBase作为BigTable的一个开源实现,而BigTable是作为 google业务的支持模型,很多sql语句中的一些东西可能还真的不需要.</p>
]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/HBase/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HBse的安装]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/hbase_install/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/hbase_install/</id>
    <published>2014-05-12T07:16:29.000Z</published>
    <updated>2014-05-12T07:17:46.000Z</updated>
    <content type="html"><![CDATA[<p>在安装hbase时要求与hadoop的版本相关联，那么如何找出合适的hbase版本呢，其实有一个简单但是有点费事的做法，就是可以下载hbase后解压查看lib目录中的hadoop-core-x.x.x.jar文件的版本号，就可以找到合适的hadoop版本号了。</p>
<p>我下载了三个版本，终于找到了hadoop1.2.1是 跟Hbase-0.98.0版本匹配。同学们可以少走弯路了。</p>
<p>我的机器配置</p>
<pre><code><span class="tag">Hadoop</span><span class="pseudo">:1</span><span class="class">.2</span><span class="class">.1</span>
<span class="tag">HBase</span><span class="pseudo">:0</span><span class="class">.98</span><span class="class">.1</span>
三个节点：<span class="tag">hadoop01</span>，<span class="tag">hadoop02</span>,<span class="tag">hadoop03</span>
</code></pre><h4 id="解压HBase">解压HBase</h4>
<pre><code>[grid<span class="variable">@hadoop01</span> ~]<span class="variable">$ </span>tar -xzvf hbase-<span class="number">0</span>.<span class="number">98.1</span>-hadoop1-bin.tar.gz 
[grid<span class="variable">@hadoop01</span> ~]<span class="variable">$ </span>mv hbase-<span class="number">0</span>.<span class="number">98.1</span>-hadoop1 hbase
</code></pre><h4 id="修改hbase_conf_目录下的配置文件">修改hbase conf 目录下的配置文件</h4>
<h5 id="hbase-env-sh：">hbase-env.sh：</h5>
<pre><code>[grid<span class="variable">@hadoop01</span> conf]<span class="variable">$ </span>vi hbase-env.sh 

<span class="comment"># The java implementation to use.  Java 1.6 required.</span>
  export <span class="constant">JAVA_HOME</span>=<span class="regexp">/usr/jdk</span>1.<span class="number">7.0_51</span>

<span class="comment"># Extra Java CLASSPATH elements.  Optional.</span>
  export <span class="constant">HBASE_CLASSPATH</span>=<span class="regexp">/home/grid</span><span class="regexp">/hadoop-1.2.1/conf</span>

<span class="comment"># Tell HBase whether it should manage it's own instance of Zookeeper or not.</span>
  export <span class="constant">HBASE_MANAGES_ZK</span>=<span class="keyword">true</span>
</code></pre><h5 id="hbase-site-xml：">hbase-site.xml：</h5>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>hdfs://hadoop01.myhadoop.com:9000/hbase<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>/home/grid/hbase/tmp<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>hadoop01,hadoop02,hadoop03<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
        <span class="tag">&lt;<span class="title">property</span>&gt;</span>
                <span class="tag">&lt;<span class="title">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
                <span class="tag">&lt;<span class="title">value</span>&gt;</span>/home/grid/hbase/tmp/zookeeper<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><h4 id="更改regionservers">更改regionservers</h4>
<pre><code>[grid<span class="variable">@hadoop01</span> conf]<span class="variable">$ </span>vi regionservers
hadoop02
hadoop03 
</code></pre><h4 id="创建hbase专用文件夹：">创建hbase专用文件夹：</h4>
<h5 id="创建文件系统目录">创建文件系统目录</h5>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> conf]$ hadoop fs -mkdir hdfs:<span class="comment">//hadoop01.myhadoop.com:9000/hbase</span>
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> conf]$ hadoop fs -<span class="keyword">ls</span> hdfs:<span class="comment">//hadoop01.myhadoop.com:9000/</span>
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">5</span> items
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">09</span> <span class="number">15</span>:<span class="number">04</span> /hbase
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">21</span>:<span class="number">09</span> /home
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">04</span>-<span class="number">22</span> <span class="number">19</span>:<span class="number">07</span> /out4
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">04</span>-<span class="number">23</span> <span class="number">17</span>:<span class="number">17</span> /tmp
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">21</span>:<span class="number">22</span> /user
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> conf]$
</code></pre><h4 id="复制Master上的hbase文件夹到另外2节点：">复制Master上的hbase文件夹到另外2节点：</h4>
<pre><code> scp -r hbase grid<span class="variable">@hadoop02</span><span class="symbol">:~</span>
 scp -r hbase grid<span class="variable">@hadoop03</span><span class="symbol">:~</span>
</code></pre><h4 id="修改各节点_的/etc/profile：">修改各节点 的/etc/profile：</h4>
<pre><code><span class="keyword">export</span> HBASE_HOME=/home/grid/hbase
<span class="keyword">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HBASE_HOME</span>/bin
使其生效：
<span class="built_in">source</span> /etc/profile
</code></pre><h4 id="启动hbase并进入shell，然后退出">启动hbase并进入shell，然后退出</h4>
<pre><code>start-hbase.sh
hbase shell
create ‘test’,’id’
disable ‘test’
drop ‘test’
<span class="keyword">exit</span>
stop-hbase.sh



[grid@hadoop01 ~]$ start-hbase.sh 
hadoop03: starting zookeeper, logging <span class="keyword">to</span> /home/grid/hbase/bin/../logs/hbase-grid-zookeeper-hadoop03.myhadoop.com.<span class="keyword">out</span>
hadoop02: starting zookeeper, logging <span class="keyword">to</span> /home/grid/hbase/bin/../logs/hbase-grid-zookeeper-hadoop02.myhadoop.com.<span class="keyword">out</span>
The authenticity <span class="keyword">of</span> host <span class="attribute">'hadoop01</span> (<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>)' can<span class="attribute">'t</span> be established.
RSA key fingerprint <span class="keyword">is</span> <span class="number">99</span>:<span class="number">8</span>c:<span class="number">8</span>f:<span class="number">64</span>:<span class="number">6</span>a:<span class="number">9</span>e:<span class="number">17</span>:<span class="number">4</span>b:cf:cc:b1:<span class="number">4</span>b:<span class="number">8</span>d:<span class="number">13</span>:eb:e9.
Are you sure you want <span class="keyword">to</span> continue connecting (yes/no)? yes
hadoop01: Warning: Permanently added <span class="attribute">'hadoop01</span>' (RSA) <span class="keyword">to</span> the list <span class="keyword">of</span> known hosts.
hadoop01: starting zookeeper, logging <span class="keyword">to</span> /home/grid/hbase/bin/../logs/hbase-grid-zookeeper-hadoop01.myhadoop.com.<span class="keyword">out</span>
starting master, logging <span class="keyword">to</span> /home/grid/hbase/logs/hbase-grid-master-hadoop01.myhadoop.com.<span class="keyword">out</span>
hadoop03: starting regionserver, logging <span class="keyword">to</span> /home/grid/hbase/bin/../logs/hbase-grid-regionserver-hadoop03.myhadoop.com.<span class="keyword">out</span>
hadoop02: starting regionserver, logging <span class="keyword">to</span> /home/grid/hbase/bin/../logs/hbase-grid-regionserver-hadoop02.myhadoop.com.<span class="keyword">out</span>
[grid@hadoop01 ~]$ jps
<span class="number">4675</span> HQuorumPeer
<span class="number">3796</span> SecondaryNameNode
<span class="number">4726</span> HMaster
<span class="number">3862</span> JobTracker
<span class="number">3653</span> NameNode
<span class="number">4873</span> Jps
[grid@hadoop01 ~]$ 
[grid@hadoop01 ~]$ hbase shell
HBase Shell; enter <span class="attribute">'help</span>&lt;<span class="keyword">RETURN</span>&gt;' <span class="keyword">for</span> list <span class="keyword">of</span> supported commands.
<span class="keyword">Type</span> <span class="string">"exit&lt;RETURN&gt;"</span> <span class="keyword">to</span> leave the HBase Shell
Version <span class="number">0.98</span><span class="number">.1</span>-hadoop1, r1583035, Sat Mar <span class="number">29</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">51</span> PDT <span class="number">2014</span>

hbase(main):<span class="number">001</span>:<span class="number">0</span>&gt; create <span class="attribute">'test</span>',<span class="attribute">'id</span>'
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding <span class="keyword">in</span> [jar:<span class="keyword">file</span>:/home/grid/hbase/lib/slf4j-log4j12-<span class="number">1.6</span><span class="number">.4</span>.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding <span class="keyword">in</span> [jar:<span class="keyword">file</span>:/home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>/lib/slf4j-log4j12-<span class="number">1.4</span><span class="number">.3</span>.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings <span class="keyword">for</span> an explanation.
<span class="number">0</span> row(s) <span class="keyword">in</span> <span class="number">7.1400</span> seconds

=&gt; Hbase::Table - test

hbase(main):<span class="number">003</span>:<span class="number">0</span>&gt; disable <span class="attribute">'test</span>'
<span class="number">0</span> row(s) <span class="keyword">in</span> <span class="number">1.5220</span> seconds

hbase(main):<span class="number">004</span>:<span class="number">0</span>&gt; drop <span class="attribute">'test</span>'
<span class="number">0</span> row(s) <span class="keyword">in</span> <span class="number">0.3550</span> seconds

hbase(main):<span class="number">005</span>:<span class="number">0</span>&gt; <span class="keyword">exit</span>
[grid@hadoop01 bin]$ stop-hbase.sh 
stopping hbase....................
hadoop02: stopping zookeeper.
hadoop03: stopping zookeeper.
hadoop01: stopping zookeeper.
</code></pre>]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/HBase/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[炼数成金论坛上关于HBase三个小问题的讨论]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/11/Hadoop/hbase_problem/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/11/Hadoop/hbase_problem/</id>
    <published>2014-05-11T02:23:49.000Z</published>
    <updated>2014-05-11T02:25:28.000Z</updated>
    <content type="html"><![CDATA[<p><div align=left><a href="http://blog.csdn.net/michael_zhu_2004/article/details/8330777" target="_blank">参考1</a>和<a href="http://www.dataguru.cn/blog-303-529.html" target="_blank">参考2</a></div></p>
<h5 id="我们常说HBase是“数据即日志”的数据库，它是怎样修改和删除数据的？和Oracle这类传统的RDBMS有什么区别？">我们常说HBase是“数据即日志”的数据库，它是怎样修改和删除数据的？和Oracle这类传统的RDBMS有什么区别？</h5>
<p>数据即日志，主要是指HBase中数据如日志般存储和更新，即几乎没有插入，修改，删除的操作，只是不停增加数据。这一特性主要是由于HBase数据文件存储在HDFS系统中，而该系统由于统一数据分布在不同的节点中，对其中数据的删除和修改都是非常困难的。故HBase在修改数据时就对该数据增加一个更新的数据版本（以时间戳），HBase的修改操作也同样增加一条命令删除数据的记录，等到对storefile进行合并时，去掉这些数据。</p>
<p>Oracle没有数据的版本概念，在修改和删除数据时不会增加新的数据记录，直接对老数据进行修改或删除。一旦完成修改或删除，则原始数据发生变化。</p>
<h5 id="HBase合并storefile的原因是什么？在合并的过程中会做什么操作？如果在合并过程中恰好有涉及到有关storefile的查询发生，会发生什么情况（这个问题需要自行研究）？">HBase合并storefile的原因是什么？在合并的过程中会做什么操作？如果在合并过程中恰好有涉及到有关storefile的查询发生，会发生什么情况（这个问题需要自行研究）？</h5>
<p>HBbase的新数据首先是放在MemoryStore中的，数据量超过阈值后才会被写入物理文件StoreFile。因此，这些物理文件StoreFile初次的容量都不大（内存的映射）。HBase会定时合并这些较小的StoreFile，形成较大的StoreFile更有利于HDFS物理文件的读操作。而且，合并时会删除其中过期的旧版本数据和被删除的数据。</p>
<p>如果在合并过程中恰好有涉及到有关storefile的查询发生的话，HBase先是把小storefile加载到内存中，用户可以在内存中检索相关数据，其实内存中做存在一个独立镜像备份专门提供查询，当合并完成后内存空间中的镜像备份才会被撤销。</p>
<h5 id="HBase具有怎样的一致性水平？">HBase具有怎样的一致性水平？</h5>
<p>CAP理论是由EricBrewer教授提出的，在设计和部署分布式应用的时候，存在三个核心的系统需求，这个三个需求之间存在一定的特殊关系。三个需求如下：</p>
<pre><code><span class="keyword">C</span>: Consistency 一致性
A: Availability 可用性
P:<span class="keyword">Partition</span> <span class="keyword">Tolerance</span>分区容错性
</code></pre><p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。 </p>
<p>C: Consistency 一致性</p>
<p>一致性又称为原子性或者事务性。表示一个事务的操作是不可分割的，要不然这个事务完成，要不然这个事务不完成，不会出现这个事务完成了一半这样的情况。这种事务的原子性使得数据具有一致性。我们通常情况下在数据库中存在的脏数据就属于数据没有具有一致性的表现。而在分布式系统中，经常出现的一个数据不具有一致性的情况是读写数据时缺乏一致性。比如两个节点数据冗余，第一个节点有一个写操作，数据更新以后没有有效的使得第二个节点更新数据，在读取第二个节点的时候就会出现不一致的问题出现。传统的ACID数据库是很少存在一致性问题的，因为数据的单点原因，数据的存取又具有良好的事务性，不会出现读写的不一致。</p>
<p>HBase架构在HDFS系统之上，是分布式的NoSQL列式数据库，它是一个CP型数据库。每一行数据仅在一个Region中，没有多余副本可读，保证了数据的一致性</p>
<h4 id="这个答案也不错，故一并记录下：">这个答案也不错，故一并记录下：</h4>
<h5 id="我们常说HBase是“数据即日志”的数据库，它是怎样修改和删除数据的？和Oracle这类传统的RDBMS有什么区别？-1">我们常说HBase是“数据即日志”的数据库，它是怎样修改和删除数据的？和Oracle这类传统的RDBMS有什么区别？</h5>
<p>答：首先Hbase中的一个“元素”是由行键、列族名、限定符、时间戳唯一标识的并且行键作为数据行在表里的唯一标识，我们只有通过行键来访问列族别无他法。</p>
<p>修改数据：我们先找到要修改的行键把新的数据记录追加到对应的列族中并打上一个新时间戳代表最新版本。</p>
<p>删除数据：插入带有删除标记的行进入，相当于把整个行键所在的行删了。</p>
<p>小结：hbase中所有修改和删除都是用insert方式来完成的，这是由底层HDFS文件系统特性决定的，HDFS中的文件只能一次性写入不能修改可以删除在写回。因此hbase是天生面向时间查询的数据库。例如 查询最近一段时间一个人发布的博客、发布签名、发布照片so on。</p>
<p>hbase特点</p>
<pre><code>(<span class="number">1</span>)适合大量插入同时key-value查询，例如可以输入一个key查询一个value，还可以输入一组key查询一组value。
(<span class="number">2</span>)瓶颈是硬盘的传输速度，因为有大量的插入操作和读出操作，使用SSD  SCSI  IDE不同的硬盘效率是不同的。
(<span class="number">3</span>)适合数据分析。
(<span class="number">4</span>)列式数据库会把相同列的数据都放在一块即列为单位存储。当我们查询某一列的时候只需要调出相应的块即可，这样还可以减少很多<span class="keyword">I</span>/<span class="keyword">O</span>。
(<span class="number">5</span>)如果数据元素间的相似性很高的话可以进行大幅度的压缩，相似度越高压缩比越大，甚至可以压缩到原来十几分之一、上百分之一。即节约了空间又减少了<span class="keyword">I</span>/<span class="keyword">O</span>，从而提高性能。
(<span class="number">6</span>)hbase只有主键索引，它使用的是LSM（<span class="keyword">Log</span> Structure Merge）索引，因为hbase所有的修改都是使用追加方式完成的，从数据流上看按照顺序方式写入与日志写入的方式相同，我们又可以认为数据和日志一体化，这又节约了很多空间。
</code></pre><p>oracle特点</p>
<pre><code>(<span class="number">1</span>)适合小事务短时间片密集型OLTP系统，例如在线交易系统。
(<span class="number">2</span>)瓶颈是硬盘的寻道时间（磁头移动时间），因为oracle随机写随机修改块，首先要找到块这个过程就是寻道时间，而寻道时间又由硬盘转速决定的，<span class="number">5400</span> <span class="number">7200</span> <span class="number">15000</span>转/秒 不同的转速效率也是不同的。
(<span class="number">3</span>)适合做SQL统计。
(<span class="number">4</span>)行式数据库会按照数据行顺序集中存放即行为单位存储。当我们查询某一列的时候必须把表里所有的行读完才能抽取我们所要的行，这样很不划算，还要付出很大的<span class="keyword">I</span>/<span class="keyword">O</span>资源。
(<span class="number">5</span>)那么从结构上讲oracle的压缩性能就要略逊一筹。
(<span class="number">6</span>)oracle常用的是B+树索引，比较大小来查找记录，小的走左边大的走右边，如果列中的相似度较高的话性能较差。
</code></pre><h5 id="HBase合并storefile的原因是什么？在合并的过程中会做什么操作？如果在合并过程中恰好有涉及到有关storefile的查询发生，会发生什么情况！">HBase合并storefile的原因是什么？在合并的过程中会做什么操作？如果在合并过程中恰好有涉及到有关storefile的查询发生，会发生什么情况！</h5>
<p>答：首先我们介绍一下Hbase数据存储的物理结构</p>
<pre><code>一个物理节点只能跑一个HRegionserver
一个HRegionServer可以包括很多个Region实例，可以是不同表Region
一个Region包含一个hlog和多个store（一个store就是一个列族，因为同列族元素在物理上存放在同一个地方，不同列族在物理上是分离的）
一个store包含一个memstore和多个storefile
</code></pre><p>当我们在处理数据的时候，首先把数据加载到memstore，数据越来越多直到memstore占满，再写入硬盘storefile中，每次写入形成一个单独storefile，当storefile达到一定的数量后，就会开始把小storefile合并成大storefile，因为hadoop不擅长处理小文件，文件越大性能越好。</p>
<p>在合并的过程中会抛弃删除标识的行和版本过旧的行（hbase版本抛弃方式（1）我们可以预先定义版本的个数，超过这个值就抛弃（2）还可以预先定义版本的时间长短，超过这个时间就抛弃），合并完后形成更大的storefile，当达到数量再次合并，直到storefile容量超过一定阀值后会把当前的Region进行分裂为2个并由Hmaster（hbase数据库主控节点）分配到不同的HRegionServer服务器处理实现负载均衡。</p>
<p>如果在合并过程中恰好有涉及到有关storefile的查询发生的话，我们先是把小storefile加载到内存中进行合并此时如有用户访问可以在内存中检索相关数据返回给用户，我们可以想象在内存中做一个独立镜像备份专门提供被查询需求，另一个主体在另一块内存空间里进行合并，当合并完成后释放备份的内存空间，返回到原来的状态。</p>
<h5 id="Hbase具有怎么样的一致性水平">Hbase具有怎么样的一致性水平</h5>
<p>答：hbase是最终一致性的系统，因为hbase是架构在hadoop之上的数据库，“错误是常态”是hadoop座右铭，在cap理论中hbase为了满足可用性和分区容错性牺牲了一部分的数据一致性。</p>
<p>举例：我们要进行电信的指标汇总，并且把汇总结果冗余三份分布在3个datanode中，我们可以设置阀值只要有2份结果保存了我们就可以继续做下面的操作，在一定时间范围内允许第3份结果稍后一致性同步，这就是最终一致性。所以说hbase是适用于AP理论的系统，最终一致性也满足分布式集群的特点。</p>
]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/HBase/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HBase体系结构及原理]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/11/Hadoop/hbase/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/11/Hadoop/hbase/</id>
    <published>2014-05-11T02:20:31.000Z</published>
    <updated>2014-05-11T03:12:52.000Z</updated>
    <content type="html"><![CDATA[<h4 id="HBase简介">HBase简介</h4>
<p>HBase是Apache Hadoop的数据库，能够对大型数据提供随机、实时的读写访问。HBase的目标是存储并处理大型的数据。HBase是一个开源的，分布式的，多版本的，面向列的存储模型。它存储的是松散型数据。</p>
<p>HBase特性：高可靠性、高效性、面向列、可伸缩、可在廉价PC Server搭建大规模结构化存储集群</p>
<p>HBase是Google BigTable的开源实现，其相互对应如下：</p>
<table>    <tr><td></td><td>Google</td><td>HBase</td></tr><tr><td>文件存储系统</td><td>GFS</td><td>HDFS</td></tr><tr><td>海量数据处理</td><td>MapReduce</td><td>MapReduce</td></tr><tr><td>协同服务管理</td><td>Chubby</td><td>Zookeeper</td></tr><br></table>

<h4 id="HBase关系图：">HBase关系图：</h4>
<p><img src="/img/Hadoop/HBase/1.jpg" alt="HBase关系图"><br>HBase位于结构化存储层，围绕HBase，各部件对HBase的支持情况：</p>
<pre><code>Hadoop部件　　　　　　　　　　　　作用
HDFS　　　　　　　　　　　　　　高可靠的底层存储支持
MapReduce        　　　　　　　 高性能的计算能力
Zookeeper        　　　　　　　 稳定服务和failover机制
Pig&amp;Hive　　　　　　　　　　　　高层语言支持，便于数据统计
Sqoop　　　　　　　　　　　　　 提供RDBMS数据导入，便于传统数据库向HBase迁移
</code></pre><p>访问HBase的接口</p>
<pre><code>方式　　　　　　　　　　　　特点　　　　　　　　　　　　　　         场合
Native Java API　　　　　　最常规和高效        　　　　　　　　　　Hadoop MapReduce Job并行处理HBase表数据
HBase Shell　　　　　　　  最简单接口        　　　　　　　　　　　HBase管理使用
Thrift Gateway　　　　　　 利用Thrift序列化支持多种语言        　　异构系统在线访问HBase表数据
<span class="keyword">Rest</span> Gateway　　　　　　   解除语言限制        　　　　　　　　　　<span class="keyword">Rest</span>风格Http API访问
Pig　　　　　　　　　　　　Pig Latin六十编程语言处理数据        　 数据统计
Hive　　　　　　　　　　　 简单，SqlLike
</code></pre><h4 id="HBase_数据模型">HBase 数据模型</h4>
<p><img src="/img/Hadoop/HBase/2.jpg" alt="HBase数据模型"><br>组成部件说明：<br>Row Key：　　 　　Table主键 行键 Table中记录按照Row Key排序<br>Timestamp：   　　每次对数据操作对应的时间戳，也即数据的version number<br>Column Family： 　列簇，一个table在水平方向有一个或者多个列簇，列簇可由任意多个Column组成，列簇支持动态扩展，无须预定义数量及类型，二进制存储，用户需自行进行类型转换</p>
<h4 id="Table&amp;Region">Table&amp;Region</h4>
<p><img src="/img/Hadoop/HBase/3.jpg" alt="图三"><br>Table随着记录增多不断变大，会自动分裂成多份Splits，成为Regions<br>一个region由[startkey，endkey)表示<br>不同region会被Master分配给相应的RegionServer进行管理</p>
<h4 id="两张特殊表：-ROOT-_&amp;_-META-">两张特殊表：-ROOT- &amp; .META.</h4>
<p><img src="/img/Hadoop/HBase/4.jpg" alt="图四"><br>.META.        记录用户表的Region信息，同时，.META.也可以有多个region<br>-ROOT-         记录.META.表的Region信息，但是，-ROOT-只有一个region<br>Zookeeper中记录了-ROOT-表的location<br>客户端访问数据的流程：<br>Client -&gt; Zookeeper -&gt; -ROOT- -&gt; .META. -&gt; 用户数据表<br>多次网络操作，不过client端有cache缓存</p>
<h4 id="HBase_系统架构图">HBase 系统架构图</h4>
<p><img src="/img/Hadoop/HBase/5.jpg" alt="HBase系统架构图"><br>组成部件说明</p>
<h6 id="Client：">Client：</h6>
<p>使用HBase RPC机制与HMaster和HRegionServer进行通信</p>
<p>Client与HMaster进行通信进行管理类操作</p>
<p>Client与HRegionServer进行数据读写类操作</p>
<h6 id="Zookeeper：">Zookeeper：</h6>
<p>Zookeeper Quorum存储-ROOT-表地址、HMaster地址</p>
<p>HRegionServer把自己以Ephedral方式注册到Zookeeper中，HMaster随时感知各个HRegionServer的健康状况</p>
<p>Zookeeper避免HMaster单点问题</p>
<h6 id="HMaster：">HMaster：</h6>
<p>HMaster没有单点问题，HBase中可以启动多个HMaster，通过Zookeeper的Master Election机制保证总有一个Master在运行</p>
<p>主要负责Table和Region的管理工作：</p>
<p>管理用户对表的增删改查操作</p>
<p>管理HRegionServer的负载均衡，调整Region分布</p>
<p>Region Split后，负责新Region的分布</p>
<p>在HRegionServer停机后，负责失效HRegionServer上Region迁移</p>
<h6 id="HRegionServer：">HRegionServer：</h6>
<p>HBase中最核心的模块，主要负责响应用户I/O请求，向HDFS文件系统中读写数据<br><img src="/img/Hadoop/HBase/6.jpg" alt="图6"><br>HRegionServer管理一些列HRegion对象；</p>
<p>每个HRegion对应Table中一个Region，HRegion由多个HStore组成；</p>
<p>每个HStore对应Table中一个Column Family的存储；</p>
<p>Column Family就是一个集中的存储单元，故将具有相同IO特性的Column放在一个Column Family会更高效</p>
<h6 id="HStore：">HStore：</h6>
<p>HBase存储的核心。由MemStore和StoreFile组成。</p>
<p>MemStore是Sorted Memory Buffer。用户写入数据的流程：<br><img src="/img/Hadoop/HBase/7.jpg" alt="图7"></p>
<p>Client写入 -&gt; 存入MemStore，一直到MemStore满 -&gt; Flush成一个StoreFile，直至增长到一定阈值 -&gt; 出发Compact合并操作 -&gt; 多个StoreFile合并成一个StoreFile，同时进行版本合并和数据删除 -&gt; 当StoreFiles Compact后，逐步形成越来越大的StoreFile -&gt; 单个StoreFile大小超过一定阈值后，触发Split操作，把当前Region Split成2个Region，Region会下线，新Split出的2个孩子Region会被HMaster分配到相应的HRegionServer上，使得原先1个Region的压力得以分流到2个Region上</p>
<p>由此过程可知，HBase只是增加数据，有所得更新和删除操作，都是在Compact阶段做的，所以，用户写操作只需要进入到内存即可立即返回，从而保证I/O高性能。</p>
<h6 id="HLog">HLog</h6>
<p>引入HLog原因：</p>
<p>在分布式系统环境中，无法避免系统出错或者宕机，一旦HRegionServer以外退出，MemStore中的内存数据就会丢失，引入HLog就是防止这种情况</p>
<p>工作机制：</p>
<p>每个HRegionServer中都会有一个HLog对象，HLog是一个实现Write Ahead Log的类，每次用户操作写入Memstore的同时，也会写一份数据到HLog文件，HLog文件定期会滚动出新，并删除旧的文件(已持久化到StoreFile中的数据)。当HRegionServer意外终止后，HMaster会通过Zookeeper感知，HMaster首先处理遗留的HLog文件，将不同region的log数据拆分，分别放到相应region目录下，然后再将失效的region重新分配，领取到这些region的HRegionServer在Load Region的过程中，会发现有历史HLog需要处理，因此会Replay HLog中的数据到MemStore中，然后flush到StoreFiles，完成数据恢复。</p>
<h6 id="HBase存储格式">HBase存储格式</h6>
<p>HBase中的所有数据文件都存储在Hadoop HDFS文件系统上，格式主要有两种：</p>
<p>HFile HBase中KeyValue数据的存储格式，HFile是Hadoop的二进制格式文件，实际上StoreFile就是对HFile做了轻量级包装，即StoreFile底层就是HFile</p>
<p>HLog File，HBase中WAL（Write Ahead Log） 的存储格式，物理上是Hadoop的Sequence File</p>
<h6 id="HFile">HFile</h6>
<p><img src="/img/Hadoop/HBase/8.jpg" alt="图8"><br>图片解释：<br>HFile文件不定长，长度固定的块只有两个：Trailer和FileInfo</p>
<p>Trailer中指针指向其他数据块的起始点</p>
<p>File Info中记录了文件的一些Meta信息，例如：AVG_KEY_LEN, AVG_VALUE_LEN, LAST_KEY, COMPARATOR, MAX_SEQ_ID_KEY等</p>
<p>Data Index和Meta Index块记录了每个Data块和Meta块的起始点</p>
<p>Data Block是HBase I/O的基本单元，为了提高效率，HRegionServer中有基于LRU的Block Cache机制</p>
<p>每个Data块的大小可以在创建一个Table的时候通过参数指定，大号的Block有利于顺序Scan，小号Block利于随机查询；每个Data块除了开头的Magic以外就是一个个KeyValue对拼接而成, Magic内容就是一些随机数字，目的是防止数据损坏</p>
<p>HFile里面的每个KeyValue对就是一个简单的byte数组。这个byte数组里面包含了很多项，并且有固定的结构。<br><img src="/img/Hadoop/HBase/9.jpg" alt="图9"></p>
<p>KeyLength和ValueLength：两个固定的长度，分别代表Key和Value的长度</p>
<p>Key部分：Row Length是固定长度的数值，表示RowKey的长度，Row 就是RowKey</p>
<p>Column Family Length是固定长度的数值，表示Family的长度</p>
<p>接着就是Column Family，再接着是Qualifier，然后是两个固定长度的数值，表示Time Stamp和Key Type（Put/Delete）</p>
<p>Value部分没有这么复杂的结构，就是纯粹的二进制数据</p>
<h5 id="HLog_File">HLog File</h5>
<p><img src="/img/Hadoop/HBase/10.jpg" alt="图10"></p>
<p>HLog文件就是一个普通的Hadoop Sequence File，Sequence File 的Key是HLogKey对象，HLogKey中记录了写入数据的归属信息，除了table和region名字外，同时还包括 sequence number和timestamp，timestamp是“写入时间”，sequence number的起始值为0，或者是最近一次存入文件系统中sequence number。</p>
<p>HLog Sequece File的Value是HBase的KeyValue对象，即对应HFile中的KeyValue</p>
]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="HBase" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/HBase/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mahout利用朴素贝叶斯分类处理20个新闻组案例]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/08/Hadoop/mahout_2/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/08/Hadoop/mahout_2/</id>
    <published>2014-05-08T00:40:51.000Z</published>
    <updated>2014-05-08T01:09:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="朴素贝叶斯分类算法">朴素贝叶斯分类算法</h3>
<p><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/17/naive-bayesian-classifier.html" target="_blank">朴素贝叶斯分类算法</a></p>
<h3 id="下载20个新闻组数据">下载20个新闻组数据</h3>
<p><a href="http://people.csail.mit.edu/jrennie/20Newsgroups/20news-bydate.tar.gz" target="_blank">20个新闻组</a></p>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> data]$ <span class="keyword">ls</span>
<span class="number">20</span>news-bydate.tar.gz  <span class="number">20</span>news-bydate-test  <span class="number">20</span>news-bydate-train
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> data]$ <span class="keyword">pwd</span>
/home/<span class="keyword">grid</span>/data
</code></pre><h3 id="建立训练集">建立训练集</h3>
<pre><code>bin/mahout org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.PrepareTwentyNewsgroups</span> \ 
-p /home/grid/data/<span class="number">20</span>news-bydate-train \   指定数据源
-o /home/grid/data/bayes-train-input \     指定生成目录
-a org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.vectorizer</span><span class="preprocessor">.DefaultAnalyzer</span> \ 
-c UTF-<span class="number">8</span>

[grid@hadoop01 mahout-distribution-<span class="number">0.6</span>]$ bin/mahout org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.PrepareTwentyNewsgroups</span> -p /home/grid/data/<span class="number">20</span>news-bydate-train -o /home/grid/data/bayes-train-input -a org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.vectorizer</span><span class="preprocessor">.DefaultAnalyzer</span> -c UTF-<span class="number">8</span>
MAHOUT_LOCAL is not <span class="keyword">set</span><span class="comment">; adding HADOOP_CONF_DIR to classpath.</span>
Running on hadoop, using HADOOP_HOME=/home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>
HADOOP_CONF_DIR=/home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>/conf
MAHOUT-JOB: /home/grid/mahout-distribution-<span class="number">0.6</span>/mahout-examples-<span class="number">0.6</span>-job<span class="preprocessor">.jar</span>
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">30</span> WARN driver<span class="preprocessor">.MahoutDriver</span>: No org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.PrepareTwentyNewsgroups</span><span class="preprocessor">.props</span> found on classpath, will use command-line arguments only
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">17</span>:<span class="number">57</span>:<span class="number">37</span> INFO driver<span class="preprocessor">.MahoutDriver</span>: Program took <span class="number">7635</span> ms (Minutes: <span class="number">0.12726666666666667</span>)
[grid@hadoop01 data]$ ls
<span class="number">20</span>news-bydate<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>  <span class="number">20</span>news-bydate-test  <span class="number">20</span>news-bydate-train  bayes-train-input
[grid@hadoop01 data]$ cd bayes-train-input/
[grid@hadoop01 bayes-train-input]$ ls
alt<span class="preprocessor">.atheism</span><span class="preprocessor">.txt</span>               comp<span class="preprocessor">.windows</span><span class="preprocessor">.x</span><span class="preprocessor">.txt</span>      rec<span class="preprocessor">.sport</span><span class="preprocessor">.hockey</span><span class="preprocessor">.txt</span>  soc<span class="preprocessor">.religion</span><span class="preprocessor">.christian</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.graphics</span><span class="preprocessor">.txt</span>             misc<span class="preprocessor">.forsale</span><span class="preprocessor">.txt</span>        sci<span class="preprocessor">.crypt</span><span class="preprocessor">.txt</span>         talk<span class="preprocessor">.politics</span><span class="preprocessor">.guns</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.os</span><span class="preprocessor">.ms</span>-windows<span class="preprocessor">.misc</span><span class="preprocessor">.txt</span>   rec<span class="preprocessor">.autos</span><span class="preprocessor">.txt</span>           sci<span class="preprocessor">.electronics</span><span class="preprocessor">.txt</span>   talk<span class="preprocessor">.politics</span><span class="preprocessor">.mideast</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.sys</span><span class="preprocessor">.ibm</span><span class="preprocessor">.pc</span><span class="preprocessor">.hardware</span><span class="preprocessor">.txt</span>  rec<span class="preprocessor">.motorcycles</span><span class="preprocessor">.txt</span>     sci<span class="preprocessor">.med</span><span class="preprocessor">.txt</span>           talk<span class="preprocessor">.politics</span><span class="preprocessor">.misc</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.sys</span><span class="preprocessor">.mac</span><span class="preprocessor">.hardware</span><span class="preprocessor">.txt</span>     rec<span class="preprocessor">.sport</span><span class="preprocessor">.baseball</span><span class="preprocessor">.txt</span>  sci<span class="preprocessor">.space</span><span class="preprocessor">.txt</span>         talk<span class="preprocessor">.religion</span><span class="preprocessor">.misc</span><span class="preprocessor">.txt</span>
</code></pre><h3 id="建立测试集">建立测试集</h3>
<pre><code>bin/mahout org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.PrepareTwentyNewsgroups</span> \
-p /home/grid/data/<span class="number">20</span>news-bydate-test \     指定数据源
-o /home/grid/data/bayes-test-input \       指定生成目录
-a org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.vectorizer</span><span class="preprocessor">.DefaultAnalyzer</span> \
-c UTF-<span class="number">8</span> \

[grid@hadoop01 mahout-distribution-<span class="number">0.6</span>]$ bin/mahout org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.PrepareTwentyNewsgroups</span> -p /home/grid/data/<span class="number">20</span>news-bydate-test -o /home/grid/data/bayes-test-input -a org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.vectorizer</span><span class="preprocessor">.DefaultAnalyzer</span> -c UTF-<span class="number">8</span>
MAHOUT_LOCAL is not <span class="keyword">set</span><span class="comment">; adding HADOOP_CONF_DIR to classpath.</span>
Running on hadoop, using HADOOP_HOME=/home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>
HADOOP_CONF_DIR=/home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>/conf
MAHOUT-JOB: /home/grid/mahout-distribution-<span class="number">0.6</span>/mahout-examples-<span class="number">0.6</span>-job<span class="preprocessor">.jar</span>
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">17</span>:<span class="number">59</span>:<span class="number">38</span> WARN driver<span class="preprocessor">.MahoutDriver</span>: No org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.PrepareTwentyNewsgroups</span><span class="preprocessor">.props</span> found on classpath, will use command-line arguments only
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">00</span> INFO driver<span class="preprocessor">.MahoutDriver</span>: Program took <span class="number">21875</span> ms (Minutes: <span class="number">0.3645833333333333</span>)

[grid@hadoop01 data]$ ls
<span class="number">20</span>news-bydate<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>  <span class="number">20</span>news-bydate-test  <span class="number">20</span>news-bydate-train  bayes-test-input  bayes-train-input
[grid@hadoop01 data]$ cd bayes-test-input/
[grid@hadoop01 bayes-test-input]$ ls
alt<span class="preprocessor">.atheism</span><span class="preprocessor">.txt</span>               comp<span class="preprocessor">.windows</span><span class="preprocessor">.x</span><span class="preprocessor">.txt</span>      rec<span class="preprocessor">.sport</span><span class="preprocessor">.hockey</span><span class="preprocessor">.txt</span>  soc<span class="preprocessor">.religion</span><span class="preprocessor">.christian</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.graphics</span><span class="preprocessor">.txt</span>             misc<span class="preprocessor">.forsale</span><span class="preprocessor">.txt</span>        sci<span class="preprocessor">.crypt</span><span class="preprocessor">.txt</span>         talk<span class="preprocessor">.politics</span><span class="preprocessor">.guns</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.os</span><span class="preprocessor">.ms</span>-windows<span class="preprocessor">.misc</span><span class="preprocessor">.txt</span>   rec<span class="preprocessor">.autos</span><span class="preprocessor">.txt</span>           sci<span class="preprocessor">.electronics</span><span class="preprocessor">.txt</span>   talk<span class="preprocessor">.politics</span><span class="preprocessor">.mideast</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.sys</span><span class="preprocessor">.ibm</span><span class="preprocessor">.pc</span><span class="preprocessor">.hardware</span><span class="preprocessor">.txt</span>  rec<span class="preprocessor">.motorcycles</span><span class="preprocessor">.txt</span>     sci<span class="preprocessor">.med</span><span class="preprocessor">.txt</span>           talk<span class="preprocessor">.politics</span><span class="preprocessor">.misc</span><span class="preprocessor">.txt</span>
comp<span class="preprocessor">.sys</span><span class="preprocessor">.mac</span><span class="preprocessor">.hardware</span><span class="preprocessor">.txt</span>     rec<span class="preprocessor">.sport</span><span class="preprocessor">.baseball</span><span class="preprocessor">.txt</span>  sci<span class="preprocessor">.space</span><span class="preprocessor">.txt</span>         talk<span class="preprocessor">.religion</span><span class="preprocessor">.misc</span><span class="preprocessor">.txt</span>
[grid@hadoop01 bayes-test-input]$ 
</code></pre><h3 id="上传生成数据到HDFS">上传生成数据到HDFS</h3>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ hadoop fs -mkdir ./<span class="number">20</span>news
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ hadoop fs -put ./data/bayes-train-input ./<span class="number">20</span>news
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ hadoop fs -put ./data/bayes-test-input ./<span class="number">20</span>news    
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ hadoop fs -<span class="keyword">ls</span> ./<span class="number">20</span>news
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">2</span> items
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">05</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/bayes-test-input
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">05</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/bayes-train-input
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ 
</code></pre><h3 id="训练贝叶斯分类器">训练贝叶斯分类器</h3>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> mahout-distribution-<span class="number">0.6</span>]<span class="variable">$bin</span>/mahout trainclassifier -i /user/<span class="keyword">grid</span>/<span class="number">20</span>news/bayes-train-input -o /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel -type cbayes -ng <span class="number">3</span> -<span class="keyword">source</span> hdfs
等着吧，跑个几十分钟
最后的显示信息
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO mapred.JobClient:     Combine output records=<span class="number">4916</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO mapred.JobClient:     Physical <span class="keyword">memory</span> (bytes) <span class="keyword">snapshot</span>=<span class="number">1415671808</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO mapred.JobClient:     Reduce output records=<span class="number">20</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO mapred.JobClient:     Virtual <span class="keyword">memory</span> (bytes) <span class="keyword">snapshot</span>=<span class="number">5063999488</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO mapred.JobClient:     Map output records=<span class="number">66413901</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO common.HadoopUtil: Deleting /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-docCount
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO common.HadoopUtil: Deleting /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-termDocCount
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO common.HadoopUtil: Deleting /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-featureCount
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO common.HadoopUtil: Deleting /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-wordFreq
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO common.HadoopUtil: Deleting /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-tfIdf/trainer-vocabCount
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">53</span> INFO driver.MahoutDriver: Program took <span class="number">2584721</span> ms (Minutes: <span class="number">43.07868333333333</span>)
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> bayes-test-input]$ hadoop fs -<span class="keyword">ls</span> ./<span class="number">20</span>news
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">4</span> items
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">05</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/bayes-test-input
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">55</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/bayes-test-input-output
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">05</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/bayes-train-input
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> bayes-test-input]$ hadoop fs -<span class="keyword">ls</span> ./<span class="number">20</span>news/newsmodel 
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">5</span> items
-rw-r--r--   <span class="number">2</span> <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">30</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/_SUCCESS
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">10</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/_logs
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-tfIdf
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-thetaNormalizer
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">43</span> /user/<span class="keyword">grid</span>/<span class="number">20</span>news/newsmodel/trainer-weights
</code></pre><h3 id="测试贝叶斯分类器">测试贝叶斯分类器</h3>
<pre><code>[grid@hadoop01 data]bin/mahout testclassifier -m /user/grid/<span class="number">20</span>news/newsmodel -d /user/grid/<span class="number">20</span>news/bayes-test-input -<span class="keyword">type</span> cbayes -ng <span class="number">3</span> -source hdfs -<span class="function"><span class="keyword">method</span> <span class="title">mapreduce</span></span>
</code></pre><h4 id="这里报错了，查找原因是JVM分配内存不足">这里报错了，查找原因是JVM分配内存不足</h4>
<pre><code>Caused by: java<span class="preprocessor">.lang</span><span class="preprocessor">.OutOfMemoryError</span>: Java heap space
        at java<span class="preprocessor">.nio</span><span class="preprocessor">.HeapCharBuffer</span>.&lt;init&gt;(HeapCharBuffer<span class="preprocessor">.java</span>:<span class="number">57</span>)
        at java<span class="preprocessor">.nio</span><span class="preprocessor">.CharBuffer</span><span class="preprocessor">.allocate</span>(CharBuffer<span class="preprocessor">.java</span>:<span class="number">331</span>)
        at java<span class="preprocessor">.nio</span><span class="preprocessor">.charset</span><span class="preprocessor">.CharsetDecoder</span><span class="preprocessor">.decode</span>(CharsetDecoder<span class="preprocessor">.java</span>:<span class="number">777</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.hadoop</span><span class="preprocessor">.io</span><span class="preprocessor">.Text</span><span class="preprocessor">.decode</span>(Text<span class="preprocessor">.java</span>:<span class="number">350</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.hadoop</span><span class="preprocessor">.io</span><span class="preprocessor">.Text</span><span class="preprocessor">.decode</span>(Text<span class="preprocessor">.java</span>:<span class="number">327</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.hadoop</span><span class="preprocessor">.io</span><span class="preprocessor">.Text</span><span class="preprocessor">.toString</span>(Text<span class="preprocessor">.java</span>:<span class="number">254</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.common</span><span class="preprocessor">.StringTuple</span><span class="preprocessor">.readFields</span>(StringTuple<span class="preprocessor">.java</span>:<span class="number">143</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.hadoop</span><span class="preprocessor">.io</span><span class="preprocessor">.SequenceFile</span>$Reader<span class="preprocessor">.next</span>(SequenceFile<span class="preprocessor">.java</span>:<span class="number">1898</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.hadoop</span><span class="preprocessor">.io</span><span class="preprocessor">.SequenceFile</span>$Reader<span class="preprocessor">.next</span>(SequenceFile<span class="preprocessor">.java</span>:<span class="number">1938</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.common</span><span class="preprocessor">.iterator</span><span class="preprocessor">.sequencefile</span><span class="preprocessor">.SequenceFileIterator</span><span class="preprocessor">.computeNext</span>(SequenceFileIterator<span class="preprocessor">.java</span>:<span class="number">95</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.common</span><span class="preprocessor">.iterator</span><span class="preprocessor">.sequencefile</span><span class="preprocessor">.SequenceFileIterator</span><span class="preprocessor">.computeNext</span>(SequenceFileIterator<span class="preprocessor">.java</span>:<span class="number">38</span>)
        at <span class="keyword">com</span><span class="preprocessor">.google</span><span class="preprocessor">.common</span><span class="preprocessor">.collect</span><span class="preprocessor">.AbstractIterator</span><span class="preprocessor">.tryToComputeNext</span>(AbstractIterator<span class="preprocessor">.java</span>:<span class="number">141</span>)
        at <span class="keyword">com</span><span class="preprocessor">.google</span><span class="preprocessor">.common</span><span class="preprocessor">.collect</span><span class="preprocessor">.AbstractIterator</span><span class="preprocessor">.hasNext</span>(AbstractIterator<span class="preprocessor">.java</span>:<span class="number">136</span>)
        at <span class="keyword">com</span><span class="preprocessor">.google</span><span class="preprocessor">.common</span><span class="preprocessor">.collect</span><span class="preprocessor">.Iterators</span>$5<span class="preprocessor">.hasNext</span>(Iterators<span class="preprocessor">.java</span>:<span class="number">525</span>)
        at <span class="keyword">com</span><span class="preprocessor">.google</span><span class="preprocessor">.common</span><span class="preprocessor">.collect</span><span class="preprocessor">.ForwardingIterator</span><span class="preprocessor">.hasNext</span>(ForwardingIterator<span class="preprocessor">.java</span>:<span class="number">43</span>)
        at org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.classifier</span><span class="preprocessor">.bayes</span><span class="preprocessor">.SequenceFileModelReader</span><span class="preprocessor">.loadFeatureWeights</span>(SequenceFileModelReader<span class="preprocessor">.java</span>:<span class="number">72</span>)
每个节点修改mapred-site<span class="preprocessor">.xml</span>文件
    [grid@hadoop02 conf]$ cat mapred-site<span class="preprocessor">.xml</span> 
    &lt;?xml version=<span class="string">"1.0"</span>?&gt;
    &lt;?xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;

    &lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;

    &lt;configuration&gt;
            &lt;property&gt;
                    &lt;name&gt;mapred<span class="preprocessor">.job</span><span class="preprocessor">.tracker</span>&lt;/name&gt;
                            &lt;value&gt;hadoop01<span class="preprocessor">.myhadoop</span><span class="preprocessor">.com</span>:<span class="number">9001</span>&lt;/value&gt;
            &lt;/property&gt;
            &lt;property&gt;
                     &lt;name&gt;mapred<span class="preprocessor">.child</span><span class="preprocessor">.java</span><span class="preprocessor">.opts</span>&lt;/name&gt;
                            &lt;value&gt;-Xmx1000m&lt;/value&gt;
            &lt;/property&gt;
    &lt;/configuration&gt;
</code></pre><h3 id="运行成功后">运行成功后</h3>
<pre><code>[grid@hadoop01 data]$ hadoop fs -ls ./<span class="number">20</span>news/
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

Found <span class="number">4</span> items
drwxr-xr-<span class="built_in">x</span>   - grid supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">05</span> /user/grid/<span class="number">20</span>news/bayes-test-input
drwxr-xr-<span class="built_in">x</span>   - grid supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">19</span>:<span class="number">28</span> /user/grid/<span class="number">20</span>news/bayes-test-input-output
drwxr-xr-<span class="built_in">x</span>   - grid supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">05</span> /user/grid/<span class="number">20</span>news/bayes-train-input
drwxr-xr-<span class="built_in">x</span>   - grid supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">18</span>:<span class="number">53</span> /user/grid/<span class="number">20</span>news/newsmodel

运行成功后最后的屏幕信息
Summary 
------------------------------------------------------- 
Correctly Classified Instances          :      <span class="number">18369</span>   <span class="number">97.5621</span>% 
Incorrectly Classified Instances        :        <span class="number">459</span>    <span class="number">2.4379</span>% 
Total Classified Instances              :      <span class="number">18828</span> 

======================================================= 
Confusion Matrix 
------------------------------------------------------- 
a    b    c    d    e    f    g    h    i    j    k    l    m    n    o    p    q    r    s    t    &lt;--Classified as 
<span class="number">994</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">994</span>   a     = rec<span class="preprocessor">.motorcycles</span> 
<span class="number">0</span>    <span class="number">976</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">1</span>     |  <span class="number">980</span>   b     = comp<span class="preprocessor">.windows</span><span class="preprocessor">.x</span> 
<span class="number">7</span>    <span class="number">0</span>    <span class="number">929</span>  <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">940</span>   c     = talk<span class="preprocessor">.politics</span><span class="preprocessor">.mideast</span>
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">905</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>     |  <span class="number">910</span>   d     = talk<span class="preprocessor">.politics</span><span class="preprocessor">.guns</span> 
<span class="number">4</span>    <span class="number">1</span>    <span class="number">4</span>    <span class="number">27</span>   <span class="number">388</span>  <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">5</span>    <span class="number">1</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">2</span>    <span class="number">149</span>  <span class="number">7</span>    <span class="number">2</span>    <span class="number">33</span>   <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">628</span>   e     = talk<span class="preprocessor">.religion</span><span class="preprocessor">.misc</span>
<span class="number">3</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">985</span>  <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">990</span>   f     = rec<span class="preprocessor">.autos</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">993</span>  <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">994</span>   g     = rec<span class="preprocessor">.sport</span><span class="preprocessor">.baseball</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">998</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">999</span>   h     = rec<span class="preprocessor">.sport</span><span class="preprocessor">.hockey</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">956</span>  <span class="number">0</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">1</span>     |  <span class="number">961</span>   i     = comp<span class="preprocessor">.sys</span><span class="preprocessor">.mac</span><span class="preprocessor">.hardware</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">981</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">5</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">987</span>   j     = sci<span class="preprocessor">.space</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">978</span>  <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">1</span>     |  <span class="number">982</span>   k     = comp<span class="preprocessor">.sys</span><span class="preprocessor">.ibm</span><span class="preprocessor">.pc</span><span class="preprocessor">.hardware</span> 
<span class="number">1</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">36</span>   <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">5</span>    <span class="number">0</span>    <span class="number">697</span>  <span class="number">4</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">3</span>    <span class="number">19</span>   <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">775</span>   l     = talk<span class="preprocessor">.politics</span><span class="preprocessor">.misc</span> 
<span class="number">0</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">966</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">1</span>     |  <span class="number">973</span>   m     = comp<span class="preprocessor">.graphics</span> 
<span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">6</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">971</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">0</span>     |  <span class="number">981</span>   n     = sci<span class="preprocessor">.electronics</span> 
<span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">992</span>  <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">1</span>     |  <span class="number">997</span>   o     = soc<span class="preprocessor">.religion</span><span class="preprocessor">.christian</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">988</span>  <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>     |  <span class="number">990</span>   p     = sci<span class="preprocessor">.med</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">2</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">985</span>  <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>     |  <span class="number">991</span>   q     = sci<span class="preprocessor">.crypt</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">1</span>    <span class="number">0</span>    <span class="number">19</span>   <span class="number">0</span>    <span class="number">1</span>    <span class="number">775</span>  <span class="number">0</span>    <span class="number">0</span>     |  <span class="number">799</span>   r     = alt<span class="preprocessor">.atheism</span> 
<span class="number">1</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">3</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">5</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">957</span>  <span class="number">0</span>     |  <span class="number">972</span>   s     = misc<span class="preprocessor">.forsale</span> 
<span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">8</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">6</span>    <span class="number">0</span>    <span class="number">6</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">10</span>   <span class="number">955</span>   |  <span class="number">985</span>   t     = comp<span class="preprocessor">.os</span><span class="preprocessor">.ms</span>-windows<span class="preprocessor">.misc</span> 
</code></pre><p>这个混合矩阵的意思说明： 上述a到t分别是代表了有20类别，这就是我们之前给的20个输入文件，列中的数据说明每个类别中被分配到的字节个数，classified说明应该被分配到的总数<br>    994  0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0   |  994  a     = rec.motorcycles<br>意思为rec.motorcycles 本来是属于 a，有381篇文档被划为了a类，这个是正确的数据，其它的分别表示划到 b~t类中的数目。我们可以看到其正确率为 994/994=1,可见其正确率还是很高的了。</p>
]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="Mahout" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Mahout/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mahout的初步体验]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/08/Hadoop/mahout_1/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/08/Hadoop/mahout_1/</id>
    <published>2014-05-08T00:19:47.000Z</published>
    <updated>2014-05-08T00:37:40.000Z</updated>
    <content type="html"><![CDATA[<h3 id="下载解压Mahout">下载解压Mahout</h3>
<pre><code>[grid@hadoop01 ~]$ ls
access_log<span class="preprocessor">.txt</span>                 Documents                       Music                  Public
apache-ant-<span class="number">1.9</span><span class="number">.3</span>               Downloads                       Pictures               score<span class="preprocessor">.txt</span>
apache-ant-<span class="number">1.9</span><span class="number">.3</span>-bin<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>    hadoop-<span class="number">1.2</span><span class="number">.1</span>                    pig-<span class="number">0.12</span><span class="number">.1</span>             share
apache-hive-<span class="number">0.13</span><span class="number">.0</span>-bin         hadoop-<span class="number">1.2</span><span class="number">.1</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>             pig-<span class="number">0.12</span><span class="number">.1</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>      Templates
apache-hive-<span class="number">0.13</span><span class="number">.0</span>-bin<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>  input                           pig_1398238654807<span class="preprocessor">.log</span>  Videos
Desktop                        mahout-distribution-<span class="number">0.6</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>  pig_1398239586082<span class="preprocessor">.log</span>  workspace
[grid@hadoop01 ~]$ tar -xzvf mahout-distribution-<span class="number">0.6</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>
[grid@hadoop01 ~]$ ls
access_log<span class="preprocessor">.txt</span>                 Downloads                       Pictures               share
apache-ant-<span class="number">1.9</span><span class="number">.3</span>               hadoop-<span class="number">1.2</span><span class="number">.1</span>                    pig-<span class="number">0.12</span><span class="number">.1</span>             Templates
apache-ant-<span class="number">1.9</span><span class="number">.3</span>-bin<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>    hadoop-<span class="number">1.2</span><span class="number">.1</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>             pig-<span class="number">0.12</span><span class="number">.1</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>      Videos
apache-hive-<span class="number">0.13</span><span class="number">.0</span>-bin         input                           pig_1398238654807<span class="preprocessor">.log</span>  workspace
apache-hive-<span class="number">0.13</span><span class="number">.0</span>-bin<span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>  mahout-distribution-<span class="number">0.6</span>         pig_1398239586082<span class="preprocessor">.log</span>
Desktop                        mahout-distribution-<span class="number">0.6</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span>  Public
Documents                      Music                           score<span class="preprocessor">.txt</span>
</code></pre><h3 id="配置环境变量">配置环境变量</h3>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]<span class="variable">$vi</span> .bash_profile 
PATH=<span class="variable">$PATH</span>:/home/<span class="keyword">grid</span>/hadoop-<span class="number">1.2</span><span class="number">.1</span>:/bin:/home/<span class="keyword">grid</span>/pig-<span class="number">0.12</span><span class="number">.1</span>/bin:<span class="variable">$HOME</span>/bin
JAVA_HOME=/usr/jdk1<span class="number">.7</span><span class="number">.0</span>_51
PIG_CLASSPATH=/home/<span class="keyword">grid</span>/hadoop-<span class="number">1.2</span><span class="number">.1</span>/conf/
MAHOUT_HOME=/home/<span class="keyword">grid</span>/mahout-distribution-<span class="number">0.6</span>
MAHOUT_CONF_DIR=/home/<span class="keyword">grid</span>/mahout-distribution-<span class="number">0.6</span>/conf
PATH=<span class="variable">$PATH</span>:<span class="variable">$MAHOUT_HOME</span>/conf:<span class="variable">$MAHOUT_HOME</span>/bin
export MAHOUT_HOME
export MAHOUT_CONF_DIR
export PIG_CLASSPATH
export PATH
export JAVA_HOME
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ <span class="keyword">source</span>  .bash_profile  
</code></pre><h3 id="启动hadoop">启动hadoop</h3>
<h3 id="检验Mohout是否安装成功">检验Mohout是否安装成功</h3>
<pre><code>[grid<span class="variable">@hadoop01</span> mahout-distribution-<span class="number">0</span>.<span class="number">6</span>]<span class="variable">$ </span>bin/mahout 
看到一些算法就<span class="constant">OK</span>了
</code></pre><h3 id="利用Mohout运行一个简单的k-means算法">利用Mohout运行一个简单的k-means算法</h3>
<p><a href="http://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html" target="_blank">关于Kmeans的详解</a></p>
<h4 id="下载数据">下载数据</h4>
<p>下载一个文件synthetic_control.data，<a href="http://archive.ics.uci.edu/ml/databases/synthetic_control/synthetic_control.data" target="_blank">下载地址</a>,并把这个文件放在$MAHOUT_HOME目录下</p>
<h4 id="上传数据">上传数据</h4>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> mahout-distribution-<span class="number">0.6</span>]$ hadoop fs -mkdir testdata
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> mahout-distribution-<span class="number">0.6</span>]$ hadoop fs -put /home/<span class="keyword">grid</span>/mahout-distribution-<span class="number">0.6</span>/synthetic_control.data  testdata
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> mahout-distribution-<span class="number">0.6</span>]$ hadoop fs -<span class="keyword">ls</span>  ./testdata
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">1</span> items
-rw-r--r--   <span class="number">2</span> <span class="keyword">grid</span> supergroup     <span class="number">288374</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">16</span>:<span class="number">49</span> /user/<span class="keyword">grid</span>/testdata/synthetic_control.data
</code></pre><h4 id="运行k-means算法">运行k-means算法</h4>
<pre><code>[grid@hadoop01 mahout-distribution-<span class="number">0.6</span>]$ mahout org<span class="preprocessor">.apache</span><span class="preprocessor">.mahout</span><span class="preprocessor">.clustering</span><span class="preprocessor">.syntheticcontrol</span><span class="preprocessor">.kmeans</span><span class="preprocessor">.Job</span>
等待一会
最后屏幕刷出结果（部分）
<span class="number">1.0</span> : [distance=<span class="number">28.040983886281218</span>]: [<span class="number">30.461</span>, <span class="number">29.172</span>, <span class="number">32.510</span>, <span class="number">29.727</span>, <span class="number">23.834</span>, <span class="number">26.091</span>, <span class="number">23.735</span>, <span class="number">23.111</span>, <span class="number">31.726</span>, <span class="number">22.930</span>, <span class="number">31.051</span>, <span class="number">23.321</span>, <span class="number">27.188</span>, <span class="number">18.231</span>, <span class="number">22.951</span>, <span class="number">21.944</span>, <span class="number">25.388</span>, <span class="number">26.809</span>, <span class="number">20.733</span>, <span class="number">16.576</span>, <span class="number">23.558</span>, <span class="number">20.733</span>, <span class="number">18.346</span>, <span class="number">24.153</span>, <span class="number">16.649</span>, <span class="number">16.234</span>, <span class="number">17.985</span>, <span class="number">11.772</span>, <span class="number">19.873</span>, <span class="number">19.622</span>, <span class="number">19.365</span>, <span class="number">14.608</span>, <span class="number">11.265</span>, <span class="number">20.604</span>, <span class="number">11.180</span>, <span class="number">18.643</span>, <span class="number">14.246</span>, <span class="number">10.830</span>, <span class="number">7.235</span>, <span class="number">10.194</span>, <span class="number">16.731</span>, <span class="number">11.470</span>, <span class="number">7.311</span>, <span class="number">10.611</span>, <span class="number">6.924</span>, <span class="number">3.440</span>, <span class="number">9.465</span>, <span class="number">4.764</span>, <span class="number">2.838</span>, <span class="number">8.807</span>, <span class="number">1.960</span>, <span class="number">2.864</span>, <span class="number">6.728</span>, <span class="number">0.369</span>, <span class="number">1.374</span>, -<span class="number">0.167</span>, <span class="number">2.125</span>, <span class="number">8.306</span>, <span class="number">4.908</span>, -<span class="number">0.432</span>]
        <span class="number">1.0</span> : [distance=<span class="number">26.945992695091952</span>]: [<span class="number">30.817</span>, <span class="number">28.079</span>, <span class="number">24.628</span>, <span class="number">23.933</span>, <span class="number">28.660</span>, <span class="number">25.704</span>, <span class="number">27.501</span>, <span class="number">23.513</span>, <span class="number">30.377</span>, <span class="number">27.595</span>, <span class="number">22.938</span>, <span class="number">26.684</span>, <span class="number">25.208</span>, <span class="number">26.834</span>, <span class="number">22.931</span>, <span class="number">17.732</span>, <span class="number">17.544</span>, <span class="number">24.167</span>, <span class="number">25.602</span>, <span class="number">19.269</span>, <span class="number">14.978</span>, <span class="number">17.223</span>, <span class="number">18.962</span>, <span class="number">22.281</span>, <span class="number">17.035</span>, <span class="number">23.789</span>, <span class="number">14.878</span>, <span class="number">18.113</span>, <span class="number">10.981</span>, <span class="number">11.661</span>, <span class="number">14.331</span>, <span class="number">19.942</span>, <span class="number">11.175</span>, <span class="number">10.714</span>, <span class="number">15.675</span>, <span class="number">15.468</span>, <span class="number">16.010</span>, <span class="number">14.972</span>, <span class="number">15.101</span>, <span class="number">15.131</span>, <span class="number">15.154</span>, <span class="number">10.492</span>, <span class="number">14.754</span>, <span class="number">5.222</span>, <span class="number">5.393</span>, <span class="number">13.606</span>, <span class="number">11.775</span>, <span class="number">6.307</span>, <span class="number">3.370</span>, <span class="number">10.107</span>, <span class="number">7.779</span>, <span class="number">10.209</span>, <span class="number">1.493</span>, <span class="number">4.822</span>, <span class="number">0.019</span>, <span class="number">8.019</span>, -<span class="number">0.279</span>, -<span class="number">0.049</span>, <span class="number">5.757</span>, <span class="number">2.718</span>]
        <span class="number">1.0</span> : [distance=<span class="number">25.05284328269594</span>]: [<span class="number">31.347</span>, <span class="number">28.245</span>, <span class="number">34.275</span>, <span class="number">29.885</span>, <span class="number">30.573</span>, <span class="number">32.373</span>, <span class="number">24.031</span>, <span class="number">24.057</span>, <span class="number">24.099</span>, <span class="number">23.777</span>, <span class="number">28.993</span>, <span class="number">29.853</span>, <span class="number">26.485</span>, <span class="number">29.245</span>, <span class="number">28.145</span>, <span class="number">22.528</span>, <span class="number">20.390</span>, <span class="number">20.570</span>, <span class="number">27.921</span>, <span class="number">18.786</span>, <span class="number">22.144</span>, <span class="number">20.163</span>, <span class="number">17.616</span>, <span class="number">19.541</span>, <span class="number">20.342</span>, <span class="number">22.061</span>, <span class="number">21.358</span>, <span class="number">23.951</span>, <span class="number">13.447</span>, <span class="number">12.974</span>, <span class="number">18.406</span>, <span class="number">17.349</span>, <span class="number">17.425</span>, <span class="number">11.041</span>, <span class="number">14.912</span>, <span class="number">10.147</span>, <span class="number">16.731</span>, <span class="number">9.845</span>, <span class="number">14.840</span>, <span class="number">18.283</span>, <span class="number">18.426</span>, <span class="number">10.059</span>, <span class="number">16.760</span>, <span class="number">14.187</span>, <span class="number">14.301</span>, <span class="number">14.277</span>, <span class="number">12.823</span>, <span class="number">15.574</span>, <span class="number">10.789</span>, <span class="number">10.957</span>, <span class="number">8.361</span>, <span class="number">4.116</span>, <span class="number">3.732</span>, <span class="number">3.508</span>, <span class="number">2.288</span>, <span class="number">9.768</span>, <span class="number">9.661</span>, <span class="number">2.183</span>, <span class="number">6.933</span>, <span class="number">4.670</span>]
        <span class="number">1.0</span> : [distance=<span class="number">25.150872291523466</span>]: [<span class="number">26.273</span>, <span class="number">31.229</span>, <span class="number">29.741</span>, <span class="number">34.208</span>, <span class="number">33.329</span>, <span class="number">33.610</span>, <span class="number">31.072</span>, <span class="number">22.530</span>, <span class="number">28.587</span>, <span class="number">21.130</span>, <span class="number">23.557</span>, <span class="number">28.078</span>, <span class="number">27.546</span>, <span class="number">25.825</span>, <span class="number">18.454</span>, <span class="number">25.903</span>, <span class="number">24.448</span>, <span class="number">24.003</span>, <span class="number">23.199</span>, <span class="number">22.158</span>, <span class="number">17.711</span>, <span class="number">23.922</span>, <span class="number">20.550</span>, <span class="number">15.913</span>, <span class="number">17.699</span>, <span class="number">13.883</span>, <span class="number">17.494</span>, <span class="number">16.360</span>, <span class="number">20.679</span>, <span class="number">11.790</span>, <span class="number">18.424</span>, <span class="number">10.493</span>, <span class="number">11.001</span>, <span class="number">17.994</span>, <span class="number">11.673</span>, <span class="number">11.014</span>, <span class="number">11.437</span>, <span class="number">16.197</span>, <span class="number">16.435</span>, <span class="number">7.331</span>, <span class="number">15.089</span>, <span class="number">16.779</span>, <span class="number">14.449</span>, <span class="number">9.551</span>, <span class="number">11.331</span>, <span class="number">10.564</span>, <span class="number">5.992</span>, <span class="number">8.369</span>, <span class="number">11.402</span>, <span class="number">7.865</span>, <span class="number">2.526</span>, <span class="number">4.632</span>, <span class="number">9.335</span>, <span class="number">6.772</span>, <span class="number">3.018</span>, <span class="number">3.675</span>, <span class="number">0.455</span>, <span class="number">5.362</span>, <span class="number">6.945</span>, <span class="number">7.901</span>]
        <span class="number">1.0</span> : [distance=<span class="number">29.28744984720542</span>]: [<span class="number">26.148</span>, <span class="number">30.828</span>, <span class="number">27.122</span>, <span class="number">31.797</span>, <span class="number">26.812</span>, <span class="number">24.681</span>, <span class="number">31.379</span>, <span class="number">22.047</span>, <span class="number">22.034</span>, <span class="number">24.293</span>, <span class="number">30.875</span>, <span class="number">22.493</span>, <span class="number">30.889</span>, <span class="number">19.167</span>, <span class="number">19.199</span>, <span class="number">27.696</span>, <span class="number">17.370</span>, <span class="number">27.648</span>, <span class="number">23.842</span>, <span class="number">26.493</span>, <span class="number">23.635</span>, <span class="number">23.577</span>, <span class="number">20.884</span>, <span class="number">18.786</span>, <span class="number">18.898</span>, <span class="number">18.091</span>, <span class="number">22.021</span>, <span class="number">20.674</span>, <span class="number">23.890</span>, <span class="number">12.646</span>, <span class="number">18.448</span>, <span class="number">17.732</span>, <span class="number">17.897</span>, <span class="number">14.679</span>, <span class="number">13.598</span>, <span class="number">12.689</span>, <span class="number">19.832</span>, <span class="number">12.489</span>, <span class="number">9.745</span>, <span class="number">18.990</span>, <span class="number">18.820</span>, <span class="number">16.517</span>, <span class="number">12.024</span>, <span class="number">14.131</span>, <span class="number">13.394</span>, <span class="number">15.473</span>, <span class="number">11.140</span>, <span class="number">5.094</span>, <span class="number">15.265</span>, <span class="number">14.651</span>, <span class="number">8.299</span>, <span class="number">3.163</span>, <span class="number">12.039</span>, <span class="number">4.893</span>, <span class="number">7.552</span>, <span class="number">12.315</span>, <span class="number">9.581</span>, <span class="number">5.462</span>, <span class="number">2.984</span>, <span class="number">8.981</span>]
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">13</span> INFO clustering<span class="preprocessor">.ClusterDumper</span>: Wrote <span class="number">6</span> clusters
<span class="number">14</span>/<span class="number">05</span>/<span class="number">07</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">13</span> INFO driver<span class="preprocessor">.MahoutDriver</span>: Program took <span class="number">456695</span> ms (Minutes: <span class="number">7.611583333333333</span>)
</code></pre><h4 id="看到一系列clusters，就算成功">看到一系列clusters，就算成功</h4>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ hadoop fs -<span class="keyword">ls</span> ./output
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">13</span> items
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">10</span> /user/<span class="keyword">grid</span>/output/clusteredPoints
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">03</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">0</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">03</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">1</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">09</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">10</span>-final
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">04</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">2</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">05</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">3</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">05</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">4</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">06</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">5</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">07</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">6</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">07</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">7</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">08</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">8</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">08</span> /user/<span class="keyword">grid</span>/output/clusters-<span class="number">9</span>
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">07</span> <span class="number">17</span>:<span class="number">03</span> /user/<span class="keyword">grid</span>/output/data
[<span class="keyword">grid</span><span class="variable">@hadoop01</span> ~]$ 
</code></pre>]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="Mahout" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Mahout/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux下进程与线程]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/process/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/04/操作系统/process/</id>
    <published>2014-05-04T12:12:50.000Z</published>
    <updated>2014-05-04T12:49:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="进程">进程</h3>
<p>进程是程序执行时的一个实例，即它是程序已经执行到课中程度的数据结构的汇集。从内核的观点看，进程的目的就是担当分配系统资源（CPU时间、内存等）的基本单位。</p>
<h3 id="线程">线程</h3>
<p>线程是进程的一个执行流，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个进程由几个线程组成（拥有很多相对独立的执行流的用户程序共享应用程序的大部分数据结构），线程与同属一个进程的其他的线程共享进程所拥有的全部资源。</p>
<p>进程——资源分配的最小单位，线程——程序执行的最小单位</p>
<h4 id="例如：">例如：</h4>
<p>假设用户启动了一个窗口中的数据库应用程序，操作系统就将对数据库的调用表示为一个进程。假设用户要从数据库中产生一份工资单报表，并传到一个文件中，这是一个子任务；在产生工资单报表的过程中，用户又可以输人数据库查询请求，这又是一个子任务。这样，操作系统则把每一个请求――工资单报表和新输人的数据查询表示为数据库进程中的独立的线程。</p>
<p>线程可以在处理器上独立调度执行，这样，在多处理器环境下就允许几个线程各自在单独处理器上进行。操作系统提供线程就是为了方便而有效地实现这种并发性。</p>
<h3 id="引入线程的好处">引入线程的好处</h3>
<p>易于调度。</p>
<p>提高并发性。通过线程可方便有效地实现并发性。进程可创建多个线程来执行同一程序的不同部分。</p>
<p>开销少。创建线程比创建进程要快，所需开销很少。</p>
<p>利于充分发挥多处理器的功能。通过创建多线程进程，每个线程在一个处理器上运行，从而实现应用程序的并发性，使每个处理器都得到充分运行。</p>
<h3 id="线程的基本状态">线程的基本状态</h3>
<p>就绪：调用线程的start方法后线程进入就绪状态</p>
<p>阻塞：线程调度系统将就绪状态的线程转为运行状态</p>
<p>运行：遇到synchronized语句时，由运行状态转为阻塞</p>
<p>结束：当线程关联的代码执行完后，线程变为结束状态</p>
<h3 id="进程与线程的区别">进程与线程的区别</h3>
<p>进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。</p>
<p>总的来说就是：进程有独立的地址空间，线程没有单独的地址空间（同一进程内的线程共享进程的地址空间）。</p>
<h3 id="多线程有几种实现方法">多线程有几种实现方法</h3>
<p>多线程有两种实现方法。一种是继承Thread类，一种是实现Runnable接口。<br>同步有两种方法。一种同步方法，一种同步代码。分别是synchronized，wait与notify</p>
<h3 id="多线程同步和互斥异同">多线程同步和互斥异同</h3>
<p>线程同步是指线程之间所具有的一种制约关系，一个线程的执行依赖另一个线程的消息，当它没有得到另一个线程的消息时应等待，直到消息到达时才被唤醒。</p>
<p>线程互斥是指对于共享的进程系统资源，在各单个线程访问时的排它性。当有若干个线程都要使用某一共享资源时，任何时刻最多只允许一个线程去使用，其它要使用该资源的线程必须等待，直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步。</p>
]]></content>
    
    
      <category term="进程与线程" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="操作系统" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hive与Mysql本地安装]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/04/24/Hadoop/hadoop_hive&mysql/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/04/24/Hadoop/hadoop_hive&mysql/</id>
    <published>2014-04-24T10:49:28.000Z</published>
    <updated>2014-04-24T11:59:03.000Z</updated>
    <content type="html"><![CDATA[<h5 id="解压hive包">解压hive包</h5>
<pre><code>[grid<span class="variable">@hadoop01</span> ~]<span class="variable">$ </span>tar -xzvf apache-hive-<span class="number">0</span>.<span class="number">13.0</span>-bin.tar.gz 
</code></pre><h5 id="配置环境变量">配置环境变量</h5>
<pre><code>[root@hadoop01 apache-hive-<span class="number">0.13</span>.<span class="number">0</span>-bin]<span class="comment"># cat /etc/profile</span>
<span class="keyword">export</span> JAVA_HOME=/usr/jdk1.<span class="number">7.0</span>_51
<span class="keyword">export</span> HADOOP_FREFIX=/home/grid/hadoop-<span class="number">1.2</span>.<span class="number">1</span>
<span class="keyword">export</span> HADOOP_COMMON_HOME=<span class="variable">${HADOOP_FREFIX}</span>
<span class="keyword">export</span> HADOOP_CONF_DIR=<span class="variable">${HADOOP_FREFIX}</span>/conf
<span class="keyword">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/lib/tools.jar
<span class="keyword">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">${HADOOP_FREFIX}</span>/bin:<span class="variable">${HADOOP_FREFIX}</span>/sbin:<span class="variable">$PATH</span>
<span class="keyword">export</span> HADOOP_HOME=/home/grid/hadoop-<span class="number">1.2</span>.<span class="number">1</span>
<span class="keyword">export</span> PATH=/home/grid/apache-ant-<span class="number">1.9</span>.<span class="number">3</span>/bin:<span class="variable">$PATH</span>
<span class="keyword">export</span> HIVE_HOME=/home/grid/apache-hive-<span class="number">0.13</span>.<span class="number">0</span>-bin
<span class="keyword">export</span> PATH=<span class="variable">$HIVE_HOME</span>/bin:<span class="variable">$PATH</span>
[root@hadoop01 apache-hive-<span class="number">0.13</span>.<span class="number">0</span>-bin]<span class="comment"># source  /etc/profile</span>
</code></pre><h5 id="更改配置文件">更改配置文件</h5>
<pre><code>[grid@hadoop01 conf]$ cp hive-env.sh.template  hive-env.sh
[grid@hadoop01 conf]$ vi hive-env.sh
HADOOP_HOME=/home/grid/hadoop-1.2.1
[grid@hadoop01 conf]$ cp hive-default.xml.template hive-site.xml
<span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>/home/grid/apache-hive-0.13.0-bin/warehouse<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
<span class="tag">&lt;<span class="title">description</span>&gt;</span>location of default database for the warehouse<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;<span class="title">property</span>&gt;</span>
  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.exec.scratchdir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
  <span class="tag">&lt;<span class="title">value</span>&gt;</span>/home/grid/apache-hive-0.13.0-bin/temp<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;<span class="title">description</span>&gt;</span>Scratch space for Hive jobs<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span>&gt;</span>
          <span class="tag">&lt;<span class="title">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
         <span class="tag">&lt;<span class="title">value</span>&gt;</span> jdbc:mysql://localhost:3306/hive?createDatabaseIfNotExist=true <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span>&gt;</span>
         <span class="tag">&lt;<span class="title">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
         <span class="tag">&lt;<span class="title">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span>&gt;</span>
         <span class="tag">&lt;<span class="title">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
          <span class="tag">&lt;<span class="title">value</span>&gt;</span>hive<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">property</span>&gt;</span>
          <span class="tag">&lt;<span class="title">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
          <span class="tag">&lt;<span class="title">value</span>&gt;</span>hive <span class="tag">&lt;/<span class="title">value</span>&gt;</span>
<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;<span class="title">property</span>&gt;</span>
<span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
<span class="tag">&lt;<span class="title">value</span>&gt;</span>false<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
<span class="tag">&lt;<span class="title">description</span>&gt;</span>
<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
<span class="tag">&lt;/<span class="title">property</span>&gt;</span>
</code></pre><h6 id="这里有技巧">这里有技巧</h6>
<p>例如在一个文件里面有几千行，这样查找：</p>
<pre><code>[grid@hadoop01 conf]$ cat hive-site<span class="preprocessor">.xml</span> |grep -n hive<span class="preprocessor">.metastore</span><span class="preprocessor">.schema</span><span class="preprocessor">.verification</span> 
<span class="number">2371</span>:  &lt;name&gt;hive<span class="preprocessor">.metastore</span><span class="preprocessor">.schema</span><span class="preprocessor">.verification</span>&lt;/name&gt;
vi  <span class="keyword">set</span> nu显示行号
</code></pre><h5 id="加入连接器jar包">加入连接器jar包</h5>
<p>lib文件夹缺少mysql的连接器mysql-connector-java-5.1.25-bin.jar,下载地址<a href="http://download.csdn.net/detail/xqj198404/6338973" target="_blank">http://download.csdn.net/detail/xqj198404/6338973</a> 将其放到hive的lib目录下</p>
<h5 id="安装mysql">安装mysql</h5>
<p>查看系统是否安装了MySQL，使用命令：</p>
<pre><code><span class="preprocessor">#rpm -qa | grep mysql </span>
</code></pre><h5 id="卸载已安装的MySQL">卸载已安装的MySQL</h5>
<p>卸载mysql命令如下：</p>
<pre><code><span class="variable">#rpm</span> <span class="attribute">-e</span> <span class="subst">--</span>nodeps  mysql<span class="attribute">-libs</span><span class="subst">-</span><span class="number">5.1</span><span class="number">.61</span><span class="subst">-</span><span class="number">4.</span>el6<span class="built_in">.</span>x86_64
要将 /<span class="built_in">var</span>/lib/mysql文件夹下的所有文件都删除干净
</code></pre><h5 id="安装MySQL">安装MySQL</h5>
<p>安装顺序: 先安装服务器,然后再安装客户端。找到安装包所在位置，直接安装即可。</p>
<pre><code>[root<span class="variable">@hadoop01</span> soft]<span class="comment"># rpm -ivh MySQL-server-5.5.37-1.linux2.6.x86_64.rpm </span>
[root<span class="variable">@hadoop01</span> soft]<span class="comment"># rpm -ivh MySQL-client-5.5.37-1.linux2.6.x86_64.rpm </span>
[root<span class="variable">@hadoop01</span> soft]<span class="comment"># /etc/init.d/mysql start</span>
<span class="constant">Starting</span> <span class="constant">MySQL</span>...                                          [  <span class="constant">OK</span>  ]
</code></pre><p>修改mysql配置文件并重启MySQL,安装完成后在/usr/share/mysql目录中会有一个mysql的启动脚本mysql.server及示例配置文件等(如my-huge.cnf、my-large.cnf、my-medium.cnf)，拷贝一个示例配置文件作为mysql的配置文件：</p>
<pre><code>cp /usr/share/mysql/<span class="keyword">my</span>-medium.cnf /etc/<span class="keyword">my</span>.cnf
[root<span class="variable">@hadoop01</span> mysql]<span class="comment"># /etc/init.d/mysql restart</span>
Shutting down MySQL.                                       [  OK  ]
Starting MySQL...                                          [  OK  ]
[root<span class="variable">@hadoop01</span> mysql]<span class="comment"># </span>
</code></pre><p>登陆mysql，下面给root用户设置密码</p>
<pre><code>/usr/bin/mysqladmin <span class="attribute">-u</span> root password <span class="number">123456</span> 
mysql <span class="attribute">-u</span> root <span class="attribute">-p</span> 
Enter password: (输入修改后的密码<span class="number">123456</span>) <span class="built_in">.</span>
mysql<span class="subst">&gt;</span>
</code></pre><h5 id="创建hive元数据库及创建hive用户并授权">创建hive元数据库及创建hive用户并授权</h5>
<h6 id="创建hive元数据库">创建hive元数据库</h6>
<pre><code>mysql&gt; <span class="keyword">create</span> database hive;
</code></pre><h6 id="对hive用户并授权,注意,此处的密码必须和hive-site-xml的javax-jdo-option-ConnectionPassword的密码相一致">对hive用户并授权,注意,此处的密码必须和hive-site.xml的javax.jdo.option.ConnectionPassword的密码相一致</h6>
<pre><code>mysql<span class="subst">&gt;</span> grant <span class="literal">all</span> privileges <span class="keyword">on</span> hive<span class="built_in">.</span><span class="subst">*</span> <span class="keyword">to</span> <span class="string">'hive'</span>@<span class="string">'localhost'</span>  IDENTIFIED <span class="keyword">BY</span> <span class="string">"hive"</span>;
mysql<span class="subst">&gt;</span> GRANT <span class="literal">ALL</span>  PRIVILEGES <span class="keyword">ON</span> hive<span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'hive'</span>@<span class="string">'%'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'hive'</span>;
mysql<span class="subst">&gt;</span> GRANT <span class="literal">ALL</span>  PRIVILEGES <span class="keyword">ON</span> hive<span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'hive'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'hive'</span>;
mysql<span class="subst">&gt;</span> GRANT <span class="literal">ALL</span>  PRIVILEGES <span class="keyword">ON</span> hive<span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'hive'</span>@<span class="string">'127.0.0.1'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'hive'</span>;
mysql<span class="subst">&gt;</span> GRANT <span class="literal">ALL</span>  PRIVILEGES <span class="keyword">ON</span> hived<span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'hive'</span>@<span class="string">'192.168.255.151'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'hive'</span>;
mysql<span class="subst">&gt;</span>flush privileges;
</code></pre><h5 id="查看hive用户是否已创建成功">查看hive用户是否已创建成功</h5>
<pre><code>mysql&gt; use mysql;
Database changed
<span class="header">mysql&gt;  select Host,User,Password from user;
+-----------+------+-------------------------------------------+</span>
<span class="header">| Host      | User | Password                                  |
+-----------+------+-------------------------------------------+</span>
| %         | root | <span class="strong">*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |
| master    | root |                                           |
| 127.0.0.1 | root |                                           |
| ::1       | root |                                           |
| localhost | hive | *</span>4DF1D66463C18D44E3B001A8FB1BBFBEA13E27FC |
<span class="code">+-----------+</span>------<span class="code">+-------------------------------------------+</span>
5 rows in set (0.00 sec)
</code></pre><h5 id="配置hadoop的hadoop-env-sh文件">配置hadoop的hadoop-env.sh文件</h5>
<p>增加$HADOOP_CLASSPATH,要不然启动hive时会出错</p>
<pre><code>export <span class="constant">HADOOP_CLASSPATH</span>=<span class="variable">$HADOOP_CLASSPATH</span><span class="symbol">:/home/grid/hadoop-</span><span class="number">1.2</span>.<span class="number">1</span>/myclass
</code></pre><p>Hive调试技巧,打开调试可以看到详细错误信息</p>
<pre><code>./hive -hiveconf hive<span class="preprocessor">.root</span><span class="preprocessor">.logger</span>=DEBUG,console  
</code></pre><p>Hive简单操作</p>
<pre><code>[grid@hadoop01 apache-hive-<span class="number">0.13</span><span class="number">.0</span>-bin]$ bin/hive
<span class="number">14</span>/<span class="number">04</span>/<span class="number">24</span> <span class="number">16</span>:<span class="number">24</span>:<span class="number">23</span> WARN conf.HiveConf: DEPRECATED: hive.metastore.ds.retry.* no longer has any effect.  <span class="keyword">Use</span> hive.hmshandler.retry.* instead
Logging initialized using <span class="keyword">configuration</span> <span class="keyword">in</span> jar:<span class="keyword">file</span>:/home/grid/apache-hive-<span class="number">0.13</span><span class="number">.0</span>-bin/lib/hive-common-<span class="number">0.13</span><span class="number">.0</span>.jar!/hive-log4j.properties
hive&gt; show tables;
OK
<span class="typename">Time</span> taken: <span class="number">2.062</span> seconds
hive&gt; create table hivetest(id int,name <span class="typename">string</span>);
OK
<span class="typename">Time</span> taken: <span class="number">0.962</span> seconds
hive&gt; show tables;
OK
hivetest
<span class="typename">Time</span> taken: <span class="number">0.084</span> seconds, Fetched: <span class="number">1</span> row(s)
hive&gt; <span class="keyword">select</span> count(*) from hivetest;
Total jobs = <span class="number">1</span>
Launching Job <span class="number">1</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">1</span>
Number <span class="keyword">of</span> reduce tasks determined at compile <span class="typename">time</span>: <span class="number">1</span>
<span class="keyword">In</span> order <span class="keyword">to</span> change the average load <span class="keyword">for</span> a reducer (<span class="keyword">in</span> bytes):
  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;
<span class="keyword">In</span> order <span class="keyword">to</span> limit the maximum number <span class="keyword">of</span> reducers:
  set hive.exec.reducers.max=&lt;number&gt;
<span class="keyword">In</span> order <span class="keyword">to</span> set a <span class="keyword">constant</span> number <span class="keyword">of</span> reducers:
  set mapred.reduce.tasks=&lt;number&gt;
Starting Job = job_201404241623_0001, Tracking URL = http://hadoop01.myhadoop.com:<span class="number">50030</span>/jobdetails.jsp?jobid=job_201404241623_0001
Kill Command = /home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>/libexec/../bin/hadoop job  -kill job_201404241623_0001
Hadoop job information <span class="keyword">for</span> Stage-<span class="number">1</span>: number <span class="keyword">of</span> mappers: <span class="number">0</span>; number <span class="keyword">of</span> reducers: <span class="number">1</span>
<span class="number">2014</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">53</span>,<span class="number">414</span> Stage-<span class="number">1</span> <span class="keyword">map</span> = <span class="number">0</span>%,  reduce = <span class="number">0</span>%
<span class="number">2014</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">59</span>,<span class="number">466</span> Stage-<span class="number">1</span> <span class="keyword">map</span> = <span class="number">0</span>%,  reduce = <span class="number">100</span>%, Cumulative CPU <span class="number">1.27</span> sec
<span class="number">2014</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">04</span>,<span class="number">511</span> Stage-<span class="number">1</span> <span class="keyword">map</span> = <span class="number">100</span>%,  reduce = <span class="number">100</span>%, Cumulative CPU <span class="number">1.27</span> sec
MapReduce Total cumulative CPU <span class="typename">time</span>: <span class="number">1</span> seconds <span class="number">270</span> msec
Ended Job = job_201404241623_0001
MapReduce Jobs Launched: 
Job <span class="number">0</span>: Reduce: <span class="number">1</span>   Cumulative CPU: <span class="number">1.27</span> sec   HDFS Read: <span class="number">0</span> HDFS Write: <span class="number">2</span> SUCCESS
Total MapReduce CPU <span class="typename">Time</span> Spent: <span class="number">1</span> seconds <span class="number">270</span> msec
OK
<span class="number">0</span>
<span class="typename">Time</span> taken: <span class="number">29.117</span> seconds, Fetched: <span class="number">1</span> row(s)
hive&gt; desc hivetest;
OK
id                      int                                         
name                    <span class="typename">string</span>                                      
<span class="typename">Time</span> taken: <span class="number">0.376</span> seconds, Fetched: <span class="number">2</span> row(s)
hive&gt; 
</code></pre><p>以hive用户进入mysql    </p>
<pre><code>mysql &gt; <span class="keyword">select</span> * <span class="keyword">from</span> tbls 查看元数据
</code></pre>]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="Hive" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hive/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
</feed>
