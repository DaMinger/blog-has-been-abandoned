<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[DaMinger's blog]]></title>
  <subtitle><![CDATA[信春哥，系统稳，闭眼上线不回滚]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://github.com/DaMinger/DaMinger.github.io.git/"/>
  <updated>2014-05-21T13:12:00.259Z</updated>
  <id>https://github.com/DaMinger/DaMinger.github.io.git/</id>
  
  <author>
    <name><![CDATA[DaMinger]]></name>
    <email><![CDATA[564400632@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Max Points on a Line]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/maxpoints/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/数据结构与算法/LeetCode/maxpoints/</id>
    <published>2014-05-21T12:56:43.000Z</published>
    <updated>2014-05-21T13:10:28.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Max Points <span class="function_start"><span class="keyword">on</span></span> a Line Total 

Given n points <span class="function_start"><span class="keyword">on</span></span> a <span class="number">2</span>D plane, find <span class="keyword">the</span> maximum <span class="type">number</span> <span class="keyword">of</span> points <span class="keyword">that</span> lie <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> same straight line.
</code></pre><p>计算同一直线上最多的点数，思路：枚举+计算斜率，map存(斜率，点数)</p>
<h4 id="解法">解法</h4>
<pre><code>import java.util.HashMap;
import java.util.Map;

class Point {
     <span class="keyword">int</span> x;
     <span class="keyword">int</span> y;
     Point() { x = <span class="number">0</span>; y = <span class="number">0</span>; }
     Point(<span class="keyword">int</span> a, <span class="keyword">int</span> b) { x = a; y = b; }
 }
<span class="comment">//枚举，计算斜率，注意重复的点</span>
<span class="keyword">public</span> <span class="keyword">class</span> test {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxPoints</span>(Point[] points){
        <span class="keyword">int</span> maxPoints = <span class="number">0</span>;
        <span class="keyword">int</span> curPoints = <span class="number">0</span>;
        <span class="keyword">int</span> samePoint = <span class="number">0</span>;
        <span class="keyword">double</span> slope = <span class="number">0</span>;
        <span class="comment">//map&lt;slope,curPoints&gt;</span>
        Map&lt;Double ,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Double,Integer&gt;();
        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;points.length;++i){
            curPoints = <span class="number">1</span>;
            samePoint = <span class="number">0</span>;
            map.clear();
            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;points.length;++j){
                <span class="comment">//same point</span>
                <span class="keyword">if</span>(points[j].x==points[i].x&amp;&amp;points[j].y==points[i].y){
                    ++samePoint;
                }<span class="keyword">else</span>{
                    <span class="comment">//如果两点X坐标相同，斜率无穷大</span>
                    <span class="keyword">if</span>(points[j].x != points[i].x){
                        <span class="comment">//注意0除以负数，得-0.0  计算器补码运算，所以为保持斜率一致，</span>
                        <span class="comment">//后面加上0.0，防止出现-0.0</span>
                        slope = <span class="number">1.0</span>*(points[j].y-points[i].y)/(points[j].x-points[i].x)+<span class="number">0.0</span>;
                    }<span class="keyword">else</span>{
                        slope = Double.MAX_VALUE;
                    }
                    <span class="keyword">if</span>(map.containsKey(slope)){
                        map.put(slope, map.<span class="keyword">get</span>(slope)+<span class="number">1</span>);
                    }<span class="keyword">else</span> {
                        map.put(slope, <span class="number">2</span>);
                    }
                    <span class="comment">//暂时计算当前在一条线的最多的点的个数</span>
                    <span class="keyword">if</span>(map.<span class="keyword">get</span>(slope)&gt;curPoints){
                        curPoints =map.<span class="keyword">get</span>(slope);
                    }
                }
            }
            curPoints +=samePoint;
            <span class="keyword">if</span>(curPoints &gt;maxPoints){
                maxPoints = curPoints;
            }
        }
        <span class="keyword">return</span> maxPoints;
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        Point[] points =<span class="keyword">new</span> Point[]{<span class="keyword">new</span> Point(<span class="number">2</span>,<span class="number">3</span>),<span class="keyword">new</span> Point(<span class="number">3</span>,<span class="number">3</span>),<span class="keyword">new</span> Point(-<span class="number">5</span>,<span class="number">3</span>)};
        System.<span class="keyword">out</span>.println(maxPoints(points));
    <span class="comment">//    System.out.println(1.0*(3-3)/(-3-3)+0.0);</span>
    }

}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Evaluate Reverse Polish Notation]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/polishnotation/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/数据结构与算法/LeetCode/polishnotation/</id>
    <published>2014-05-21T12:55:41.000Z</published>
    <updated>2014-05-21T13:08:51.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Evaluate the value <span class="keyword">of</span> an arithmetic expression <span class="keyword">in</span> Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer <span class="keyword">or</span> another expression.

Some <span class="attribute">examples</span>:
  [<span class="string">"2"</span>, <span class="string">"1"</span>, <span class="string">"+"</span>, <span class="string">"3"</span>, <span class="string">"*"</span>]<span class="function"> -&gt;</span> <span class="function"><span class="params">((<span class="number">2</span> + <span class="number">1</span>) * <span class="number">3</span>)</span> -&gt;</span> <span class="number">9</span>
  [<span class="string">"4"</span>, <span class="string">"13"</span>, <span class="string">"5"</span>, <span class="string">"/"</span>, <span class="string">"+"</span>]<span class="function"> -&gt;</span> <span class="function"><span class="params">(<span class="number">4</span> + (<span class="number">13</span> / <span class="number">5</span>))</span> -&gt;</span> <span class="number">6</span>
</code></pre><p>波兰表达式，用栈就OK了</p>
<h4 id="解法">解法</h4>
<pre><code>import java.util.Stack;
<span class="comment">//波兰表达式 用栈不解释</span>
<span class="keyword">public</span> <span class="keyword">class</span> test {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String args[]){
        String[] tokens =<span class="keyword">new</span> String[]{<span class="string">"4"</span>, <span class="string">"13"</span>, <span class="string">"5"</span>, <span class="string">"/"</span>, <span class="string">"+"</span>};
        System.<span class="keyword">out</span>.println(evalRPN(tokens));
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">evalRPN</span>(String[] tokens){
        String operators =<span class="string">"+-*/"</span>;
        Stack&lt;String&gt; s = <span class="keyword">new</span> Stack&lt;String&gt;();
        <span class="keyword">for</span>(String str : tokens){
            <span class="keyword">if</span>(operators.contains(str)){
                <span class="keyword">int</span> num2 = Integer.valueOf(s.pop());
                <span class="keyword">int</span> num1 = Integer.valueOf(s.pop());
                <span class="keyword">int</span> index = operators.indexOf(str);
                <span class="keyword">switch</span>(index){
                <span class="keyword">case</span> <span class="number">0</span>:
                    s.push(String.valueOf(num1+num2));
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="number">1</span>:
                    s.push(String.valueOf(num1-num2));
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="number">2</span>:
                    s.push(String.valueOf(num1*num2));
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="number">3</span>:
                    s.push(String.valueOf(num1/num2));
                    <span class="keyword">break</span>;
                }
            }<span class="keyword">else</span>{
                s.push(str);
            }
        }
        <span class="keyword">return</span> Integer.valueOf(s.pop());
    }
}
</code></pre>]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reverse Words in a String]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/LeetCode/reversewords/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/数据结构与算法/LeetCode/reversewords/</id>
    <published>2014-05-21T10:01:31.000Z</published>
    <updated>2014-05-21T13:08:44.000Z</updated>
    <content type="html"><![CDATA[<h4 id="题目">题目</h4>
<pre><code>Given <span class="operator">an</span> input <span class="keyword">string</span>, reverse <span class="operator">the</span> <span class="keyword">string</span> <span class="built_in">word</span> <span class="keyword">by</span> <span class="built_in">word</span>.
For example,
Given s = <span class="string">"the sky is blue"</span>,
<span class="constant">return</span> <span class="string">"blue is sky the"</span>.
</code></pre><p>一道反转字符串的题，可以用栈实现，也可以利用字符串的split方法进行分割字符串后处理</p>
<p>输入情况较多 ： 易遗漏” “ </p>
<h4 id="解法">解法</h4>
<pre><code>    <span class="keyword">public</span> <span class="keyword">class</span> Solution {
    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseWords</span>(String s){
        <span class="comment">//判断字符串是否为空</span>
        <span class="keyword">if</span>(s == <span class="keyword">null</span> ||s.length()==<span class="number">0</span>){
            <span class="keyword">return</span> <span class="string">""</span>;
        }
        <span class="comment">//以空格分割单词</span>
        String[] list=s.split(<span class="string">" "</span>);
        StringBuffer sb =<span class="keyword">new</span> StringBuffer();
        <span class="keyword">for</span>(<span class="keyword">int</span> i=list.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;--i){
            <span class="keyword">if</span>(!list[i].equals(<span class="string">""</span>)){
                sb.append(list[i]).append(<span class="string">" "</span>);
            }
        }
        <span class="comment">//考虑到" "的输入</span>
        <span class="keyword">return</span> sb.length() == <span class="number">0</span>? <span class="string">""</span>:sb.substring(<span class="number">0</span>, sb.length()-<span class="number">1</span>);
    }
    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        String s=<span class="string">"the sky   is blue"</span>;
        String d=reverseWords(s);
    }
}
</code></pre><p>注：split(“ “)单词之间有多个空格时，则认为空格之间为空,即list的元素为空””</p>
<p>str＝str.substring(int beginIndex);截取掉str从首字母起长度为beginIndex的字符串，将剩余字符串赋值给str；</p>
<p>str＝str.substring(int beginIndex，int endIndex);截取str中从beginIndex开始至endIndex结束时的字符串，并将其赋值给str;</p>
]]></content>
    
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构与算法" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java的IO总结]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/Java/java_io/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/Java/java_io/</id>
    <published>2014-05-21T05:20:59.000Z</published>
    <updated>2014-05-21T06:12:36.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Java流有关的类或借口">Java流有关的类或借口</h4>
<p><img src="/img/Java/io/1.png" alt=" "></p>
<h4 id="Java流类图结构">Java流类图结构</h4>
<p><img src="/img/Java/io/2.jpg" alt=" "></p>
<h4 id="流的概念和作用">流的概念和作用</h4>
<p>流是一组有顺序的，有起点和终点的字节集合，是对数据传输的总称或抽象。即数据在两设备间的传输称为流，流的本质是数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。</p>
<h5 id="IO流的分类">IO流的分类</h5>
<ul>
<li>根据处理数据类型的不同分为：字符流和字节流</li>
<li>根据数据流向不同分为：输入流和输出流</li>
</ul>
<h6 id="字符流和字节流">字符流和字节流</h6>
<p>字符流的由来： 因为数据编码的不同，而有了对字符进行高效操作的流对象。本质其实就是基于字节流读取时，去查了指定的码表。<br>字节流和字符流的区别：</p>
<ul>
<li>读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节。</li>
<li>处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。</li>
<li>缓冲区的使用：字节流在操作的时候本身是不会用到缓冲区的，是文件本身的直接操作的，但是字符流在操作的时候下后是会用到缓冲区的，是通过缓冲区来操作文件的。</li>
</ul>
<p>使用字节流好还是字符流好呢？</p>
<p>答案是字节流。首先因为硬盘上的所有文件都是以字节的形式进行传输或者保存的，包括图片等内容。但是字符只是在内存中才会形成的，所以在开发中，字节流使用广泛。</p>
<h6 id="输入流和输出流">输入流和输出流</h6>
<p>对输入流只能进行读操作，对输出流只能进行写操作，程序中需要根据待传输数据的不同特性而使用不同的流。 </p>
<h4 id="案例（写了很少，慢慢补充）">案例（写了很少，慢慢补充）</h4>
<h6 id="File类的两个常量">File类的两个常量</h6>
<pre><code><span class="keyword">File</span>.separator 代表 \
<span class="keyword">File</span>.pathSeparator 代表 ，
多使用它们俩，方便跨平台写路径名
</code></pre><h6 id="创建一个新文件">创建一个新文件</h6>
<pre><code><span class="keyword">package</span> com.liu.io;

<span class="keyword">import</span> java.io.File;
<span class="comment">//创建一个新文件</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> {</span>
<span class="comment">/*    public static void main(String[] args){
        File f =new File("D:\\hello.txt");
        try{
            f.createNewFile();
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
*/</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello.txt"</span>;
        File f =<span class="keyword">new</span> File(fileName);
        <span class="keyword">try</span>{
            f.createNewFile();
        }<span class="keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><h6 id="删除一个文件">删除一个文件</h6>
<pre><code>package com.liu.io;

import java.io.File;

<span class="comment">//删除一个文件</span>
<span class="keyword">public</span> <span class="keyword">class</span> test03 {

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello.txt"</span>;
        File f=<span class="keyword">new</span> File(fileName);
        <span class="keyword">if</span>(f.exists()){
            f.delete();
        }<span class="keyword">else</span>{
            System.<span class="keyword">out</span>.println(<span class="string">"文件不存在"</span>);
        }
    }

}
</code></pre><h6 id="创建一个文件夹及遍历目录">创建一个文件夹及遍历目录</h6>
<pre><code>package com.liu.io;

import java.io.File;


<span class="keyword">public</span> <span class="keyword">class</span> test04 {

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
    <span class="comment">//创建一个文件夹         </span>
    /*        String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello"</span>;
            File f=<span class="keyword">new</span> File(fileName);
            f.mkdir();
    */
    <span class="comment">//列出指定目录的全部文件（包括隐藏文件）</span>
    /*    String fileName=<span class="string">"D:"</span>+File.separator;
        File f=<span class="keyword">new</span> File(fileName);
        String[] str=f.list();
        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; str.length; i++) {
            System.out.println(str[i]);
        }
    */
    <span class="comment">//列出指定目录的全部文件（包括隐藏文件） 完整路径    </span>
    /*     String fileName=<span class="string">"D:"</span>+File.separator;
            File f=<span class="keyword">new</span> File(fileName);
            File[] str=f.listFiles();
            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; str.length; i++) {
                System.out.println(str[i]);
            }
    */    
    <span class="comment">//    判断一个指定的路径是否为目录</span>
    /*    String fileName=<span class="string">"D:"</span>+File.separator;
        File f=<span class="keyword">new</span> File(fileName);
        <span class="keyword">if</span>(f.isDirectory()){
            System.out.println(<span class="string">"YES"</span>);
        }<span class="keyword">else</span>{
            System.out.println(<span class="string">"NO"</span>);
        }
    */
    <span class="comment">//搜索指定目录的全部内容</span>
        String fileName=<span class="string">"D:"</span>+File.separator;
        File f=<span class="keyword">new</span> File(fileName);
        print(f);
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> print(File f){
        <span class="keyword">if</span>(f!=<span class="keyword">null</span>){
            <span class="keyword">if</span>(f.isDirectory()){
                File[] fileArray=f.listFiles();
                <span class="keyword">if</span>(fileArray!=<span class="keyword">null</span>){
                    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; fileArray.length; i++) {
                        <span class="comment">//递归调用</span>
                        print(fileArray[i]);
                    }
                }
            }
            <span class="keyword">else</span>{
                System.out.println(f);
            }
        }
    }
}
</code></pre><h6 id="使用RandomAccessFile写入文件">使用RandomAccessFile写入文件</h6>
<pre><code><span class="keyword">package</span> com.liu.io;

<span class="keyword">import</span> java.io.*;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test05</span> {</span>

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException {
        <span class="comment">//使用RandomAccessFile写入文件</span>
        String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello.txt"</span>;
        File f=<span class="keyword">new</span> File(fileName);
        RandomAccessFile demo = <span class="keyword">null</span>;
        <span class="keyword">try</span> {
            demo = <span class="keyword">new</span> RandomAccessFile(f,<span class="string">"rw"</span>);
        } <span class="keyword">catch</span> (FileNotFoundException e) {
            e.printStackTrace();
        }
        demo.writeBytes(<span class="string">"asdsad"</span>);
        <span class="comment">//demo.writeInt(12);</span>
        <span class="comment">//demo.writeBoolean(true);</span>
        <span class="comment">//demo.writeChar('A');</span>
        <span class="comment">//demo.writeFloat(1.21f);</span>
        <span class="comment">//demo.writeDouble(12.123);</span>
        <span class="comment">//demo.close();</span>

    }

}
</code></pre><h6 id="字节流">字节流</h6>
<pre><code>package com.liu.io;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

<span class="comment">//字节流</span>
<span class="keyword">public</span> <span class="keyword">class</span> test06 {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)throws IOException {
           String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello.txt"</span>;
           File f=<span class="keyword">new</span> File(fileName);
           <span class="comment">// 向文件中写入字符串</span>
      /*    OutputStream out =<span class="keyword">new</span> FileOutputStream(f);
           String str=<span class="string">"你好"</span>;
           byte[] b=str.getBytes();
           out.write(b);
           out.close();
       */    

           <span class="comment">//向文件中追加新内容</span>
       /*   OutputStream out =<span class="keyword">new</span> FileOutputStream(f,<span class="keyword">true</span>);
           String str=<span class="string">"haha"</span>;
           byte[]b =str.getBytes();
           <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;b.length;i++){
               out.write(b[i]);
           }
           out.close();
         */

           <span class="comment">//读文件内容</span>
     /*      InputStream <span class="keyword">in</span> =<span class="keyword">new</span> FileInputStream(f);
           <span class="comment">//byte[] b=new byte[1024];</span>
           byte[] b=<span class="keyword">new</span> byte[(int)f.length()];
           <span class="comment">//如果直接用 in.read(b) 会读取大量空格</span>
            int len=<span class="keyword">in</span>.read(b);
            <span class="keyword">in</span>.close();
            System.out.println(<span class="string">"读入长度为："</span>+len);
            System.out.println(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));
       */

           <span class="comment">//一个一个字节读</span>
    /*       InputStream <span class="keyword">in</span>=<span class="keyword">new</span> FileInputStream(f);
            byte[] b=<span class="keyword">new</span> byte[(int)f.length()];
            <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; b.length; i++) {
                b[i]=(byte)<span class="keyword">in</span>.read();
            }
            <span class="keyword">in</span>.close();
            System.out.println(<span class="keyword">new</span> String(b));
    */

           <span class="comment">//判断是否独到文件的末尾</span>
           InputStream <span class="keyword">in</span>=<span class="keyword">new</span> FileInputStream(f);
            byte[] b=<span class="keyword">new</span> byte[<span class="number">1024</span>];
            int count =<span class="number">0</span>;
            int temp=<span class="number">0</span>;
            <span class="keyword">while</span>((temp=<span class="keyword">in</span>.read())!=(-<span class="number">1</span>)){
                b[count++]=(byte)temp;
            }
            <span class="keyword">in</span>.close();
            System.out.println(<span class="keyword">new</span> String(b));
    }
}
</code></pre><h6 id="字符流">字符流</h6>
<pre><code><span class="keyword">package</span> com.liu.io;
<span class="comment">//字符流</span>
<span class="keyword">import</span> java.io.File;
<span class="keyword">import</span> java.io.FileReader;
<span class="keyword">import</span> java.io.FileWriter;
<span class="keyword">import</span> java.io.IOException;
<span class="keyword">import</span> java.io.Reader;
<span class="keyword">import</span> java.io.Writer;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test07</span> {</span>

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException {
        String fileName=<span class="string">"D:"</span>+File.separator+<span class="string">"hello.txt"</span>;
        File f=<span class="keyword">new</span> File(fileName);
        <span class="comment">//写入数据</span>
  <span class="comment">/*      //追加内容
        Writer out =new FileWriter(f,true);
       // Writer out =new FileWriter(f);
        String str="hello";
        out.write(str);
        out.close();
    */</span>
        <span class="comment">//读内容</span>
        <span class="keyword">char</span>[] ch =<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];
        Reader read=<span class="keyword">new</span> FileReader(f);
        <span class="keyword">int</span> temp=<span class="number">0</span>;
        <span class="keyword">int</span> count=<span class="number">0</span>;
        <span class="keyword">while</span>((temp=read.read())!=(-<span class="number">1</span>)){
            ch[count++]=(<span class="keyword">char</span>)temp;
        }
        read.close();
        System.out.println(<span class="string">"内容为"</span>+<span class="keyword">new</span> String(ch,<span class="number">0</span>,count));
    }
}
</code></pre><p>下面例子总结摘自网上</p>
<h6 id="OutputStreramWriter_和InputStreamReader类">OutputStreramWriter 和InputStreamReader类</h6>
<pre><code>OutputStreramWriter将输出的字符流转化为字节流
InputStreamReader将输入的字节流转换为字符流
但是不管如何操作，最后都是以字节的形式保存在文件中的。
<span class="javadoc">/**
 * 将字节输出流转化为字符输出流
 * */</span>
<span class="keyword">import</span> java.io.*;
class hello{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException {
        String fileName= <span class="string">"d:"</span>+File.separator+<span class="string">"hello.txt"</span>;
        File file=<span class="keyword">new</span> File(fileName);
        Writer out=<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(file));
        out.write(<span class="string">"hello"</span>);
        out.close();
    }
}
<span class="javadoc">/**
 * 将字节输入流变为字符输入流
 * */</span>
<span class="keyword">import</span> java.io.*;
class hello{
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) <span class="keyword">throws</span> IOException {
        String fileName= <span class="string">"d:"</span>+File.separator+<span class="string">"hello.txt"</span>;
        File file=<span class="keyword">new</span> File(fileName);
        Reader read=<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file));
        <span class="keyword">char</span>[] b=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];
        <span class="keyword">int</span> len=read.read(b);
        System.out.println(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));
        read.close();
    }
}
</code></pre>]]></content>
    
    
      <category term="Java" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Java/"/>
    
      <category term="Java" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java多线程总结]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/Java/java_thread/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/Java/java_thread/</id>
    <published>2014-05-21T03:48:20.000Z</published>
    <updated>2014-05-21T05:13:53.000Z</updated>
    <content type="html"><![CDATA[<h4 id="一个线程的生命期">一个线程的生命期</h4>
<p>线程经过其生命周期的各个阶段。下图显示了一个线程完整的生命周期。</p>
<p><img src="/img/Java/java_thread.jpg" alt="线程的生命期"></p>
<ul>
<li>新状态: 一个新产生的线程从新状态开始了它的生命周期。它保持这个状态知道程序start这个线程。</li>
<li>运行状态:当一个新状态的线程被start以后，线程就变成可运行状态，一个线程在此状态下被认为是开始执行其任务</li>
<li>就绪状态:当一个线程等待另外一个线程执行一个任务的时候，该线程就进入就绪状态。当另一个线程给就绪状态的线程发送信号时，该线程才重新切换到运行状态。</li>
<li>休眠状态: 由于一个线程的时间片用完了，该线程从运行状态进入休眠状态。当时间间隔到期或者等待的时间发生了，该状态的线程切换到运行状态。</li>
<li>终止状态: 一个运行状态的线程完成任务或者其他终止条件发生，该线程就切换到终止状态。</li>
</ul>
<h4 id="线程的优先级">线程的优先级</h4>
<p>每一个Java线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。Java优先级在MIN_PRIORITY（1）和MAX_PRIORITY（10）之间的范围内。默认情况下，每一个线程都会分配一个优先级NORM_PRIORITY（5）。具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器时间。然而，线程优先级不能保证线程执行的顺序，而且非常依赖于平台.</p>
<h4 id="创建一个线程">创建一个线程</h4>
<p>Java提供了两种创建线程方法：</p>
<ul>
<li>通过实现Runable接口</li>
<li>通过继承Thread类本身</li>
</ul>
<h5 id="直接继承Thread的类">直接继承Thread的类</h5>
<pre><code><span class="keyword">package</span> com.liu.test;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>  <span class="keyword">extends</span> <span class="title">Thread</span>{</span>
    <span class="keyword">private</span> String name;
    <span class="keyword">public</span> <span class="title">MyThread</span>(){
    }
    <span class="keyword">public</span> <span class="title">MyThread</span>(String name){
        <span class="keyword">this</span>.name=name;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(){
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){
            System.out.println(name+<span class="string">"运行  "</span>+i);
        }
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        MyThread h1=<span class="keyword">new</span> MyThread(<span class="string">"A"</span>);
        MyThread h2=<span class="keyword">new</span> MyThread(<span class="string">"B"</span>);
        h1.start();
        h2.start();
    }
}
</code></pre><h5 id="通过实现Runable接口">通过实现Runable接口</h5>
<pre><code>package com.liu.test;
 <span class="class"><span class="keyword">class</span> <span class="title">MyThread02</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Runnable</span> {</span>
     <span class="keyword">private</span> String name;

     <span class="keyword">public</span> MyThread02(){

     }

     <span class="keyword">public</span> MyThread02(String name){
         <span class="keyword">this</span>.name=name;
     }

    @Override
    <span class="keyword">public</span> <span class="keyword">void</span> run() {
        <span class="comment">// TODO Auto-generated method stub</span>
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++){
            System.out.println(name+<span class="string">"运行"</span>+i);
        }
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args){
        MyThread02 h1 =<span class="keyword">new</span> MyThread02(<span class="string">"A"</span>);
        MyThread02 h2 =<span class="keyword">new</span> MyThread02(<span class="string">"B"</span>);
        Thread s1=<span class="keyword">new</span> Thread(h1);
        Thread s2=<span class="keyword">new</span> Thread(h2);
        s1.start();
        s2.start();
    }

}
</code></pre><h4 id="实现Runnable接口比继承Thread类所具有的优势">实现Runnable接口比继承Thread类所具有的优势</h4>
<ul>
<li>适合多个相同的程序代码的线程去处理同一个资源</li>
<li>可以避免java中的单继承的限制</li>
<li>增加程序的健壮性，代码可以被多个线程共享，代码和数据独立。    </li>
</ul>
<h4 id="线程同步">线程同步</h4>
<p>所谓同步就是在统一时间段中只有有一个线程运行，其他的线程必须等到这个线程结束之后才能继续执行。采用同步的话，可以使用同步代码块和同步方法两种来完成。</p>
<pre><code><span class="keyword">package</span> com.liu.synchronize;
<span class="comment">//采用同步的话，可以使用同步代码块和同步方法两种来完成。</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Runnable</span>{</span>
    <span class="keyword">private</span> <span class="keyword">int</span> count=<span class="number">5</span>;
    <span class="comment">//同步代码块</span>
<span class="comment">/*    public void run() {
        for (int i=0;i&lt;10;i++){
            synchronized (this){
                if(count&gt;0){
                    try{
                        Thread.sleep(1000);
                    }catch (Exception e) {
                        e.printStackTrace();
                    }
                    System.out.println(count--);
                }
            }
        }
    }
    */</span>
    <span class="comment">//同步方法</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) {
            sale();
        }
    }
    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sale</span>() {
        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {
            <span class="keyword">try</span> {
                Thread.sleep(<span class="number">1000</span>);
            } <span class="keyword">catch</span> (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println(count--);
        }
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args){
        test t1 =<span class="keyword">new</span> test();
        Thread h1 =<span class="keyword">new</span> Thread(t1);
        Thread h2 =<span class="keyword">new</span> Thread(t1);
        Thread h3 =<span class="keyword">new</span> Thread(t1);
        h1.start();
        h2.start();
        h3.start();
    }


}
</code></pre><h4 id="经典问题_生产者与消费者">经典问题 生产者与消费者</h4>
<pre><code><span class="comment">/**
 * 生产者生产商品放到容器中，容器有一定的容量（只能顺序放，先放后拿），
 * 消费者消费商品，当容器满了后，生产者等待，当容器为空时，消费者等待。
 * 当生产者将商品放入容器后，通知消费者；当消费者拿走商品后，通知生产者。
 */</span>

package com.liu.consumerproducer;

<span class="class"><span class="keyword">class</span> <span class="title">Goods</span>{</span>
    <span class="keyword">int</span> id;
    <span class="keyword">public</span> Goods(<span class="keyword">int</span> id){
        <span class="keyword">this</span>.id=id;
    }
    <span class="keyword">public</span> String toString(){
        <span class="keyword">return</span> <span class="string">"商品"</span>+<span class="keyword">this</span>.id;
    }
}

<span class="class"><span class="keyword">class</span> <span class="title">Container</span>{</span>
    <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">index</span>=<span class="number">0</span>;
    Goods[] goods =<span class="keyword">new</span> Goods[<span class="number">6</span>];
    <span class="keyword">public</span> synchronized <span class="keyword">void</span> push(Goods good){
        <span class="keyword">while</span> (<span class="keyword">index</span>==goods.length){
            <span class="comment">//容器满了，生产者等待</span>
            <span class="keyword">try</span> {
                wait();
            } <span class="keyword">catch</span> (InterruptedException e) {
                e.printStackTrace();
            }
        }
        goods[<span class="keyword">index</span>]=good;
        <span class="keyword">index</span>++;
        notifyAll();<span class="comment">//当生产者放入商品后通知消费者</span>
    }
     <span class="keyword">public</span> synchronized Goods pop(){
            <span class="keyword">while</span>(<span class="keyword">index</span>==<span class="number">0</span>){<span class="comment">//当容器内没有商品消费者等待</span>
                <span class="keyword">try</span> {
                    wait();
                } <span class="keyword">catch</span> (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            <span class="keyword">index</span>--;
            notifyAll();<span class="comment">//当消费者消费了商品后通知生产者</span>
            <span class="keyword">return</span> goods[<span class="keyword">index</span>];
        }
}

<span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Runnable</span>{</span>

    Container con =<span class="keyword">new</span> Container();
    <span class="keyword">public</span> Producer(Container con) {
        <span class="keyword">this</span>.con=con;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> run() {
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++){
            Goods good=<span class="keyword">new</span> Goods(i);
            con.push(good);
            System.out.println(<span class="string">"生产了："</span>+good);
        }
        <span class="keyword">try</span> {
            Thread.sleep(<span class="number">1000</span>);
        } <span class="keyword">catch</span> (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

<span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="inheritance"><span class="keyword">implements</span></span> <span class="title">Runnable</span>{</span>

    Container con = <span class="keyword">new</span> Container();
    <span class="keyword">public</span> Consumer(Container con){
        <span class="keyword">this</span>.con=con;
    }

    <span class="keyword">public</span> <span class="keyword">void</span> run(){
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">20</span>; i++){
            Goods good=con.pop();
            System.out.println(<span class="string">"消费了："</span>+good);
            <span class="keyword">try</span> {
                Thread.sleep(<span class="number">1000</span>);
            } <span class="keyword">catch</span> (InterruptedException e) {
                <span class="comment">// TODO Auto-generated catch block</span>
                e.printStackTrace();
            }
        }
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> {</span>
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
        Container con =<span class="keyword">new</span> Container();
        Producer p =<span class="keyword">new</span> Producer(con);
        Consumer c = <span class="keyword">new</span> Consumer(con);
        <span class="keyword">new</span> Thread(p).start();
        <span class="keyword">new</span> Thread(c).start();
    }

}
</code></pre>]]></content>
    
    
      <category term="Java" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Java/"/>
    
      <category term="Java" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vmstat iostat top sar总结]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/Linux/linux_%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/Linux/linux_性能监控/</id>
    <published>2014-05-21T02:30:30.000Z</published>
    <updated>2014-05-21T03:46:07.000Z</updated>
    <content type="html"><![CDATA[<h3 id="vmstat">vmstat</h3>
<p>一般vmstat工具的使用是通过两个数字参数来完成的，第一个参数是采样的时间间隔数，单位是秒，第二个参数是采样的次数</p>
<pre><code><span class="comment">root@localhost:~#</span> <span class="comment">vmstat</span> <span class="comment">2</span> <span class="comment">100</span>
<span class="comment">procs</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">memory</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">swap</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">io</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="comment">system</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">cpu</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>
 <span class="comment">r</span>  <span class="comment">b</span>   <span class="comment">swpd</span>   <span class="comment">free</span>   <span class="comment">buff</span>  <span class="comment">cache</span>   <span class="comment">si</span>   <span class="comment">so</span>    <span class="comment">bi</span>    <span class="comment">bo</span>   <span class="comment">in</span>   <span class="comment">cs</span> <span class="comment">us</span> <span class="comment">sy</span> <span class="comment">id</span> <span class="comment">wa</span>
 <span class="comment">1</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">3498472</span> <span class="comment">315836</span> <span class="comment">3819540</span>    <span class="comment">0</span>    <span class="comment">0</span>     <span class="comment">0</span>     <span class="comment">1</span>    <span class="comment">2</span>    <span class="comment">0</span>  <span class="comment">0</span>  <span class="comment">0</span> <span class="comment">100</span>  <span class="comment">0</span>
 <span class="comment">0</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">3499584</span> <span class="comment">315836</span> <span class="comment">3819660</span>    <span class="comment">0</span>    <span class="comment">0</span>     <span class="comment">0</span>     <span class="comment">0</span>   <span class="comment">88</span>  <span class="comment">158</span>  <span class="comment">0</span>  <span class="comment">0</span> <span class="comment">100</span>  <span class="comment">0</span>
 <span class="comment">0</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">3499708</span> <span class="comment">315836</span> <span class="comment">3819660</span>    <span class="comment">0</span>    <span class="comment">0</span>     <span class="comment">0</span>     <span class="comment">2</span>   <span class="comment">86</span>  <span class="comment">162</span>  <span class="comment">0</span>  <span class="comment">0</span> <span class="comment">100</span>  <span class="comment">0</span>
 <span class="comment">0</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">3499708</span> <span class="comment">315836</span> <span class="comment">3819660</span>    <span class="comment">0</span>    <span class="comment">0</span>     <span class="comment">0</span>    <span class="comment">10</span>   <span class="comment">81</span>  <span class="comment">151</span>  <span class="comment">0</span>  <span class="comment">0</span> <span class="comment">100</span>  <span class="comment">0</span>
 <span class="comment">1</span>  <span class="comment">0</span>      <span class="comment">0</span> <span class="comment">3499732</span> <span class="comment">315836</span> <span class="comment">3819660</span>    <span class="comment">0</span>    <span class="comment">0</span>     <span class="comment">0</span>     <span class="comment">2</span>   <span class="comment">83</span>  <span class="comment">154</span>  <span class="comment">0</span>  <span class="comment">0</span> <span class="comment">100</span>  <span class="comment">0</span>
</code></pre><h6 id="进程procs：">进程procs：</h6>
<p>r：在运行队列中等待的进程数(就是说多少个进程真的分配到CPU) 。当这个值超过了CPU数目，就会出现CPU瓶颈了</p>
<p>b：在等待io的进程数 。</p>
<h6 id="Linux_内存监控内存memoy：">Linux 内存监控内存memoy：</h6>
<p>swpd：现时可用的交换内存（单位KB）。 如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器</p>
<p>free：空闲的内存（单位KB）。</p>
<p>buff: 缓冲去中的内存数（单位：KB）。</p>
<p>cache：被用来做为高速缓存的内存数（单位：KB）。</p>
<h6 id="Linux_内存监控swap交换页面">Linux 内存监控swap交换页面</h6>
<p>si: 从磁盘交换到内存的交换页数量，单位：KB/秒。 如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉</p>
<p>so: 从内存交换到磁盘的交换页数量，单位：KB/秒。 如上</p>
<h6 id="Linux_内存监控_io块设备:">Linux 内存监控 io块设备:</h6>
<p>bi: 发送到块设备的块数，单位：块/秒。</p>
<p>bo: 从块设备接收到的块数，单位：块/秒。</p>
<h6 id="Linux_内存监控system系统：">Linux 内存监控system系统：</h6>
<p>in: 每秒的中断数，包括时钟中断。</p>
<p>cs: 每秒的环境（上下文）转换次数。例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。</p>
<h6 id="Linux_内存监控cpu中央处理器：">Linux 内存监控cpu中央处理器：</h6>
<p>us：用户进程使用的时间 。以百分比表示。</p>
<p>sy：系统进程使用的时间。 以百分比表示。如果太高，表示系统调用时间长，例如是IO操作频繁</p>
<p>id：中央处理器的空闲时间 。以百分比表示。一般来说，id + us + sy = 100,一般认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率</p>
<p>wa 等待IO CPU时间</p>
<p>假如 r经常大于 4 ，且id经常小于40，表示中央处理器的负荷很重。 假如bi，bo 长期不等于0，表示物理内存容量太小。</p>
<h3 id="iostat">iostat</h3>
<p>个人常用iostat -x 1每一秒输出IO信息，-x能让你看到更多信息</p>
<pre><code><span class="variable">$iostat</span> -<span class="keyword">x</span> <span class="number">1</span>
Linux <span class="number">2.6</span>.<span class="number">33</span>-fukai (fukai-laptop)          _i686<span class="number">_</span>    (<span class="number">2</span> CPU)
avg-cpu:  <span class="variable">%user</span>   <span class="variable">%nice</span> <span class="variable">%system</span> <span class="variable">%iowait</span>  <span class="variable">%steal</span>   <span class="variable">%idle</span>
           <span class="number">5.47</span>    <span class="number">0</span>.<span class="number">50</span>    <span class="number">8.96</span>   <span class="number">48.26</span>    <span class="number">0</span>.<span class="number">00</span>   <span class="number">36.82</span>

Device:         rrqm/<span class="keyword">s</span>   wrqm/<span class="keyword">s</span>     r/<span class="keyword">s</span>     w/<span class="keyword">s</span>   rsec/<span class="keyword">s</span>   wsec/<span class="keyword">s</span> avgrq-sz avgqu-sz   await  svctm  <span class="variable">%util</span>
sda               <span class="number">6.00</span>   <span class="number">273.00</span>   <span class="number">99.00</span>    <span class="number">7.00</span>  <span class="number">2240.00</span>  <span class="number">2240.00</span>    <span class="number">42.26</span>     <span class="number">1.12</span>   <span class="number">10.57</span>   <span class="number">7.96</span>  <span class="number">84.40</span>
sdb               <span class="number">0</span>.<span class="number">00</span>     <span class="number">4.00</span>    <span class="number">0</span>.<span class="number">00</span>  <span class="number">350.00</span>     <span class="number">0</span>.<span class="number">00</span>  <span class="number">2068.00</span>     <span class="number">5.91</span>     <span class="number">0</span>.<span class="number">55</span>    <span class="number">1.58</span>   <span class="number">0</span>.<span class="number">54</span>  <span class="number">18.80</span>

rrqm/<span class="keyword">s</span>:  每秒进行 merge 的读操作数目.即 delta(rmerge)/<span class="keyword">s</span>
（当系统调用需要读取数据的时候，VFS（虚拟文件系统）将请求发到各个FS，如果FS发现不同的读取请求读取的是相同Block的数据，FS会将这个请求合并Merge）
wrqm/<span class="keyword">s</span>:  每秒进行 merge 的写操作数目.即 delta(wmerge)/<span class="keyword">s</span>
r/<span class="keyword">s</span>:     每秒完成的读 I/O 设备次数.即 delta(rio)/<span class="keyword">s</span>
w/<span class="keyword">s</span>:     每秒完成的写 I/O 设备次数.即 delta(wio)/<span class="keyword">s</span>
rsec/<span class="keyword">s</span>:  每秒读扇区数.即 delta(rsect)/<span class="keyword">s</span>
wsec/<span class="keyword">s</span>:  每秒写扇区数.即 delta(wsect)/<span class="keyword">s</span>
rkB/<span class="keyword">s</span>:   每秒读K字节数.是 rsect/<span class="keyword">s</span> 的一半,因为每扇区大小为<span class="number">512</span>字节.(需要计算)
wkB/<span class="keyword">s</span>:   每秒写K字节数.是 wsect/<span class="keyword">s</span> 的一半.(需要计算)
avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区).delta(rsect+wsect)/delta(rio+wio)
avgqu-sz: 平均I/O队列长度.即 delta(aveq)/<span class="regexp">s/1000 (因为aveq的单位为毫秒).
await:  平均每次设备I/O操作的等待时间 (毫秒).即 delta(ruse+wuse)/delta</span>(rio+wio)
svctm:  平均每次设备I/O操作的服务时间 (毫秒).即 delta(<span class="keyword">use</span>)/delta(rio+wio)
<span class="variable">%util</span>:  一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的.即 delta(<span class="keyword">use</span>)/<span class="keyword">s</span>/<span class="number">1000</span> (因为<span class="keyword">use</span>的单位为毫秒)
</code></pre><p>如果 %util 接近 100%,说明产生的I/O请求太多,I/O系统已经满负荷,该磁盘可能存在瓶颈.idle小于70% IO压力就较大了,一般读取速度有较多的wait.同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)</p>
<p>另外 await 的参数也要多和 svctm 来参考.差的过高就一定有 IO 的问题.avgqu-sz 也是个做 IO 调优时需要注意的地方,这个就是直接每次操作的数据的大小,如果次数多,但数据拿的小的话,其实 IO 也会很小.如果数据拿的大,才IO 的数据会高.也可以通过 avgqu-sz × ( r/s or w/s ) = rsec/s or wsec/s.也就是讲,读定速度是这个来决定的.</p>
<h3 id="top">top</h3>
<p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况</p>
<pre><code>[root<span class="variable">@localhost</span> <span class="keyword">log</span>]<span class="comment"># top</span>
top - <span class="number">14</span>:<span class="number">06</span>:<span class="number">23</span> up <span class="number">70</span> days, <span class="number">16</span>:<span class="number">44</span>,  <span class="number">2</span> users,  load average: <span class="number">1.25</span>, <span class="number">1.32</span>, <span class="number">1.35</span>
Tasks: <span class="number">206</span> total,   <span class="number">1</span> running, <span class="number">205</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie
Cpu(<span class="keyword">s</span>):  <span class="number">5.9</span><span class="variable">%us</span>,  <span class="number">3.4</span><span class="variable">%sy</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%ni</span>, <span class="number">90.4</span><span class="variable">%id</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%wa</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%hi</span>,  <span class="number">0</span>.<span class="number">2</span><span class="variable">%si</span>,  <span class="number">0</span>.<span class="number">0</span><span class="variable">%st</span>
Mem:  <span class="number">32949016</span>k total, <span class="number">14411180</span>k used, <span class="number">18537836</span>k free,   <span class="number">169884</span>k buffers
Swap: <span class="number">32764556</span>k total,        0k used, <span class="number">32764556</span>k free,  <span class="number">3612636</span>k cached
  PID USER      PR  NI  VIRT  RES  SHR S <span class="variable">%CPU</span> <span class="variable">%MEM</span>    TIME+  COMMAND                                                                
<span class="number">28894</span> root      <span class="number">22</span>   <span class="number">0</span> <span class="number">1501</span><span class="keyword">m</span> <span class="number">405</span><span class="keyword">m</span>  <span class="number">10</span><span class="keyword">m</span> S <span class="number">52.2</span>  <span class="number">1.3</span>   <span class="number">2534</span>:<span class="number">16</span> java                                                                   
<span class="number">18249</span> root      <span class="number">18</span>   <span class="number">0</span> <span class="number">3201</span><span class="keyword">m</span> <span class="number">1.9</span>g  <span class="number">11</span><span class="keyword">m</span> S <span class="number">35.9</span>  <span class="number">6.0</span> <span class="number">569</span>:<span class="number">39.41</span> java                                                                   
 <span class="number">2808</span> root      <span class="number">25</span>   <span class="number">0</span> <span class="number">3333</span><span class="keyword">m</span> <span class="number">1.0</span>g  <span class="number">11</span><span class="keyword">m</span> S <span class="number">24.3</span>  <span class="number">3.1</span> <span class="number">526</span>:<span class="number">51.85</span> java                                                                   
<span class="number">25668</span> root      <span class="number">23</span>   <span class="number">0</span> <span class="number">3180</span><span class="keyword">m</span> <span class="number">704</span><span class="keyword">m</span>  <span class="number">11</span><span class="keyword">m</span> S <span class="number">14.0</span>  <span class="number">2.2</span> <span class="number">360</span>:<span class="number">44.53</span> java                                                                   
  <span class="number">574</span> root      <span class="number">25</span>   <span class="number">0</span> <span class="number">3168</span><span class="keyword">m</span> <span class="number">611</span><span class="keyword">m</span>  <span class="number">10</span><span class="keyword">m</span> S <span class="number">12.6</span>  <span class="number">1.9</span> <span class="number">556</span>:<span class="number">59.63</span> java                                                                   
 <span class="number">1599</span> root      <span class="number">20</span>   <span class="number">0</span> <span class="number">3237</span><span class="keyword">m</span> <span class="number">1.9</span>g  <span class="number">11</span><span class="keyword">m</span> S <span class="number">12.3</span>  <span class="number">6.2</span> <span class="number">262</span>:<span class="number">01</span>.<span class="number">14</span> java                                                                   
 <span class="number">1008</span> root      <span class="number">21</span>   <span class="number">0</span> <span class="number">3147</span><span class="keyword">m</span> <span class="number">842</span><span class="keyword">m</span>  <span class="number">10</span><span class="keyword">m</span> S  <span class="number">0</span>.<span class="number">3</span>  <span class="number">2.6</span>   <span class="number">4</span>:<span class="number">31.08</span> java                                                                   
<span class="number">13823</span> root      <span class="number">23</span>   <span class="number">0</span> <span class="number">3031</span><span class="keyword">m</span> <span class="number">2.1</span>g  <span class="number">10</span><span class="keyword">m</span> S  <span class="number">0</span>.<span class="number">3</span>  <span class="number">6.8</span> <span class="number">176</span>:<span class="number">57.34</span> java                                                                   
<span class="number">28218</span> root      <span class="number">15</span>   <span class="number">0</span> <span class="number">12760</span> <span class="number">1168</span>  <span class="number">808</span> R  <span class="number">0</span>.<span class="number">3</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">01</span>.<span class="number">43</span> top                                                                    
<span class="number">29062</span> root      <span class="number">20</span>   <span class="number">0</span> <span class="number">1241</span><span class="keyword">m</span> <span class="number">227</span><span class="keyword">m</span>  <span class="number">10</span><span class="keyword">m</span> S  <span class="number">0</span>.<span class="number">3</span>  <span class="number">0</span>.<span class="number">7</span>   <span class="number">2</span>:<span class="number">07</span>.<span class="number">32</span> java                                                                   
    <span class="number">1</span> root      <span class="number">15</span>   <span class="number">0</span> <span class="number">10368</span>  <span class="number">684</span>  <span class="number">572</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">1</span>:<span class="number">30.85</span> init                                                                   
    <span class="number">2</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">01</span>.<span class="number">01</span> migration/<span class="number">0</span>                                                            
    <span class="number">3</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> ksoftirqd/<span class="number">0</span>                                                            
    <span class="number">4</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">0</span>                                                             
    <span class="number">5</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">80</span> migration/<span class="number">1</span>                                                            
    <span class="number">6</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> ksoftirqd/<span class="number">1</span>                                                            
    <span class="number">7</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">1</span>                                                             
    <span class="number">8</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">20.59</span> migration/<span class="number">2</span>                                                            
    <span class="number">9</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.09 ksoftirqd/<span class="number">2</span>                                                            
   <span class="number">10</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">2</span>                                                             
   <span class="number">11</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">23.66</span> migration/<span class="number">3</span>                                                            
   <span class="number">12</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">03</span> ksoftirqd/<span class="number">3</span>                                                            
   <span class="number">13</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">3</span>                                                             
   <span class="number">14</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">20.29</span> migration/<span class="number">4</span>                                                            
   <span class="number">15</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">07</span> ksoftirqd/<span class="number">4</span>                                                            
   <span class="number">16</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">4</span>                                                             
   <span class="number">17</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">23.07</span> migration/<span class="number">5</span>                                                            
   <span class="number">18</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">07</span> ksoftirqd/<span class="number">5</span>                                                            
   <span class="number">19</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">5</span>                                                             
   <span class="number">20</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">17.16</span> migration/<span class="number">6</span>                                                            
   <span class="number">21</span> root      <span class="number">34</span>  <span class="number">19</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">05</span> ksoftirqd/<span class="number">6</span>                                                            
   <span class="number">22</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">00</span>.<span class="number">00</span> watchdog/<span class="number">6</span>                                                             
   <span class="number">23</span> root      RT  -<span class="number">5</span>     <span class="number">0</span>    <span class="number">0</span>    <span class="number">0</span> S  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">0</span>:<span class="number">58.28</span> migration/<span class="number">7</span>
</code></pre><h6 id="统计信息区：">统计信息区：</h6>
<p>前五行是当前系统情况整体的统计信息区。下面我们看每一行信息的具体意义。</p>
<p>第一行，任务队列信息，同 uptime 命令的执行结果，具体参数说明情况如下：</p>
<pre><code><span class="number">14</span>:<span class="number">06</span>:<span class="number">23</span> — 当前系统时间
up <span class="number">70</span> days, <span class="number">16</span>:<span class="number">44</span> — 系统已经运行了<span class="number">70</span>天<span class="number">16</span>小时<span class="number">44</span>分钟（在这期间系统没有重启过的吆！）
<span class="number">2</span> users — 当前有<span class="number">2</span>个用户登录系统
<span class="built_in">load</span> <span class="built_in">average</span>: <span class="number">1.15</span>, <span class="number">1.42</span>, <span class="number">1.44</span> — <span class="built_in">load</span> <span class="built_in">average</span>后面的三个数分别是<span class="number">1</span>分钟、<span class="number">5</span>分钟、<span class="number">15</span>分钟的负载情况。
<span class="built_in">load</span> <span class="built_in">average</span>数据是每隔<span class="number">5</span>秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。
如果这个数除以逻辑CPU的数量，结果高于<span class="number">5</span>的时候就表明系统在超负荷运转了。
</code></pre><p>第二行，Tasks — 任务（进程），具体信息说明如下：</p>
<p>系统现在共有206个进程，其中处于运行中的有1个，205个在休眠（sleep），stoped状态的有0个，zombie状态（僵尸）的有0个。</p>
<p>第三行，cpu状态信息，具体属性说明如下：</p>
<pre><code><span class="number">5.9</span><span class="comment">%us — 用户空间占用CPU的百分比。</span>
<span class="number">3.4</span><span class="comment">% sy — 内核空间占用CPU的百分比。</span>
<span class="number">0.0</span><span class="comment">% ni — 改变过优先级的进程占用CPU的百分比</span>
<span class="number">90.4</span><span class="comment">% id — 空闲CPU百分比</span>
<span class="number">0.0</span><span class="comment">% wa — IO等待占用CPU的百分比</span>
<span class="number">0.0</span><span class="comment">% hi — 硬中断（Hardware IRQ）占用CPU的百分比</span>
<span class="number">0.2</span><span class="comment">% si — 软中断（Software Interrupts）占用CPU的百分比</span>
</code></pre><p>第四行,内存状态，具体信息如下：</p>
<pre><code><span class="number">32949016</span>k total — 物理内存总量（<span class="number">32</span>GB）
<span class="number">14411180</span>k used — 使用中的内存总量（<span class="number">14</span>GB）
<span class="number">18537836</span>k <span class="built_in">free</span> — 空闲内存总量（<span class="number">18</span>GB）
<span class="number">169884</span>k buffers — 缓存的内存量 （<span class="number">169</span>M）
</code></pre><p>第五行，swap交换分区信息，具体信息说明如下：</p>
<pre><code><span class="number">32764556</span>k total — 交换区总量（<span class="number">32</span>GB）
<span class="number">0</span>k used — 使用的交换区总量（<span class="number">0</span><span class="keyword">K</span>）
<span class="number">32764556</span>k free — 空闲交换区总量（<span class="number">32</span>GB）
<span class="number">3612636</span>k cached — 缓冲的交换区总量（<span class="number">3.6</span>GB）
</code></pre><p>备注：</p>
<p>如果出于习惯去计算可用内存数，这里有个近似的计算公式：第四行的free + 第四行的buffers + 第五行的cached，按这个公式此台服务器的可用内存：18537836k +169884k +3612636k = 22GB左右。</p>
<p>对于内存监控，在top里我们要时刻监控第五行swap交换分区的used，如果这个数值在不断的变化，说明内核在不断进行内存和swap的数据交换，这是真正的内存不够用了。</p>
<p>第六行，空行。</p>
<p>第七行以下：各进程（任务）的状态监控，项目列信息说明如下：</p>
<pre><code><span class="xml"><span class="tag"><span class="attribute">PID</span> — 进程<span class="attribute">id</span>
<span class="attribute">USER</span> — 进程所有者
<span class="attribute">PR</span> — 进程优先级
<span class="attribute">NI</span> — <span class="attribute">nice</span>值。负值表示高优先级，正值表示低优先级
<span class="attribute">VIRT</span> — 进程使用的虚拟内存总量，单位<span class="attribute">kb</span>。<span class="attribute">VIRT</span>=<span class="value">SWAP+RES</span>
<span class="attribute">RES</span> — 进程使用的、未被换出的物理内存大小，单位<span class="attribute">kb</span>。<span class="attribute">RES</span>=<span class="value">CODE+DATA</span>
<span class="attribute">SHR</span> — 共享内存大小，单位<span class="attribute">kb</span>
<span class="attribute">S</span> — 进程状态。<span class="attribute">D</span>=<span class="value">不可中断的睡眠状态</span> <span class="attribute">R</span>=<span class="value">运行</span> <span class="attribute">S</span>=<span class="value">睡眠</span> <span class="attribute">T</span>=<span class="value">跟踪</span>/停止 <span class="attribute">Z</span>=<span class="value">僵尸进程</span>
%<span class="attribute">CPU</span> — 上次更新到现在的<span class="attribute">CPU</span>时间占用百分比
%<span class="attribute">MEM</span> — 进程使用的物理内存百分比
<span class="attribute">TIME</span>+ — 进程使用的<span class="attribute">CPU</span>时间总计，单位<span class="attribute">1</span>/<span class="attribute">100</span>秒
<span class="attribute">COMMAND</span> — 进程名称（命令名/命令行）</span></span>
</code></pre><h3 id="sar">sar</h3>
<p>sar（System Activity Reporter）是系统活动情况报告的缩写。sar 工具将对系统当前的状态进行取样，然后通过计算数据和比例来表达系统的当前运行状态。它的特点是可以连续对系统取样，获得大量的取样数据；取样数据和分析的结果都可以存入文件，所需的负载很小。 sar 是目前 Linux 上最为全面的系统性能分析工具之一，可以从多方面对系统的活动进行报告，包括：文件的读写情况、系统调用的使用情况、磁盘I/O、CPU效率、内存使用状况、进程活动及IPC有关的活动等。为了提供不同的信息，sar 提供了丰富的选项、因此使用较为复杂。</p>
<p>安装：</p>
<pre><code><span class="preprocessor"># yum install sysstat</span>
</code></pre><p>一般格式：</p>
<pre><code>sar [ options... ] [ <span class="tag">&lt;<span class="title">interval</span>&gt;</span> [ <span class="tag">&lt;<span class="title">count</span>&gt;</span> ] ]
</code></pre><p>常用选项：</p>
<pre><code>-<span class="ruby"><span class="constant">A</span> ：包括绝大多数选项。
</span>-<span class="ruby">b ：报告<span class="constant">I</span>/<span class="constant">O</span>和传输速率统计。
</span>-<span class="ruby"><span class="constant">B</span> ：报告分页统计。
</span>-<span class="ruby">c ：报告进程创建活动。
</span>-<span class="ruby">d ：报告每个活动的块设备。(指磁盘)
</span>-<span class="ruby">e [ <span class="symbol">hh:</span><span class="symbol">mm:</span>ss ] ：设置sar命令执行的结束时间，时间为<span class="number">24</span>小时制格式。
</span>-<span class="ruby"><span class="constant">I</span> { irq | <span class="constant">SUM</span> | <span class="constant">ALL</span> | <span class="constant">XALL</span> } ：报告给定中断的统计。
</span>-<span class="ruby">n { <span class="constant">DEV</span> | <span class="constant">EDEV</span> | <span class="constant">NFS</span> | <span class="constant">NFSD</span> | <span class="constant">SOCK</span> | <span class="constant">ALL</span> } ：报告网络统计。
</span>-<span class="ruby"><span class="constant">P</span> { cpu | <span class="constant">ALL</span> } ：报告每个处理器的统计信息，可以统计指定或全部处理器。
</span>-<span class="ruby">q ：报告队列长度和平均负载。
</span>-<span class="ruby">r ：报告内存和交换空间的利用情况统计。
</span>-<span class="ruby"><span class="constant">R</span> ：报告内存统计。
</span>-<span class="ruby">u ：报告<span class="constant">CPU</span>利用率。
</span>interval ：两次输出之间的间隔时间。
count ：按照这个时间间隔统计的次数。
</code></pre><p>举例：</p>
<pre><code># sar 5 10
查看CUP使用情况，每隔5秒统计一次，共打印10次。
<span class="tag">%<span class="title">user</span></span> ：CPU在用户使用下的时间百分比。
<span class="tag">%<span class="title">nice</span></span> ：CPU在优先级用户下的使用时间百分比。
<span class="tag">%<span class="title">system</span></span> ：CPU在系统使用下的时间百分比。
<span class="tag">%<span class="title">iowait</span></span> ：CPU等待磁盘I/O完成时间的百分比。
<span class="tag">%<span class="title">steal</span></span> ：虚拟机占用的时间百分比。
<span class="tag">%<span class="title">idle</span></span> ：CPU空闲时间百分比。
# sar -b 2 5
查看磁盘I/O和传输速率情况，每隔2秒统计一次，共打印5次。
tps ：每秒传送到物理设备的总数。
rtps ：每秒读取物理设备请求的总数。
wtps ：每秒写入到物理设备请求的总数。
bread/s ：每秒从块设备读取数据的速度。
bwrtn/s ：每秒向块设备写入数据的速度。
单位为块(block)，一块为512 bytes。
# sar -c
查看进程创建情况。
proc/s ：每秒进程创建数。
# sar -d 2 3
查看设备使用情况。
DEV ：磁盘设备。
tps ：每秒传送到设备的总数。
rd_sec/s ：每秒读取数。(一扇区为512 bytes)
wr_sec/s ：每秒写入数。(一扇区为512 bytes)
avgrq-sz ：设备扇区请求的平均大小。
avgqu-sz ：设备队列请求的平均大小。
await ：服务等待I/O请求的平均时间。(单位毫秒)
svctm ：设备处理I/O请求的平均时间。(单位毫秒)
<span class="tag">%<span class="title">util</span></span> ：向设备I/O请求期间的CPU时间的百分比。
# sar -n DEV
查看网络接口信息。
IFACE ：LAN接口。
rxpck/s ：每秒钟接收的数据包。
txpck/s ：每秒钟发送的数据包。
rxbyt/s ：每秒钟接收的字节数。
txbyt/s ：每秒钟发送的字节数。
rxcmp/s ：每秒钟接收的压缩数据包。
txcmp/s ：每秒钟发送的压缩数据包。
rxmcst/s ：每秒钟接收的多播数据包。
# sar -u
查看CPU使用情况，与不带-u选项一样。
</code></pre>]]></content>
    
    
      <category term="Linux" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Linux/"/>
    
      <category term="Linux" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之观察者模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/observer/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/设计模式/observer/</id>
    <published>2014-05-21T01:49:19.000Z</published>
    <updated>2014-05-21T02:24:13.000Z</updated>
    <content type="html"><![CDATA[<h4 id="定义">定义</h4>
<p>定义了一种一对多的关系，让多个观察对象同时监听一个主题对象，当主题对象状态发生变化时会通知所有观察者。<br><img src="/img/Design patterns/observer.png" alt="类图"></p>
<h4 id="优缺点">优缺点</h4>
<ul>
<li>观察者与被观察者之间是属于轻度的关联关系，并且是抽象耦合的，这样，对于两者来说都比较容易进行扩展。</li>
<li>观察者模式是一种常用的触发机制，它形成一条触发链，依次对各个观察者的方法进行处理。但同时，这也算是观察者模式一个缺点，由于是链式触发，当观察者比较多的时候，性能问题是比较令人担忧的。并且，在链式结构中，比较容易出现循环引用的错误，造成系统假死。</li>
</ul>
<p>实验来自《大话设计模式》案例：公司里有两种上班时趁老板不在时偷懒的员工：看NBA的和看股票行情的，当老板出现时，老板秘书会提前通知他们继续做手头上的工作。</p>
<p><img src="/img/Design patterns/observer_1.jpg" alt="类图"></p>
<h4 id="Java版">Java版</h4>
<p>抽象通知者接口  老板给通知，或者前台给通知</p>
<pre><code><span class="keyword">public</span> <span class="keyword">interface</span> Subject {

    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Attach</span>(Observer observer);
    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Detach</span>(Observer observer);
    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">Notify</span>();
    <span class="keyword">public</span>  String <span class="title">getAction</span>();
    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setAction</span>(String action);
}
</code></pre><p>抽象观察者</p>
<pre><code><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> Observer {

    <span class="keyword">protected</span> String name;
    <span class="keyword">protected</span> Subject sub;
    <span class="keyword">public</span> <span class="title">Observer</span>(String name,Subject sub) {
        <span class="keyword">this</span>.name =name;
        <span class="keyword">this</span>.sub = sub;
    }
    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Update</span>();
}
</code></pre><p>具体通知者 Boss 前台，给所有观察者发通知</p>
<pre><code><span class="keyword">import</span> java.util.ArrayList;
<span class="keyword">import</span> java.util.List;
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">implements</span> <span class="title">Subject</span> {</span>
    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();
    <span class="keyword">private</span> String action;
    <span class="keyword">public</span> String <span class="title">getAction</span>() {
        <span class="keyword">return</span> action;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span>(String action) {
        <span class="keyword">this</span>.action = action;
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span>(Observer observer) {
        <span class="comment">// TODO Auto-generated method stub</span>
        observers.add(observer);

    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span>(Observer observer) {
        <span class="comment">// TODO Auto-generated method stub</span>
        observers.remove(observer);

    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>() {
        <span class="comment">// TODO Auto-generated method stub</span>
        <span class="keyword">for</span> (Observer o : observers) {
            o.Update();
        }

    }
}
<span class="keyword">import</span> java.util.ArrayList;
<span class="keyword">import</span> java.util.List;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Secretary</span> <span class="keyword">implements</span> <span class="title">Subject</span>{</span>
    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();
    <span class="keyword">private</span> String action;
    <span class="keyword">public</span> String <span class="title">getAction</span>() {
        <span class="keyword">return</span> action;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span>(String action) {
        <span class="keyword">this</span>.action = action;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Attach</span>(Observer observer) {
        observers.add(observer);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Detach</span>(Observer observer) {
        observers.remove(observer);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Notify</span>() {
        <span class="keyword">for</span> (Observer o : observers) {
            o.Update();
        }
    }

}
</code></pre><p>具体观察者</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBAObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> {</span>
    <span class="keyword">public</span> <span class="title">NBAObserver</span>(String name,Subject sub) {
        <span class="keyword">super</span>(name, sub);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>() {
        System.out.printf(<span class="keyword">super</span>.sub.getAction() + <span class="string">","</span> + <span class="keyword">super</span>.name + <span class="string">" stop watching NBA!!! go on working!!!\n"</span>);

    }

}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span>{</span>
    <span class="keyword">public</span> <span class="title">StockObserver</span>(String name,Subject sub) {
        <span class="keyword">super</span>(name,sub);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>(){
        System.out.printf(<span class="keyword">super</span>.sub.getAction() + <span class="string">","</span> + <span class="keyword">super</span>.name + <span class="string">" stop stocking!!! go on working!!!\n"</span>);
    }

}
</code></pre><p>客户端</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> test {

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        <span class="comment">// TODO Auto-generated method stub</span>
        Secretary sec = <span class="keyword">new</span> Secretary();
        Boss boss = <span class="keyword">new</span> Boss();
        StockObserver so1 = <span class="keyword">new</span> StockObserver(<span class="string">"A"</span>,sec);
        NBAObserver so2 = <span class="keyword">new</span> NBAObserver(<span class="string">"B"</span>,sec);
        StockObserver so3 = <span class="keyword">new</span> StockObserver(<span class="string">"C"</span>,boss);
        NBAObserver so4 = <span class="keyword">new</span> NBAObserver(<span class="string">"D"</span>,boss);
        NBAObserver so5 = <span class="keyword">new</span> NBAObserver(<span class="string">"E"</span>,boss);
        sec.Attach(so1);
        sec.Attach(so2);
        boss.Attach(so3);
        boss.Attach(so4);
        boss.Attach(so5);
        boss.Detach(so4);
        sec.setAction(<span class="string">"boss is comming!!!"</span>);
        boss.setAction(<span class="string">"I'boss!!!"</span>);
        sec.Notify();
        boss.Notify();
    }

}
</code></pre><h4 id="Python版">Python版</h4>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Observer</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,strname,strsub)</span>:</span>
        self.name = strname
        self.sub = strsub
    <span class="function"><span class="keyword">def</span> <span class="title">Update</span><span class="params">(self)</span>:</span>
        <span class="keyword">pass</span>

<span class="class"><span class="keyword">class</span> <span class="title">StockObserver</span><span class="params">(Observer)</span>:</span>
    <span class="comment">#no need to rewrite __init__()</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Update</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"%s:%s,stop watching Stock and go on work!"</span> %(self.name,self.sub.action)

<span class="class"><span class="keyword">class</span> <span class="title">NBAObserver</span><span class="params">(Observer)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Update</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"%s:%s,stop watching NBA and go on work!"</span> %(self.name,self.sub.action)

<span class="class"><span class="keyword">class</span> <span class="title">SecretaryBase</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>
        self.observers = []
    <span class="function"><span class="keyword">def</span> <span class="title">Attach</span><span class="params">(self,new_observer)</span>:</span>
        <span class="keyword">pass</span> 
    <span class="function"><span class="keyword">def</span> <span class="title">Notify</span><span class="params">(self)</span>:</span>
        <span class="keyword">pass</span>

<span class="class"><span class="keyword">class</span> <span class="title">Secretary</span><span class="params">(SecretaryBase)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Attach</span><span class="params">(self,new_observer)</span>:</span>
        self.observers.append(new_observer)
    <span class="function"><span class="keyword">def</span> <span class="title">Notify</span><span class="params">(self)</span>:</span>
        <span class="keyword">for</span> p <span class="keyword">in</span> self.observers:
            p.Update()

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    p = Secretary()
    s1 = StockObserver(<span class="string">"xh"</span>,p)
    s2 = NBAObserver(<span class="string">"wyt"</span>,p)
    p.Attach(s1);
    p.Attach(s2);
    p.action = <span class="string">"WARNING:BOSS "</span>;
    p.Notify()
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简单工厂、工厂方法、抽象工厂的区别]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factorydiff/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/21/设计模式/factorydiff/</id>
    <published>2014-05-21T01:06:07.000Z</published>
    <updated>2014-05-21T01:45:40.000Z</updated>
    <content type="html"><![CDATA[<p>本文参考<a href="http://blog.csdn.net/superbeck/article/details/4446177" target="_blank">http://blog.csdn.net/superbeck/article/details/4446177</a> 和 <a href="http://lavasoft.blog.51cto.com/62575/11674" target="_blank">http://lavasoft.blog.51cto.com/62575/11674</a></p>
<h4 id="简单工厂">简单工厂</h4>
<p>简单工厂模式的工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的对象实例。不修改代码的话，是无法扩展的。<br><img src="/img/Design patterns/factory_diff/1.jpg" alt="类图"></p>
<h4 id="工厂方法">工厂方法</h4>
<p>工厂方法是针对每一种产品提供一个工厂类。通过不同的工厂实例来创建不同的产品实例。在同一等级结构中，支持增加任意产品。<br><img src="/img/Design patterns/factory_diff/2.jpg" alt="类图"></p>
<h4 id="抽象工厂">抽象工厂</h4>
<p>抽象工厂是应对产品族概念的。比如说，每个汽车公司可能要同时生产轿车，货车，客车，那么每一个工厂都要有创建轿车，货车和客车的方法。应对产品族概念而生，增加新的产品线很容易，但是无法增加新的产品。<br><img src="/img/Design patterns/factory_diff/3.jpg" alt="类图"></p>
<h4 id="产品族和产品等级">产品族和产品等级</h4>
<p>产品族：是指位于不同产品等级结构中，功能相关联的产品组成的家族。比如AMD的CPU和ADM芯片的主板，组成一个家族。Intel的CPU和Intel芯片的主板，又组成一个家族。而这两个家族都来自于两个产品等级：CPU，主板。一个等级结构是由相同的结构的产品组成，示意图如下：<br><img src="/img/Design patterns/factory_diff/4.png" alt=" "></p>
<h4 id="区别">区别</h4>
<p>简单工厂 ： 用来生产同一等级结构中的任意产品。（对于增加新的产品，无能为力）</p>
<p>工厂方法 ：用来生产同一等级结构中的固定产品。（支持增加任意产品）   </p>
<p>抽象工厂 ：用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）</p>
<h4 id="案例">案例</h4>
<p>有一个农场，生产各种水果，有苹果（Apple）、草莓（Strawberry）、葡萄（Grape）；农场的园丁（FruitGardener）要根据客户的需求，提供相应的水果。</p>
<h6 id="简单工厂模式">简单工厂模式</h6>
<p><img src="/img/Design patterns/factory_diff/5.png" alt="类图"></p>
<p>在简单工厂模式中，有个全能的园丁，控制所有作物的种植、生长和收获。现在农场规模变大了，管理更加专业化了。过去全能的园丁没有了，每一种作物都有专门的园丁管理，形成了规模化和专业化生产。</p>
<h6 id="工厂模式">工厂模式</h6>
<p><img src="/img/Design patterns/factory_diff/6.png" alt="类图"></p>
<p>聪明的农场主总是让自己的庄园越来越有价值，“农场”在经历了简单工厂模式和工厂模式后，不断的扩大生产。如今，再次面临新的大发展，一项重要的工作就是引进塑料大棚技术，在大棚里种植热带（Tropical）和亚热带（Northern）的水果和蔬菜，用以满足市场需求，获取更大的利益。</p>
<h6 id="抽象工厂模式">抽象工厂模式</h6>
<p><img src="/img/Design patterns/factory_diff/8.png" alt="产品图"><br><img src="/img/Design patterns/factory_diff/7.png" alt="类图"></p>
]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之抽象工厂模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/abstractfactory/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/abstractfactory/</id>
    <published>2014-05-20T12:08:21.000Z</published>
    <updated>2014-05-20T13:06:21.000Z</updated>
    <content type="html"><![CDATA[<h4 id="定义">定义</h4>
<p>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们的具体类<br>分析：</p>
<ul>
<li>易于交换产品系列，具体工厂类在一个应用中只需要初始化的时候出现一次，这就使改变一个应用的具体工厂变得容易，它只需要改变具体工厂即可使用不同产品配置。</li>
<li>让具体的创建实例过程与客户端分离，客户端是通过它们的抽象接口操纵实例，产品具体类名也被具体工厂实现分离，不会出现在客户代码中。</li>
<li>对产品的扩展比较麻烦，费力，如果需要增加一个新产品，则要改动几乎所有的工厂类。</li>
</ul>
<p><img src="/img/Design patterns/abstractfactory.png" alt="类图"></p>
<p>这个实验案例来自于网上</p>
<h4 id="Java版">Java版</h4>
<p>抽象产品角色（我们定义了一个打印机）</p>
<pre><code><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> Printer
{
    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">out</span>();

    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg);
}
</code></pre><p>抽象工厂角色</p>
<pre><code><span class="keyword">public</span> <span class="keyword">interface</span> PrinterFactory
{
    <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String type);
}
</code></pre><p>具体工厂角色（我们定义4个具体工厂，一个是高速打印机工厂，一个是普通打印机工厂，一个是戴尔打印机工厂，一个是惠普打印机工厂）</p>
<pre><code>    <span class="comment">/*
     * a、生产高速打印机的工厂
     * b、可以是戴尔，也可以是惠普
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String type)
        {
            <span class="keyword">if</span>(type.equals(<span class="string">"dell"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellBetterPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"hp"</span>))
            {
            <span class="keyword">return</span> <span class="keyword">new</span> HpBetterPrinter();
            }
            <span class="keyword">else</span>
            {
            <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }

    <span class="comment">/*
     * a、生产普通打印机的工厂
     * b、可以是戴尔，也可以是惠普
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String type)
        {
            <span class="keyword">if</span>(type.equals(<span class="string">"dell"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellCommonPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(type.equals(<span class="string">"hp"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> HpCommonPrinter();
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }


    <span class="comment">/*
     * a、生产戴尔打印机的工厂
     * b、可以是高速打印机，也可以是普通打印机
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String vendor)
        {
            <span class="keyword">if</span>(vendor.equals(<span class="string">"better"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellBetterPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(vendor.equals(<span class="string">"common"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> DellCommonPrinter();
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }


    <span class="comment">/*
     * a、生产惠普打印机的工厂
     * b、可以是高速打印机，也可以是普通打印机
     */</span>
    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpPrinterFactory</span> <span class="keyword">implements</span> <span class="title">PrinterFactory</span>
    {</span>
        <span class="keyword">public</span> Printer <span class="title">getPrinter</span>(String vendor)
        {
            <span class="keyword">if</span>(vendor.equals(<span class="string">"better"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> HpBetterPrinter();
            }
            <span class="keyword">else</span> <span class="keyword">if</span>(vendor.equals(<span class="string">"common"</span>))
            {
                <span class="keyword">return</span> <span class="keyword">new</span> HpCommonPrinter();
            }
            <span class="keyword">else</span>
            {
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }
    }    
</code></pre><p>具体产品角色（我们定义四个产品。戴尔高速打印机，戴尔普通打印机，惠普高速打印机，惠普普通打印机）</p>
<pre><code><span class="javadoc">/**
 * 戴尔高速打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellBetterPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE * <span class="number">2</span>];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE * <span class="number">2</span>)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"戴尔高速打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }
    }
}


<span class="javadoc">/**
 * 戴尔普通打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellCommonPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"戴尔普通打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }

    }
}


<span class="javadoc">/**
 * 惠普高速打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpBetterPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE * <span class="number">2</span>];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE * <span class="number">2</span>)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"惠普高速打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }
    }
}


<span class="javadoc">/**
 * 惠普普通打印机
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HpCommonPrinter</span> <span class="keyword">extends</span> <span class="title">Printer</span>
{</span>
    <span class="keyword">private</span>  <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_LINE = <span class="number">10</span>;
    <span class="keyword">private</span> String[] printData = <span class="keyword">new</span> String[MAX_CACHE_LINE];

    <span class="keyword">private</span> <span class="keyword">int</span> dataNum = <span class="number">0</span>;

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span>(String msg)
    {
        <span class="keyword">if</span>(dataNum &gt;= MAX_CACHE_LINE)
        {
            System.out.println(<span class="string">"输出队列已满,添加失败"</span>);
        }
        <span class="keyword">else</span>
        {
            printData[dataNum++] = msg;
        }
    }

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span>()
    {
        <span class="keyword">while</span>(dataNum&gt;<span class="number">0</span>)
        {
            System.out.println(<span class="string">"惠普普通打印机打印: "</span>+printData[<span class="number">0</span>]);

            System.arraycopy(printData,<span class="number">1</span>,printData,<span class="number">0</span>,--dataNum);
        }
    }
}
</code></pre><p>制造出一个想要的工厂，去生产相对应的打印机</p>
<pre><code>/*
 * 制造出一个想要的工厂，去生产相对应的打印机
 */
<span class="keyword">public</span> <span class="keyword">class</span> PrinterFactoryFactory
{
    <span class="keyword">public</span>  PrinterFactory getPrintFactory(String <span class="class"><span class="keyword">type</span>)</span>
    {
        <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"common"</span>))<span class="comment">//造出一个生产普通打印机的工厂</span>
        {
            <span class="keyword">return</span> <span class="keyword">new</span> CommonPrinterFactory();
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"better"</span>))<span class="comment">//造出一个生产高速打印机的工厂</span>
        {
            <span class="keyword">return</span> <span class="keyword">new</span> BetterPrinterFactory();
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"dell"</span>))<span class="comment">//造出一个生产戴尔打印机的工厂</span>
        {
            <span class="keyword">return</span> <span class="keyword">new</span> DellPrinterFactory();<span class="comment">//造出一个生产惠普打印机的工厂</span>
        }
        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="class"><span class="keyword">type</span>.<span class="title">equals</span>(</span><span class="string">"hp"</span>))
        {
            <span class="keyword">return</span> <span class="keyword">new</span> HpPrinterFactory();
        }
        <span class="keyword">else</span>
        {
            <span class="keyword">return</span> <span class="keyword">null</span>;
        }
    }
}
</code></pre><p>客户端</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Computer
{
    <span class="keyword">private</span> Printer <span class="keyword">out</span>;

    <span class="keyword">public</span> <span class="title">Computer</span>(Printer <span class="keyword">out</span>)
    {
        <span class="keyword">this</span>.<span class="keyword">out</span> = <span class="keyword">out</span>;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyIn</span>(String msg)
    {
        <span class="keyword">out</span>.getData(msg);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()
    {
        <span class="keyword">out</span>.<span class="keyword">out</span>();
    }
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args)
    {
        PrinterFactoryFactory pff = <span class="keyword">new</span> PrinterFactoryFactory();
        PrinterFactory of = pff.getPrintFactory(<span class="string">"common"</span>);
        Computer c = <span class="keyword">new</span> Computer(of.getPrinter(<span class="string">"hp"</span>));
        c.keyIn(<span class="string">"hello"</span>);
        c.keyIn(<span class="string">"world"</span>);
        c.print();

        PrinterFactoryFactory pff2 = <span class="keyword">new</span> PrinterFactoryFactory();
        PrinterFactory of2 = pff2.getPrintFactory(<span class="string">"hp"</span>);
        Computer c2 = <span class="keyword">new</span> Computer(of2.getPrinter(<span class="string">"common"</span>));
        c2.keyIn(<span class="string">"hello"</span>);
        c2.keyIn(<span class="string">"world"</span>);
        c2.print();
    }
}
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之工厂模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/factory/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/factory/</id>
    <published>2014-05-20T11:34:39.000Z</published>
    <updated>2014-05-20T12:06:36.000Z</updated>
    <content type="html"><![CDATA[<h4 id="工厂模式定义">工厂模式定义</h4>
<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p>
<h4 id="优点">优点</h4>
<ul>
<li>可以使代码结构清晰，有效地封装变化。在编程中，产品类的实例化有时候是比较复杂和多变的，通过工厂模式，将产品的实例化封装起来，使得调用者根本无需关心产品的实例化过程，只需依赖工厂即可得到自己想要的产品。</li>
<li>对调用者屏蔽具体的产品类。如果使用工厂模式，调用者只关心产品的接口就可以了，至于具体的实现，调用者根本无需关心。即使变更了具体的实现，对调用者来说没有任何影响。</li>
<li>降低耦合度。产品类的实例化通常来说是很复杂的，它需要依赖很多的类，而这些类对于调用者来说根本无需知道，如果使用了工厂方法，我们需要做的仅仅是实例化好产品类，然后交给调用者使用。对调用者来说，产品所依赖的类都是透明的。</li>
</ul>
<p><img src="/img/Design patterns/factory.png" alt="类图"></p>
<p>实验来自《大话设计模式》   程序实例：基类雷锋类，派生出学生类和志愿者类，由这两种子类完成“学雷锋”工作。子类的创建由雷锋工厂的对应的子类完成。</p>
<h4 id="Java版">Java版</h4>
<p>基类：雷锋类</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> LeiFeng {

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Sweep</span>() {
        System.<span class="keyword">out</span>.println(<span class="string">"Sweep"</span>);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Wash</span>() {
        System.<span class="keyword">out</span>.println(<span class="string">"wash"</span>);
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BuyRice</span>() {
        System.<span class="keyword">out</span>.println(<span class="string">"buy"</span>);
    }
}
</code></pre><p>学生类和志愿者类</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volunteer</span> <span class="keyword">extends</span> <span class="title">LeiFeng</span>{</span>

}
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Undergraduate</span> <span class="keyword">extends</span> <span class="title">LeiFeng</span>{</span>

}
</code></pre><p>定义雷锋工厂</p>
<pre><code><span class="keyword">public</span> <span class="keyword">interface</span> IFactory {

    LeiFeng CreateLeiFeng();
}
</code></pre><p>毕业生工厂、志愿者工厂，返回毕业生、志愿者实例</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndergraduateFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> {</span>

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> LeiFeng <span class="title">CreateLeiFeng</span>() {
        <span class="comment">// TODO Auto-generated method stub</span>
        <span class="keyword">return</span> <span class="keyword">new</span> Undergraduate();
    }
}

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolunteerFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> {</span>

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> LeiFeng <span class="title">CreateLeiFeng</span>() {
        <span class="comment">// TODO Auto-generated method stub</span>
        <span class="keyword">return</span> <span class="keyword">new</span> Volunteer();
    }

}
</code></pre><p>客户端</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> test {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String args[]){
        <span class="comment">//毕业生去当雷锋，只需要得到一个实例就OK了</span>
        IFactory factory = <span class="keyword">new</span> UndergraduateFactory();
        LeiFeng stduent = factory.CreateLeiFeng();
        stduent.BuyRice();
        stduent.Wash();
        stduent.Sweep();
    }

}
</code></pre><h4 id="Python版">Python版</h4>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">LeiFeng</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Sweep</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"LeiFeng sweep"</span>

<span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(LeiFeng)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Sweep</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"Student sweep"</span>

<span class="class"><span class="keyword">class</span> <span class="title">Volenter</span><span class="params">(LeiFeng)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">Sweep</span><span class="params">(self)</span>:</span>
        <span class="keyword">print</span> <span class="string">"Volenter sweep"</span>

<span class="class"><span class="keyword">class</span> <span class="title">LeiFengFactory</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">CreateLeiFeng</span><span class="params">(self)</span>:</span>
        temp = LeiFeng()
        <span class="keyword">return</span> temp

<span class="class"><span class="keyword">class</span> <span class="title">StudentFactory</span><span class="params">(LeiFengFactory)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">CreateLeiFeng</span><span class="params">(self)</span>:</span>
        temp = Student()
        <span class="keyword">return</span> temp

<span class="class"><span class="keyword">class</span> <span class="title">VolenterFactory</span><span class="params">(LeiFengFactory)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">CreateLeiFeng</span><span class="params">(self)</span>:</span>
        temp = Volenter()
        <span class="keyword">return</span> temp

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    sf = StudentFactory()
    s=sf.CreateLeiFeng()
    s.Sweep()
    sdf = VolenterFactory()
    sd=sdf.CreateLeiFeng()
    sd.Sweep()
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之单例模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/singleton/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/singleton/</id>
    <published>2014-05-20T10:15:49.000Z</published>
    <updated>2014-05-20T11:16:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="单例模式有以下特点：">单例模式有以下特点：</h4>
<ul>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ul>
<p>应用场景  例如：数据库连接池的设计一般是采用单例模式，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单例模式来维护，就可以大大降低这种损耗。</p>
<p><img src="/img/Design patterns/Singleton.png" alt="类图"></p>
<h4 id="经典懒汉模式">经典懒汉模式</h4>
<pre><code>class LazySingleton{

    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton;

    <span class="keyword">private</span> <span class="title">LazySingleton</span>(){

    }

    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span>(){

        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>){

            singleton=<span class="keyword">new</span> LazySingleton();

        }

        <span class="keyword">return</span> singleton;

    }  

}
</code></pre><p>但是这种设计不满足线程安全的要求，在并发环境下很可能出现多个Singleton实例。</p>
<p>注：线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。或者说：一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题。</p>
<h4 id="饿汉模式">饿汉模式</h4>
<pre><code>class HungrySingleton{

    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton singleton=<span class="keyword">new</span> HungrySingleton();

    <span class="keyword">private</span> <span class="title">HungrySingleton</span>(){}

    <span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span>(){

        <span class="keyword">return</span> singleton;

    }

}
</code></pre><p>饿汉模式就是在jvm进程启动并在我们主动使用该类的时候就会在内存中初始化一个单例对象，当我们调用getInstance()的时候直接获取该对象，它的创建是在我们调用getInstance()静态方法之前！但是这种写法没实现Lazy loading。</p>
<h4 id="改造的懒汉模式">改造的懒汉模式</h4>
<pre><code>class LazySingleton{

        <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton;

        <span class="keyword">private</span> <span class="title">LazySingleton</span>(){

        }

        <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span>(){

            <span class="keyword">if</span>(singleton==<span class="keyword">null</span>){

                singleton=<span class="keyword">new</span> LazySingleton();

            }

            <span class="keyword">return</span> singleton;

        }  

    }
</code></pre><p>懒汉模式是相对于饿汉模式而言的，在jvm进程启动并在我们主动使用该类的时候不会在内存中初始化一个单例对象，只有当我们调用getInstance()的时候才去创建该对象，它的创建是在我们调用getInstance()静态方法之后，为了并没现象同步问题，我们在getInstance()方法上加了一个锁，这个方法每次只允许一个线程进来，虽然同步问题是解决了，但是相应的性能问题就出现了。</p>
<h4 id="静态内部类">静态内部类</h4>
<pre><code>class InternalSingleton{

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> SingletonHolder{

        <span class="keyword">private</span> final <span class="keyword">static</span>  InternalSingleton INSTANCE=<span class="keyword">new</span> InternalSingleton();

    }  

    <span class="keyword">private</span> <span class="title">InternalSingleton</span>(){}

    <span class="keyword">public</span> <span class="keyword">static</span> InternalSingleton <span class="title">getInstance</span>(){

        <span class="keyword">return</span> SingletonHolder.INSTANCE;

    }

}
</code></pre><p>加载时不会初始化静态变量INSTANCE，因为没有主动使用，达到Lazy loading</p>
<h4 id="枚举">枚举</h4>
<pre><code><span class="keyword">enum</span> EnumSingleton{
    INSTANCE;
    <span class="comment">//自定义方法</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span>(){
    }
}
</code></pre><p>EnumSingleton.INSTANCE直接调用，《Effective Java》作者推荐使用的方法，优点：不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象</p>
<h4 id="双重校验锁">双重校验锁</h4>
<p>这个我没怎么看懂，就不贴代码了，如有兴趣，自行搜索。</p>
]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之策略模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/strategy/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/strategy/</id>
    <published>2014-05-20T08:29:14.000Z</published>
    <updated>2014-05-20T10:07:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="策略模式（Strategy）">策略模式（Strategy）</h4>
<p>定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的用户。</p>
<p>策略模式是一种定义一系列算法的方法，从概念上看，所有这些算法完成的都是相同的工作，只是实现上不同，它可以以相同的方式调用所有的算法，减少各种算法类与算法使用类之间的耦合。</p>
<p>策略模式是用来封装算法的，但在实践中发现，可以用它来封装几乎任何类型的规则，只要在分析过程中需要在不同时间应用不同的业务规则，就可以考虑使用策略模式来处理这种变化的可能性。</p>
<h4 id="策略模式的好处">策略模式的好处</h4>
<ul>
<li>利用继承能有助于析取出不同算法中的公共功能</li>
<li>简化了单元测试，因为每个算法都有自己的实现类，可以通过自己的接口单独进行测试</li>
<li>将不同的行为封装到一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句，因为当不同的行为堆叠在一个类中时，就难以避免用条件语句来选择合适的行为。</li>
</ul>
<p>实验来自&lt;&lt;大话设计模式&gt;&gt;<br><img src="/img/Design patterns/Strategy.jpg" alt="类图"></p>
<h4 id="Java版">Java版</h4>
<p>抽象策略类</p>
<pre><code><span class="keyword">abstract</span> class CashSuper {
    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money);
}
</code></pre><p>具体策略类</p>
<pre><code>CashNormal.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashNormal</span> <span class="keyword">extends</span> <span class="title">CashSuper</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money) {
        <span class="keyword">return</span> money;
    }

}
CashRebate.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashRebate</span> <span class="keyword">extends</span> <span class="title">CashSuper</span>{</span>

    <span class="keyword">private</span> <span class="keyword">double</span> moneyRebate =<span class="number">1</span>d;
    <span class="keyword">public</span> <span class="title">CashRebate</span>(String moneyRebate){
        <span class="keyword">this</span>.moneyRebate = Double.parseDouble(moneyRebate);
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money) {

        <span class="keyword">return</span> money * moneyRebate;
    }

}
CashReturn.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashReturn</span> <span class="keyword">extends</span> <span class="title">CashSuper</span> {</span>

    <span class="keyword">private</span> <span class="keyword">double</span> moneyCondition = <span class="number">0.0</span>d;
    <span class="keyword">private</span> <span class="keyword">double</span> moneyReturn = <span class="number">0.0</span>d;
    <span class="keyword">public</span> <span class="title">CashReturn</span>(String moneyCondition,String moneyReturn){
        <span class="keyword">this</span>.moneyCondition = Double.parseDouble(moneyCondition);
        <span class="keyword">this</span>.moneyReturn = Double.parseDouble(moneyReturn);
    }

    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acceptCash</span>(<span class="keyword">double</span> money) {
        <span class="keyword">double</span> result = money;
        <span class="keyword">if</span> (money &gt;= moneyCondition) {
            result = money - Math.floor(money / moneyCondition) * moneyReturn;
        }
        <span class="keyword">return</span> result;
    }

}
</code></pre><p>定义一个Context上下文，用一个ConcreteStrategy来配置，维护Strategy对象</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> CashContext {

    CashSuper cs ;

    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCs</span>(CashSuper cs) {
        <span class="keyword">this</span>.cs = cs;
    }
    <span class="keyword">public</span> <span class="title">CashContext</span>(String type){
        <span class="keyword">switch</span> (type){
        <span class="keyword">case</span> <span class="string">"1"</span>:   <span class="comment">//normal</span>
            cs = <span class="keyword">new</span> CashNormal();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"2"</span>:   <span class="comment">//return</span>
            CashReturn cr1 = <span class="keyword">new</span> CashReturn(<span class="string">"300"</span>,<span class="string">"100"</span>);
            cs = cr1;
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"3"</span>:     <span class="comment">//0.8</span>
            CashRebate cr2 = <span class="keyword">new</span> CashRebate(<span class="string">"0.8"</span>);
            cs = cr2;
            <span class="keyword">break</span>;
        }
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getResult</span>(<span class="keyword">double</span> money){
        <span class="keyword">return</span> cs.acceptCash(money);
    }
}
</code></pre><p>客户端</p>
<pre><code>import java.util.Scanner;
<span class="keyword">public</span> <span class="keyword">class</span> test {

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {

        <span class="keyword">double</span> money =<span class="number">0.0</span>d;
        String strategy =<span class="keyword">null</span>;
        Scanner read =<span class="keyword">new</span> Scanner (System.<span class="keyword">in</span>);
        System.<span class="keyword">out</span>.println(<span class="string">"Please choose strategy: 1:normal 2:满300返100 3:打0.8折"</span>);
        strategy = read.next();
        System.<span class="keyword">out</span>.println(<span class="string">"Please input  money"</span>);
        money=Double.valueOf(read.next());<span class="comment">//Double.parseDouble(read.next())</span>
        <span class="keyword">double</span> totalPrices = <span class="number">0</span>d;
        CashContext csuper =<span class="keyword">new</span> CashContext(strategy);
        totalPrices=csuper.getResult(money);
        System.<span class="keyword">out</span>.println(<span class="string">" "</span>+totalPrices);
    }

}
</code></pre><h4 id="Python版">Python版</h4>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">CashSuper</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> <span class="number">0</span>

<span class="class"><span class="keyword">class</span> <span class="title">CashNormal</span><span class="params">(CashSuper)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> money

<span class="class"><span class="keyword">class</span> <span class="title">CashRebate</span><span class="params">(CashSuper)</span>:</span>
    discount = <span class="number">0</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,ds)</span>:</span>
        self.discount = ds
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> money * self.discount

<span class="class"><span class="keyword">class</span> <span class="title">CashReturn</span><span class="params">(CashSuper)</span>:</span>
    total = <span class="number">0</span>;
    ret = <span class="number">0</span>;
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,t,r)</span>:</span>
        self.total = t
        self.ret = r
    <span class="function"><span class="keyword">def</span> <span class="title">AcceptCash</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">if</span> (money&gt;=self.total):
            <span class="keyword">return</span> money - self.ret
        <span class="keyword">else</span>:
            <span class="keyword">return</span> money

<span class="class"><span class="keyword">class</span> <span class="title">CashContext</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,csuper)</span>:</span>
        self.cs = csuper
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self,money)</span>:</span>
        <span class="keyword">return</span> self.cs.AcceptCash(money)

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    money = input(<span class="string">"money:"</span>)
    strategy = {}
    strategy[<span class="number">1</span>] = CashContext(CashNormal())
    strategy[<span class="number">2</span>] = CashContext(CashRebate(<span class="number">0.8</span>))
    strategy[<span class="number">3</span>] = CashContext(CashReturn(<span class="number">300</span>,<span class="number">100</span>))
    ctype = input(<span class="string">"type:[1]for normal,[2]for 80% discount [3]for 300 -100."</span>)
    <span class="keyword">if</span> ctype <span class="keyword">in</span> strategy:
        cc = strategy[ctype]
    <span class="keyword">else</span>:
        <span class="keyword">print</span> <span class="string">"Undefine type.Use normal mode."</span>
        cc = strategy[<span class="number">1</span>]
    <span class="keyword">print</span> <span class="string">"you will pay:%d"</span> %(cc.GetResult(money))
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式之简单工厂模式]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/simplefactory/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/simplefactory/</id>
    <published>2014-05-20T07:31:09.000Z</published>
    <updated>2014-05-20T08:25:23.000Z</updated>
    <content type="html"><![CDATA[<p>何谓是简单工厂模式呢，因为在我们日常编程中，经常出现一种情况就是每当“new”一个对象之后，这个对象就依赖于某个类。如果在后期的维护过程中由于某些原因需要修改一下这个类，则唯一的做法就是打开源代码，进行修改，修改所有与这个对象有关的操作。这对我们是非常不利的。问题出来了：对象不能应对“具体实例化类型”的变化。那么简单工厂模式就是出来了，它的意图就是：专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类或接口。或者是提供一个类，由它负责根据一定的条件创建某一具体类的实例。</p>
<p>实验来自&lt;&lt;大话设计模式&gt;&gt;<br><img src="/img/Design patterns/simplefactory_1.png" alt="类图"></p>
<h4 id="Java版">Java版</h4>
<p>计算类</p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> Operation {

    <span class="keyword">protected</span> <span class="keyword">double</span> numA;
    <span class="keyword">protected</span> <span class="keyword">double</span> numB;
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getNumA</span>() {
        <span class="keyword">return</span> numA;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumA</span>(<span class="keyword">double</span> numA) {
        <span class="keyword">this</span>.numA = numA;
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getNumB</span>() {
        <span class="keyword">return</span> numB;
    }
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumB</span>(<span class="keyword">double</span> numB) {
        <span class="keyword">this</span>.numB = numB;
    }
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        <span class="keyword">return</span> result;
    }
}
</code></pre><p>加减乘除类，继承计算类</p>
<pre><code>Add.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">Operation</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
    <span class="keyword">double</span> result=<span class="number">0</span>;
    result =numA+numB;
    <span class="keyword">return</span> result;
    }
}
Mul.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mul</span> <span class="keyword">extends</span> <span class="title">Operation</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        result =numA*numB;
        <span class="keyword">return</span> result;
    }
}
Sub.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Operation</span> {</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        result =numA-numB;
        <span class="keyword">return</span> result;
    }
}
Div.java
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Div</span> <span class="keyword">extends</span> <span class="title">Operation</span>{</span>
    <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResult</span>(){
        <span class="keyword">double</span> result=<span class="number">0</span>;
        <span class="keyword">if</span>(numB == <span class="number">0</span>){
            <span class="keyword">try</span>{
                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"00000"</span>);
            }<span class="keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }<span class="keyword">else</span>{
            result =numA+numB;
        }
    <span class="keyword">return</span> result;
    }    
}
</code></pre><p>工厂类    </p>
<pre><code><span class="keyword">public</span> <span class="keyword">class</span> OperationFactory {
    <span class="keyword">public</span> <span class="keyword">static</span> Operation <span class="title">createOperation</span>(String operate){
        Operation oper =<span class="keyword">null</span>;
        <span class="keyword">switch</span>(operate){
        <span class="keyword">case</span> <span class="string">"+"</span>:
            oper =<span class="keyword">new</span> Add();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"-"</span>:
            oper =<span class="keyword">new</span> Sub();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"*"</span>:
            oper =<span class="keyword">new</span> Mul();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"/"</span>:
            oper =<span class="keyword">new</span> Div();
            <span class="keyword">break</span>;
        }
        <span class="keyword">return</span> oper;
    }

}
</code></pre><p>客户端</p>
<pre><code>import java<span class="preprocessor">.util</span><span class="preprocessor">.Scanner</span>；
public class test {
    public static void main(String[] args) {
        try{
            Operation oper<span class="comment">;</span>
            Scanner read =new Scanner (System<span class="preprocessor">.in</span>)<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"The first number"</span>)<span class="comment">;</span>
            String numA=read<span class="preprocessor">.next</span>()<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"The Operation"</span>)<span class="comment">;</span>
            String operate=read<span class="preprocessor">.next</span>()<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"The sencond number"</span>)<span class="comment">;</span>
            String numB=read<span class="preprocessor">.next</span>()<span class="comment">;</span>
            oper=OperationFactory<span class="preprocessor">.createOperation</span>(operate)<span class="comment">;</span>
            oper<span class="preprocessor">.numA</span> = Double<span class="preprocessor">.valueOf</span>(numA)<span class="comment">;</span>
            oper<span class="preprocessor">.numB</span> = Double<span class="preprocessor">.valueOf</span>(numB)<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(numA+operate+numB+<span class="string">"==?"</span>)<span class="comment">;</span>

            double result=<span class="number">0</span> <span class="comment">;</span>
            result =oper<span class="preprocessor">.GetResult</span>()<span class="comment">;</span>
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"the result is:"</span>+result)<span class="comment">;</span>
            }catch (Exception e){
            System<span class="preprocessor">.out</span><span class="preprocessor">.println</span>(<span class="string">"you have something wrong : "</span> + e<span class="preprocessor">.getMessage</span>())<span class="comment">;</span>
            }
    }

}
</code></pre><h4 id="优势">优势</h4>
<ul>
<li>简单工厂模式能够根据外界给定的信息，决定究竟应该创建哪个具体类的对象。通过它，外界可以从直接创建具体产品对象的尴尬局面中摆脱出来。</li>
<li>外界与具体类隔离开来，偶合性低。</li>
<li>明确区分了各自的职责和权力，有利于整个软件体系结构的优化。　</li>
</ul>
<h4 id="劣势">劣势</h4>
<ul>
<li>工厂类集中了所有实例的创建逻辑，容易违反高内聚的责任分配原则 </li>
<li>虽然简单工厂模式能够适应一定的变化，但是它所能解决的问题是远远有限的。它所能创建的类只能是事先教考虑到的，如果需要添加新的类，则就需要改变工厂类了。</li>
</ul>
<h4 id="应用情况">应用情况</h4>
<ul>
<li>工厂类负责创建的对象比较少</li>
<li>客户只知道传入了工厂类的参数，对于始何创建对象（逻辑）不关心 </li>
</ul>
<h4 id="Python版">Python版</h4>
<p>技巧 ：字典的使用</p>
<pre><code><span class="class"><span class="keyword">class</span> <span class="title">Operation</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">pass</span>

<span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.numA+self.numB

<span class="class"><span class="keyword">class</span> <span class="title">OperationSub</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.numA-self.numB

<span class="class"><span class="keyword">class</span> <span class="title">OperationMul</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">return</span> self.numA*self.numB


<span class="class"><span class="keyword">class</span> <span class="title">OperationDiv</span><span class="params">(Operation)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">GetResult</span><span class="params">(self)</span>:</span>
        <span class="keyword">try</span>:
            result = self.numA/self.numB
            <span class="keyword">return</span> result
        <span class="keyword">except</span>:
            <span class="keyword">print</span> <span class="string">"000000000!!"</span>
            <span class="keyword">return</span> <span class="number">0</span>


<span class="class"><span class="keyword">class</span> <span class="title">OperationFactory</span>:</span>
    operation = {}
    operation[<span class="string">"+"</span>] = OperationAdd();
    operation[<span class="string">"-"</span>] = OperationSub();
    operation[<span class="string">"*"</span>] = OperationMul();
    operation[<span class="string">"/"</span>] = OperationDiv();
    <span class="function"><span class="keyword">def</span> <span class="title">createOperation</span><span class="params">(self,ch)</span>:</span>
        <span class="keyword">if</span> ch <span class="keyword">in</span> self.operation:
            op = self.operation[ch]
        <span class="keyword">return</span> op

<span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:
    op = raw_input(<span class="string">"operator: "</span>)
    numA = input(<span class="string">"a: "</span>)
    numB = input(<span class="string">"b: "</span>)
    factory = OperationFactory()
    cal = factory.createOperation(op)
    cal.numA = numA
    cal.numB = numB
    <span class="keyword">print</span> cal.GetResult()
</code></pre>]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UML中类之间的关系详解]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/uml/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/20/设计模式/uml/</id>
    <published>2014-05-20T07:05:22.000Z</published>
    <updated>2014-05-20T07:27:00.000Z</updated>
    <content type="html"><![CDATA[<p>面向对象设计中，类与类之间主要有6种关系，他们分别是：依赖、关联、聚合、组合、继承、实现。他们的耦合度依次增强。</p>
<h5 id="依赖(Dependence)">依赖(Dependence)</h5>
<p><img src="/img/Design patterns/uml/1.gif" alt=" "><br><img src="/img/Design patterns/uml/2.gif" alt=" "><br>依赖关系的定义为：对于两个相对独立的对象，当一个对象负责构造另一个对象的实例，或者依赖另一个对象的服务时，这两个对象之间主要体现为依赖关系。例如类A当中使用了类B，其中类B是作为类A的方法参数、方法中的局部变量、或者静态方法调用。类上面的图例中：People类依赖于Book类和Food类，Book类和Food类是作为类中方法的参数形式出现在People类中的。</p>
<h5 id="关联（Association）">关联（Association）</h5>
<p><img src="/img/Design patterns/uml/3.gif" alt=" "><img src="/img/Design patterns/uml/4.gif" alt=" "><img src="/img/Design patterns/uml/5.gif" alt=" "><br>单向关联<br><img src="/img/Design patterns/uml/6.gif" alt=" "><br>双向关联<br><img src="/img/Design patterns/uml/7.gif" alt=" "><br>对于两个相对独立的对象，当一个对象的实例与另一个对象的一些特定实例存在固定的对应关系时，这两个对象之间为关联关系。关联关系分为单向关联和双向关联。单向关联表现为：类A当中使用了类B，其中类B是作为类A的成员变量。双向关联表现为：类A当中使用了类B作为成员变量；同时类B中也使用了类A作为成员变量。</p>
<h5 id="聚合（Aggregation）">聚合（Aggregation）</h5>
<p><img src="/img/Design patterns/uml/8.gif" alt=" "><br><img src="/img/Design patterns/uml/9.gif" alt=" "><br> 聚合关系是关联关系的一种，耦合度强于关联，他们的代码表现是相同的，仅仅是在语义上有所区别：关联关系的对象间是相互独立的，而聚合关系的对象之间存在着包容关系，他们之间是“整体-个体”的相互关系。</p>
<h5 id="组合（Composition）">组合（Composition）</h5>
<p><img src="/img/Design patterns/uml/10.gif" alt=" "><br><img src="/img/Design patterns/uml/11.gif" alt=" "><br>相比于聚合，组合是一种耦合度更强的关联关系。存在组合关系的类表示“整体-部分”的关联关系，“整体”负责“部分”的生命周期，他们之间是共生共死的；并且“部分”单独存在时没有任何意义。在上图的例子中，People与Soul、Body之间是组合关系，当人的生命周期开始时，必须同时有灵魂和肉体；当人的生命周期结束时，灵魂肉体随之消亡；无论是灵魂还是肉体，都不能单独存在，他们必须作为人的组成部分存在。</p>
<h5 id="继承（Generalization）">继承（Generalization）</h5>
<p><img src="/img/Design patterns/uml/12.gif" alt=" "><br><img src="/img/Design patterns/uml/13.gif" alt=" "><br>继承表示类与类（或者接口与接口）之间的父子关系。在java中，用关键字extends表示继承关系。UML图例中，继承关系用实线+空心箭头表示，箭头指向父类。</p>
<h5 id="实现（Implementation）">实现（Implementation）</h5>
<p><img src="/img/Design patterns/uml/14.gif" alt=" "><br><img src="/img/Design patterns/uml/15.gif" alt=" "><br>表示一个类实现一个或多个接口的方法。接口定义好操作的集合，由实现类去完成接口的具体操作。在java中使用implements表示。UML图例中，实现关系用虚线+空心箭头表示，箭头指向接口。</p>
]]></content>
    
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awk_exercise]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk_exercise/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk_exercise/</id>
    <published>2014-05-19T12:56:28.000Z</published>
    <updated>2014-05-19T13:22:28.000Z</updated>
    <content type="html"><![CDATA[<p>实验脚本来自《鸟哥的私房菜》</p>
<h4 id="假设我们有这样一个待处理的文件”grade-txt”">假设我们有这样一个待处理的文件”grade.txt”</h4>
<pre><code>M<span class="preprocessor">.Tansley</span>     <span class="number">05</span>/<span class="number">99</span>     <span class="number">48311</span>     Green     <span class="number">8</span>     <span class="number">40</span>     <span class="number">44</span>
J<span class="preprocessor">.Lulu</span>        <span class="number">06</span>/<span class="number">99</span>     <span class="number">48317</span>     green     <span class="number">9</span>     <span class="number">24</span>     <span class="number">26</span>
P<span class="preprocessor">.Bunny</span>       <span class="number">02</span>/<span class="number">99</span>     <span class="number">48</span>        Yellow     <span class="number">12</span>     <span class="number">35</span>     <span class="number">28</span>
J<span class="preprocessor">.Troll</span>       <span class="number">07</span>/<span class="number">99</span>     <span class="number">4842</span>     Brown-<span class="number">3</span>     <span class="number">12</span>     <span class="number">26</span>     <span class="number">26</span>
L<span class="preprocessor">.Tansley</span>     <span class="number">05</span>/<span class="number">99</span>     <span class="number">4712</span>     Brown-<span class="number">2</span>     <span class="number">12</span>     <span class="number">30</span>     <span class="number">28</span>
</code></pre><h5 id="打印整个文件">打印整个文件</h5>
<pre><code>$ awk <span class="string">'{print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="打印第一和第四个域">打印第一和第四个域</h5>
<pre><code>$ awk <span class="string">'{print $1,$4}'</span> grade.txt
M.Tansley <span class="keyword">Green</span>
J.Lulu green
P.Bunny <span class="keyword">Yellow</span>
J.Troll <span class="keyword">Brown</span>-<span class="number">3</span>
L.Tansley <span class="keyword">Brown</span>-<span class="number">2</span>
</code></pre><h5 id="打印表头">打印表头</h5>
<pre><code>$ awk <span class="emphasis">'BEGIN {print "Name            Belt\n---------------------------"}
&gt; {print $1"\t"$4}'</span> grade.txt
<span class="header">Name            Belt
---------------------------</span>
M.Tansley       Green
J.Lulu          green
P.Bunny         Yellow
J.Troll         Brown-3
L.Tansley       Brown-2
</code></pre><p>正则表达式相关：为使一域号匹配正则表达式，使用符号‘～’后紧跟正则表达式，也可以用 i f语句。awk中if后面的条件用（）括起来。</p>
<h5 id="下面代码打印$4_包含_Brown_的行">下面代码打印$4 包含 Brown 的行</h5>
<pre><code>$ awk <span class="string">'$4~/Brown/ {print $0}'</span> grade.txt
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="非精确匹配">非精确匹配</h5>
<pre><code>$ awk <span class="string">'$3 ~/48/ {print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="精确匹配">精确匹配</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'$3=="48" {print $0}'</span> grade.txt
<span class="constant">P</span>.<span class="constant">Bunny</span>         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="constant">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
</code></pre><h5 id="不匹配_使用_‘!~’">不匹配 使用 ‘!~’</h5>
<pre><code>$ awk <span class="string">'$0 !~ /Brown/'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>

$ awk <span class="string">'$4 != "Brown-2" {print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="小于">小于</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'$6 &lt; $7 {print $0 "$1 Try better at the next comp"}'</span> grade.txt
<span class="constant">M</span>.<span class="constant">Tansley</span>       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="constant">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span><span class="variable">$1</span> <span class="constant">Try</span> better at the <span class="keyword">next</span> comp
<span class="constant">J</span>.<span class="constant">Lulu</span>          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span><span class="variable">$1</span> <span class="constant">Try</span> better at the <span class="keyword">next</span> comp
</code></pre><h5 id="设置大小写">设置大小写</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'/[Gg]reen/'</span> grade.txt
<span class="constant">M</span>.<span class="constant">Tansley</span>       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="constant">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
<span class="constant">J</span>.<span class="constant">Lulu</span>          <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
</code></pre><h5 id="匹配第一个域的第三个字符是‘a’">匹配第一个域的第三个字符是‘a’</h5>
<pre><code>$ awk <span class="string">'$1 ~/^...a/'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="‘或’匹配，使用_‘|’_，需使用括号括起来">‘或’匹配，使用 ‘|’ ，需使用括号括起来</h5>
<pre><code>$ awk <span class="string">'$0 ~/(Yellow|Brown)/'</span> grade.txt
P.Bunny         <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll         <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h4 id="先来总结一下awk内置变量：">先来总结一下awk内置变量：</h4>
<pre><code>ARGC          命令行参数个数
ARGV          命令行参数排列
ENVIRON       支持队列中系统环境变量的使用
FILENAME      awk浏览文件名
FNR           浏览文件的记录数
FS            设置输入域分隔符，等价于命令行-F选项
NF            浏览记录的域个数
NR            已读的记录数
OFS           输出域分隔符
ORS           输出例句分隔符
RS            控制记录分隔符

$ awk <span class="string">'{print NF,NR,$0} END {print FILENAME}'</span> grade.txt
<span class="number">7</span> <span class="number">1</span> M.Tansley   <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
<span class="number">7</span> <span class="number">2</span> J.Lulu      <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
<span class="number">7</span> <span class="number">3</span> P.Bunny     <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
<span class="number">7</span> <span class="number">4</span> J.Troll     <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
<span class="number">7</span> <span class="number">5</span> L.Tansley   <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
grade.txt
</code></pre><h5 id="使用_-F_参数指定分隔符">使用 -F 参数指定分隔符</h5>
<pre><code>$ <span class="built_in">echo</span> <span class="variable">$PWD</span>
/home/root
$ <span class="built_in">echo</span> <span class="variable">$PWD</span> | awk -F/ <span class="string">'{print $NF"\t"NF}'</span>
root       <span class="number">3</span>
</code></pre><h5 id="设置变量名，将27_赋值给变量BASELINE">设置变量名，将27 赋值给变量BASELINE</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'BEGIN {BASELINE="27"} $6&lt;BASELINE {print $0}'</span> grade.txt
<span class="constant">J</span>.<span class="constant">Lulu</span>  <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
<span class="constant">J</span>.<span class="constant">Troll</span> <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="constant">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="修改数值域取值，注意‘{}’">修改数值域取值，注意‘{}’</h5>
<pre><code><span class="xml">$ awk '{if(</span><span class="variable">$1</span><span class="xml">=="M.Tansley") </span><span class="variable">$6</span><span class="xml">=</span><span class="variable">$6-1</span><span class="xml">; print </span><span class="variable">$1</span><span class="xml">,</span><span class="variable">$6</span><span class="xml">,</span><span class="variable">$7}</span><span class="xml">' grade.txt
M.Tansley </span><span class="number">39</span><span class="xml"> </span><span class="number">44</span><span class="xml">
J.Lulu </span><span class="number">24</span><span class="xml"> </span><span class="number">26</span><span class="xml">
P.Bunny </span><span class="number">35</span><span class="xml"> </span><span class="number">28</span><span class="xml">
J.Troll </span><span class="number">26</span><span class="xml"> </span><span class="number">26</span><span class="xml">
L.Tansley </span><span class="number">30</span><span class="xml"> </span><span class="number">28</span><span class="xml"></span>
</code></pre><h5 id="修改文本域取值">修改文本域取值</h5>
<pre><code>$ awk '{<span class="keyword">if</span>($<span class="number">1</span>==<span class="string">"J.Troll"</span>) $<span class="number">1</span>=<span class="string">"J.L.Troll"</span>; print $<span class="number">1</span>}' grade.txt
M.Tansley
J.Lulu
P.Bunny
J.L.Troll
L.Tansley
</code></pre><h5 id="创建新的输出域，这里新的输出域为_diff">创建新的输出域，这里新的输出域为 diff</h5>
<pre><code><span class="xml">$ awk 'BEGIN {print "Name \t Difference"} {if(</span><span class="variable">$6</span><span class="xml"><span class="tag">&lt;</span></span><span class="variable">$7</span><span class="xml">) {diff=</span><span class="variable">$7-</span><span class="xml"></span><span class="variable">$6</span><span class="xml">; print </span><span class="variable">$1</span><span class="xml">,diff}}' grade.txt
Name     Difference
M.Tansley </span><span class="number">4</span><span class="xml">
J.Lulu </span><span class="number">2</span><span class="xml"></span>
</code></pre><h5 id="统计某一个域的和，使用‘+=’_下面的例子统计第六个域的和">统计某一个域的和，使用‘+=’ 下面的例子统计第六个域的和</h5>
<pre><code>$ awk <span class="string">'(tot+=$6); END{print "Club student total points: " tot}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu  <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
Club student total points: <span class="number">155</span>
</code></pre><h5 id="注意区别，加‘{}’则不打印文件">注意区别，加‘{}’则不打印文件</h5>
<pre><code>$ awk '<span class="tuple">{(tot+=$<span class="number">6</span>)}</span>; <span class="variable">END</span><span class="tuple">{print <span class="string">"Club student total points: "</span> tot}</span>' grade.txt
<span class="variable">Club</span> student total points: <span class="number">155</span>

awk 内置字符串函数

<span class="function"><span class="title">gsub</span><span class="params">(r,s)</span>          在整个$0中用<span class="title">s</span>替代<span class="title">r</span>
<span class="title">gsub</span><span class="params">(r,s,t)</span>        在整个<span class="title">t</span>中使用<span class="title">s</span>替代<span class="title">r</span>
<span class="title">index</span><span class="params">(s,t)</span>         在返回<span class="title">s</span>中字符串<span class="title">t</span>的第一个位置
<span class="title">length</span><span class="params">(s)</span>          放回<span class="title">s</span>长度
<span class="title">match</span><span class="params">(s,r)</span>         测试<span class="title">s</span>是否包含匹配<span class="title">r</span>的字符串
<span class="title">split</span><span class="params">(s,a,fs)</span>      在<span class="title">fs</span>上将<span class="title">s</span>分成序列<span class="title">a</span>
<span class="title">sprint</span><span class="params">(fmt,exp)</span>    返回经<span class="title">fmt</span>格式化后的<span class="title">exp</span>
<span class="title">sub</span><span class="params">(r,s)</span>           用$0中最左边最长的子串代替<span class="title">s</span>
<span class="title">substr</span><span class="params">(s,p)</span>        返回字符串<span class="title">s</span>中从<span class="title">p</span>开始的后缀部分
<span class="title">substr</span><span class="params">(s,p,n)</span>      返回字符串<span class="title">s</span>中从<span class="title">p</span>开始长度为<span class="title">n</span>的后缀部分</span>
</code></pre><h5 id="替换，目标串使用正则表达式格式‘//’">替换，目标串使用正则表达式格式‘//’</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'gsub(/4842/,4899) {print $0}'</span> grade.txt
<span class="constant">J</span>.<span class="constant">Troll</span> <span class="number">07</span>/<span class="number">99</span>   <span class="number">4899</span>    <span class="constant">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">26</span>      <span class="number">26</span>
</code></pre><h5 id="查询字符串第一次出现的位置，注意使用BEGIN，否则每一行都会打印，字符串使用引号括起来">查询字符串第一次出现的位置，注意使用BEGIN，否则每一行都会打印，字符串使用引号括起来</h5>
<pre><code>$ awk '<span class="operator"><span class="keyword">BEGIN</span>{print index(<span class="string">"Bunny"</span>,<span class="string">"ny"</span>)}<span class="string">' grade.txt
4</span></span>
</code></pre><h5 id="长度">长度</h5>
<pre><code>$ awk '$<span class="number">1</span>==<span class="string">"J.Troll"</span> {print <span class="property">length</span>($<span class="number">1</span>)<span class="string">" "</span>$<span class="number">1</span>}' grade.txt
<span class="number">7</span> J.Troll
</code></pre><h5 id="match_使用：_找不到返回0，找到返模式串在匹配串中的位置，">match 使用： 找不到返回0，找到返模式串在匹配串中的位置，</h5>
<pre><code>注：单独使用 加<span class="constant">BEGIN</span>
<span class="variable">$ </span>awk <span class="string">'BEGIN {print match("ANCD",/d/)}'</span>
<span class="number">0</span>
</code></pre><h5 id="以下两种模式都正确">以下两种模式都正确</h5>
<pre><code>$ awk '$<span class="number">1</span>==<span class="string">"J.Lulu"</span> {print <span class="keyword">match</span>($<span class="number">1</span>,<span class="string">"u"</span>)}' grade.txt
<span class="number">4</span>
$ awk '$<span class="number">1</span>==<span class="string">"J.Lulu"</span> {print <span class="keyword">match</span>($<span class="number">1</span>,/u/)}' grade.txt
<span class="number">4</span>
</code></pre><h5 id="split_返回字符串数组元素个数">split 返回字符串数组元素个数</h5>
<pre><code>$ awk '<span class="operator"><span class="keyword">BEGIN</span> {print split(<span class="string">"123#456#789"</span>,myarray,<span class="string">"#"</span>);</span>print myarray[1],myarray[2],myarray[3]}'
3
123 456 789
</code></pre><h5 id="sub，发现并替换模式的第一个位置">sub，发现并替换模式的第一个位置</h5>
<pre><code>$ awk <span class="string">'$1=="J.Troll" {sub(26,29,$0)} {print $0}'</span> grade.txt
M.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">48311</span>   <span class="keyword">Green</span>   <span class="number">8</span>       <span class="number">40</span>      <span class="number">44</span>
J.Lulu  <span class="number">06</span>/<span class="number">99</span>   <span class="number">48317</span>   green   <span class="number">9</span>       <span class="number">24</span>      <span class="number">26</span>
P.Bunny <span class="number">02</span>/<span class="number">99</span>   <span class="number">48</span>      <span class="keyword">Yellow</span>  <span class="number">12</span>      <span class="number">35</span>      <span class="number">28</span>
J.Troll <span class="number">07</span>/<span class="number">99</span>   <span class="number">4842</span>    <span class="keyword">Brown</span>-<span class="number">3</span> <span class="number">12</span>      <span class="number">29</span>      <span class="number">26</span>
L.Tansley       <span class="number">05</span>/<span class="number">99</span>   <span class="number">4712</span>    <span class="keyword">Brown</span>-<span class="number">2</span> <span class="number">12</span>      <span class="number">30</span>      <span class="number">28</span>
</code></pre><h5 id="substr，返回字符串指定范围内的子串">substr，返回字符串指定范围内的子串</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'$1=="L.Tansley" {print substr($1,1,5)}'</span> grade.txt
<span class="constant">L</span>.<span class="constant">Tan</span>
</code></pre><h5 id="使用substr返回指定位置开始的后缀部分，范围只给了一个参数，注意和上一个例子相对比">使用substr返回指定位置开始的后缀部分，范围只给了一个参数，注意和上一个例子相对比</h5>
<pre><code><span class="variable">$ </span>awk <span class="string">'{print substr($1,3)}'</span> grade.txt
<span class="constant">Tansley</span>
<span class="constant">Lulu</span>
<span class="constant">Bunny</span>
<span class="constant">Troll</span>
<span class="constant">Tansley</span>
</code></pre><h5 id="从shell中向awk传递字符串，通过_echo_加管道的方式">从shell中向awk传递字符串，通过 echo 加管道的方式</h5>
<pre><code><span class="variable">$ </span>echo <span class="string">"Test"</span> | awk <span class="string">'{print length($0)}'</span>
<span class="number">4</span>
<span class="variable">$ </span><span class="constant">STR</span>=<span class="string">"mydoc.txt"</span>
<span class="variable">$ </span>echo <span class="variable">$STR</span> | awk <span class="string">'{print substr($STR,7)}'</span>
txt
</code></pre>]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="awk" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/awk/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awk的入门]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/awk/</id>
    <published>2014-05-19T12:08:42.000Z</published>
    <updated>2014-05-19T12:53:49.000Z</updated>
    <content type="html"><![CDATA[<p>实验全部来自《鸟哥的私房菜》</p>
<p>sed 常常用于一整个行的处理， awk 则比较倾向于一行当中分成数个『栏位』（或者称为一个域，也就是一列）来处理。</p>
<p>awk 通常运行的模式是这样的：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># awk '条件类型1{动作1} 条件类型2{动作2} ...' filename</span>
</code></pre><p>awk 后面接两个单引号并加上大括号 {} 来配置想要对数据进行的处理动作。 awk 可以处理后续接的文件，也可以读取来自前个命令的 standard output 。 但如前面说的， awk 主要是处理『每一行的栏位内的数据』，而默认的『栏位的分隔符号为 “空白键” 或 “[tab]键” 』！举例来说，我们用 last 可以将登陆者的数据取出来，结果如下所示：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># last -n 5 &lt;==仅取出前五行</span>
root     pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Tue</span> <span class="constant">Feb</span> <span class="number">10</span> <span class="number">11</span><span class="symbol">:</span><span class="number">21</span>   still logged <span class="keyword">in</span>
root     pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Tue</span> <span class="constant">Feb</span> <span class="number">10</span> <span class="number">00</span><span class="symbol">:</span><span class="number">46</span> - <span class="number">02</span><span class="symbol">:</span><span class="number">28</span>  (<span class="number">01</span><span class="symbol">:</span><span class="number">41</span>)
root     pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Mon</span> <span class="constant">Feb</span>  <span class="number">9</span> <span class="number">11</span><span class="symbol">:</span><span class="number">41</span> - <span class="number">18</span><span class="symbol">:</span><span class="number">30</span>  (<span class="number">06</span><span class="symbol">:</span><span class="number">48</span>)
dmtsai   pts/<span class="number">1</span>   <span class="number">192.168</span>.<span class="number">1.100</span>  <span class="constant">Mon</span> <span class="constant">Feb</span>  <span class="number">9</span> <span class="number">11</span><span class="symbol">:</span><span class="number">41</span> - <span class="number">11</span><span class="symbol">:</span><span class="number">41</span>  (<span class="number">00</span><span class="symbol">:</span><span class="number">00</span>)
root     tty1                   <span class="constant">Fri</span> <span class="constant">Sep</span>  <span class="number">5</span> <span class="number">14</span><span class="symbol">:</span>09 - <span class="number">14</span><span class="symbol">:</span><span class="number">10</span>  (<span class="number">00</span><span class="symbol">:</span><span class="number">01</span>)
</code></pre><p>若我想要取出帐号与登陆者的 IP ，且帐号与 IP 之间以 [tab] 隔开，则会变成这样：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># last -n 5 | awk '{print $1 "\t" $3}'</span>
root    <span class="number">192.168</span>.<span class="number">1.100</span>
root    <span class="number">192.168</span>.<span class="number">1.100</span>
root    <span class="number">192.168</span>.<span class="number">1.100</span>
dmtsai  <span class="number">192.168</span>.<span class="number">1.100</span>
root    <span class="constant">Fri</span>
</code></pre><p>上表是 awk 最常使用的动作！透过 print 的功能将栏位数据列出来！栏位的分隔则以空白键或 [tab] 按键来隔开。 因为不论哪一行我都要处理，因此，就不需要有 “条件类型” 的限制！我所想要的是第一栏以及第三栏， 但是，第五行的内容怪怪的～这是因为数据格式的问题啊！所以使用 awk 的时候，请先确认一下你的数据当中，如果是连续性的数据，请不要有空格或 [tab] 在内，否则，就会像这个例子这样，会发生误判喔！</p>
<p>另外，由上面这个例子你也会知道，在每一行的每个栏位都是有变量名称的，那就是 $1, $2… 等变量名称。以上面的例子来说， root 是 $1 ，因为他是第一栏嘛！至於 192.168.1.100 是第三栏， 所以他就是 $3 啦！后面以此类推～呵呵！还有个变量喔！那就是 $0 ，$0 代表『一整列数据』的意思～以上面的例子来说，第一行的 $0 代表的就是『root …. 』那一行啊！ 由此可知，刚刚上面五行当中，整个 awk 的处理流程是：</p>
<ul>
<li>读入第一行，并将第一行的数据填入 $0, $1, $2…. 等变量当中；</li>
<li>依据 “条件类型” 的限制，判断是否需要进行后面的 “动作”；</li>
<li>做完所有的动作与条件类型；</li>
<li>若还有后续的『行』的数据，则重复上面 1~3 的步骤，直到所有的数据都读完为止。</li>
<li>经过这样的步骤，你会晓得， awk 是『以行为一次处理的单位』， 而『以栏位为最小的处理单位』。好了，那么 awk 怎么知道我到底这个数据有几行？有几栏呢？这就需要 awk 的内建变量的帮忙啦～</li>
</ul>
<p><img src="/img/Shell/awk/awk_1.jpg" alt="awk 的内建变量"></p>
<p>我们继续以上面 last -n 5 的例子来做说明，如果我想要：列出每一行的帐号(就是 $1)；列出目前处理的行数(就是 awk 内的 NR 变量);并且说明，该行有多少栏位(就是 awk 内的 NF 变量)</p>
<pre><code>[root@localhost ~]# last -n <span class="number">5</span>| awk '<span class="tuple">{print $<span class="number">1</span> <span class="string">"\t lines: "</span> <span class="variable">NR</span> <span class="string">"\t columns: "</span> <span class="variable">NF</span>}</span>'
root     lines: <span class="number">1</span>        columns: <span class="number">10</span>
root     lines: <span class="number">2</span>        columns: <span class="number">10</span>
root     lines: <span class="number">3</span>        columns: <span class="number">10</span>
dmtsai   lines: <span class="number">4</span>        columns: <span class="number">10</span>
root     lines: <span class="number">5</span>        columns: <span class="number">9</span>
</code></pre><p>注意，awk 后续的所有动作是以单引号『 ‘ 』括住的，由於单引号与双引号都必须是成对的， 所以， awk 的格式内容如果想要以 print 列印时，记得非变量的文字部分，都需要使用双引号来定义出来喔！因为单引号已经是 awk 的命令固定用法了！</p>
<p>注意，在 awk 内的 NR, NF 等变量要用大写，且不需要有钱字号 $ 啦！这样可以了解 NR 与 NF 的差别了吧？注：$0 表示整行，$1 代表第一项</p>
<p>好了，我们实际来运用一下逻辑判断吧！举例来说，在 /etc/passwd 当中是以冒号 “:” 来作为栏位的分隔， 该文件中第一栏位为帐号，第三栏位则是 UID。那假设我要查阅，第三栏小於 10 以下的数据，并且仅列出帐号与第三栏， 那么可以这样做：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># cat /etc/passwd | \</span>
&gt; awk <span class="string">'{FS=":"} $3 &lt; 10 {print $1 "\t " $3}'</span>
<span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
bin      <span class="number">1</span>
daemon   <span class="number">2</span>
....(以下省略)....
</code></pre><p>有趣吧！不过，怎么第一行没有正确的显示出来呢？这是因为我们读入第一行的时候，那些变量 $1, $2… 默认还是以空白键为分隔的，所以虽然我们定义了 FS=”:” 了， 但是却仅能在第二行后才开始生效。那么怎么办呢？我们可以预先配置 awk 的变量啊！ 利用 BEGIN 这个关键字喔！这样做：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># cat /etc/passwd | \</span>
&gt; awk <span class="string">'BEGIN {FS=":"} $3 &lt; 10 {print $1 "\t " $3}'</span>
root     <span class="number">0</span>
bin      <span class="number">1</span>
daemon   <span class="number">2</span>
......(以下省略)......
</code></pre><p>很有趣吧！而除了 BEGIN 之外，我们还有 END 呢！另外，如果要用 awk 来进行『计算功能』呢？以底下的例子来看， 假设我有一个薪资数据表档名为 pay.txt ，内容是这样的：</p>
<pre><code>Name    <span class="number">1</span><span class="keyword">st</span>     <span class="number">2</span>nd     <span class="number">3</span>th
VBird   <span class="number">23000</span>   <span class="number">24000</span>   <span class="number">25000</span>
DMTsai  <span class="number">21000</span>   <span class="number">20000</span>   <span class="number">23000</span>
Bird2   <span class="number">43000</span>   <span class="number">42000</span>   <span class="number">41000</span>
</code></pre><p>如何帮我计算每个人的总额呢？而且我还想要格式化输出喔！我们可以这样考虑：</p>
<p>第一行只是说明，所以第一行不要进行加总 (NR==1 时处理)；第二行以后就会有加总的情况出现 (NR&gt;=2 以后处理)</p>
<pre><code><span class="xml">[root@localhost ~]# cat pay.txt | \
&gt; awk 'NR==</span><span class="number">1</span><span class="xml">{printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s\n",</span><span class="variable">$1</span><span class="xml">,</span><span class="variable">$2</span><span class="xml">,</span><span class="variable">$3</span><span class="xml">,</span><span class="variable">$4</span><span class="xml">,"Total" }
NR&gt;=</span><span class="number">2</span><span class="xml">{total = </span><span class="variable">$2</span><span class="xml"> + </span><span class="variable">$3</span><span class="xml"> + </span><span class="variable">$4</span><span class="xml">
printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10.2</span><span class="xml">f\n", </span><span class="variable">$1</span><span class="xml">, </span><span class="variable">$2</span><span class="xml">, </span><span class="variable">$3</span><span class="xml">, </span><span class="variable">$4</span><span class="xml">, total}'
      Name        </span><span class="number">1</span><span class="xml">st        </span><span class="number">2</span><span class="xml">nd        </span><span class="number">3</span><span class="xml">th      Total
     VBird      </span><span class="number">23000</span><span class="xml">      </span><span class="number">24000</span><span class="xml">      </span><span class="number">25000</span><span class="xml">   </span><span class="number">72000.00</span><span class="xml">
    DMTsai      </span><span class="number">21000</span><span class="xml">      </span><span class="number">20000</span><span class="xml">      </span><span class="number">23000</span><span class="xml">   </span><span class="number">64000.00</span><span class="xml">
     Bird2      </span><span class="number">43000</span><span class="xml">      </span><span class="number">42000</span><span class="xml">      </span><span class="number">41000</span><span class="xml">  </span><span class="number">126000.00</span><span class="xml"></span>
</code></pre><p>上面的例子有几个重要事项应该要先说明的：</p>
<p>awk 的命令间隔：所有 awk 的动作，亦即在 {} 内的动作，如果有需要多个命令辅助时，可利用分号『;』间隔， 或者直接以 [Enter] 按键来隔开每个命令，例如上面的范例中，鸟哥共按了三次 [enter] 喔！</p>
<pre><code>逻辑运算当中，如果是『等於』的情况，则务必使用两个等号『==』！
格式化输出时，在 <span class="built_in">printf</span> 的格式配置当中，务必加上 \n ，才能进行分行！
与 bash shell 的变量不同，在 awk 当中，变量可以直接使用，不需加上 $ 符号。
</code></pre><p>利用 awk 这个玩意儿，就可以帮我们处理很多日常工作了呢！真是好用的很～ 此外， awk 的输出格式当中，常常会以 printf 来辅助，所以， 最好你对 printf 也稍微熟悉一下比较好啦！另外， awk 的动作内 {} 也是支持 if (条件) 的喔！ 举例来说，上面的命令可以修订成为这样：</p>
<pre><code><span class="xml">[root@localhost ~]# cat pay.txt | \
&gt; awk '{if(NR==</span><span class="number">1</span><span class="xml">) printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">s\n",</span><span class="variable">$1</span><span class="xml">,</span><span class="variable">$2</span><span class="xml">,</span><span class="variable">$3</span><span class="xml">,</span><span class="variable">$4</span><span class="xml">,"Total"}
NR&gt;=</span><span class="number">2</span><span class="xml">{total = </span><span class="variable">$2</span><span class="xml"> + </span><span class="variable">$3</span><span class="xml"> + </span><span class="variable">$4</span><span class="xml">
printf "%</span><span class="number">10</span><span class="xml">s %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10</span><span class="xml">d %</span><span class="number">10.2</span><span class="xml">f\n", </span><span class="variable">$1</span><span class="xml">, </span><span class="variable">$2</span><span class="xml">, </span><span class="variable">$3</span><span class="xml">, </span><span class="variable">$4</span><span class="xml">, total}'</span>
</code></pre><p>你可以仔细的比对一下上面两个输入有啥不同～从中去了解两种语法吧！我个人是比较倾向於使用第一种语法， 因为会比较有统一性啊</p>
]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="awk" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/awk/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[grep与sed的使用]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/sed/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/sed/</id>
    <published>2014-05-19T11:12:57.000Z</published>
    <updated>2014-05-19T12:07:48.000Z</updated>
    <content type="html"><![CDATA[<p>实验脚本来自《鸟哥的私房菜》</p>
<p>贴一张正则表达式特殊符号的图<br><img src="/img/Shell/sed/sed_1.jpg" alt="正则表达式特殊符号 "></p>
<p>实验脚本regular_express.txt：</p>
<pre><code><span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
Football game <span class="keyword">is</span> <span class="keyword">not</span> use feet only.
this dress doesn't fit <span class="keyword">me</span>.
However, this dress <span class="keyword">is</span> <span class="keyword">about</span> $ <span class="number">3183</span> dollars.^M
GNU <span class="keyword">is</span> free air <span class="keyword">not</span> free beer.^M
Her hair <span class="keyword">is</span> very beauty.^M
I can't finish <span class="keyword">the</span> test.^M
Oh! The soup taste good.^M
motorcycle <span class="keyword">is</span> cheap than car.
This window <span class="keyword">is</span> clear.
<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
Oh!     My god!
The gd software <span class="keyword">is</span> a library <span class="keyword">for</span> drafting programs.^M
You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
I like dog.
google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
goooooogle yes!
go! go! Let's go.
<span class="comment"># I am VBird</span>
</code></pre><h4 id="grep的使用">grep的使用</h4>
<h6 id="搜寻特定字符串：">搜寻特定字符串：</h6>
<pre><code>[root@localhost ~]<span class="comment"># grep -n 'the' regular_express.txt</span>
<span class="number">8</span>:I can't finish <span class="keyword">the</span> test.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">15</span>:You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
<span class="number">16</span>:The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
</code></pre><h6 id="反向选择，可以使用_‘v’_选项：">反向选择，可以使用 ‘v’ 选项：</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -vn 'the' regular_express.txt</span>
则所有包含 ‘the’ 的行都不会显示
</code></pre><h6 id="如果不需要区分大小写，可以使用_‘i’_选项：">如果不需要区分大小写，可以使用 ‘i’ 选项：</h6>
<pre><code>[root@localhost ~]<span class="comment"># grep -in 'the' regular_express.txt</span>
<span class="number">8</span>:I can't finish <span class="keyword">the</span> test.
<span class="number">9</span>:Oh! The soup taste good.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">14</span>:The gd software <span class="keyword">is</span> a library <span class="keyword">for</span> drafting programs.
<span class="number">15</span>:You are <span class="keyword">the</span> best <span class="keyword">is</span> mean you are <span class="keyword">the</span> no. <span class="number">1.</span>
<span class="number">16</span>:The world &lt;Happy&gt; <span class="keyword">is</span> <span class="keyword">the</span> same <span class="keyword">with</span> <span class="string">"glad"</span>.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
</code></pre><h6 id="利用中括号_[_]_来搜寻集合字节">利用中括号 [ ] 来搜寻集合字节</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 't[ae]st' regular_express.txt</span>
<span class="number">8</span><span class="symbol">:I</span> can<span class="string">'t finish the test.
9:Oh! The soup taste good.</span>
</code></pre><h6 id="如果需要匹配某一部分，但是不想匹配以某些开头的情况：（匹配oo，但不匹配以g开头的情况）">如果需要匹配某一部分，但是不想匹配以某些开头的情况：（匹配oo，但不匹配以g开头的情况）</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n '[^g]oo' regular_express.txt</span>
<span class="number">2</span><span class="symbol">:apple</span> is my favorite food.
<span class="number">3</span><span class="symbol">:Football</span> game is <span class="keyword">not</span> use feet only.
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n '[^a-z]oo' regular_express.txt</span>
<span class="number">3</span><span class="symbol">:Football</span> game is <span class="keyword">not</span> use feet only.
</code></pre><h6 id="行首与行尾字节_^_$">行首与行尾字节 ^ $</h6>
<pre><code>[root@localhost ~]<span class="preprocessor"># grep -n '^the' regular_express.txt</span>
<span class="number">12</span>:the symbol <span class="string">'*'</span> <span class="keyword">is</span> represented <span class="keyword">as</span> start.
</code></pre><h6 id="匹配以小写字母开头的行：">匹配以小写字母开头的行：</h6>
<pre><code>[root@localhost ~]<span class="comment"># grep -n '^[a-z]' regular_express.txt</span>
<span class="number">2</span>:apple <span class="keyword">is</span> <span class="keyword">my</span> favorite food.
<span class="number">4</span>:this dress doesn't fit <span class="keyword">me</span>.
<span class="number">10</span>:motorcycle <span class="keyword">is</span> cheap than car.
<span class="number">12</span>:<span class="keyword">the</span> symbol '*' <span class="keyword">is</span> represented <span class="keyword">as</span> start.
<span class="number">18</span>:google <span class="keyword">is</span> <span class="keyword">the</span> best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span>:goooooogle yes!
<span class="number">20</span>:go! go! Let's go.
</code></pre><h6 id="匹配非大小写字母开头的行：">匹配非大小写字母开头的行：</h6>
<pre><code>[root@localhost ~]<span class="preprocessor"># grep -n '^[^a-zA-Z]' regular_express.txt</span>
<span class="number">1</span>:<span class="string">"Open Source"</span> <span class="keyword">is</span> a good mechanism <span class="keyword">to</span> develop programs.
<span class="number">21</span>:<span class="preprocessor"># I am VBird</span>
</code></pre><p>注意：那个 ^ 符号，在字节集合符号(括号[ ])之内与之外是不同的！ 在 [ ] 内代表“反向选择”，在 [ ] 之外则代表定位在行首的意义！</p>
<h6 id="匹配空行：">匹配空行：</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n '^$' regular_express.txt</span>
<span class="number">22</span><span class="symbol">:</span>
</code></pre><h6 id="任意一个字节_-_与重复字节_*">任意一个字节 . 与重复字节 *</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 'goo*g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><p>在正则表达式中‘.’ 0个或1个任意字符，‘*’代表任意多个任意字符</p>
<h6 id="限定连续_RE_字符范围_{}">限定连续 RE 字符范围 {}</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 'go\{2,5\}g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
</code></pre><p>上面的式子匹配了2个‘o’，表达式的意思是匹配2-5个‘o’<br>若第二个参数为空，则匹配 第一个参数到无穷多个的情况：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># grep -n 'go\{2,\}g' regular_express.txt</span>
<span class="number">18</span><span class="symbol">:google</span> is the best tools <span class="keyword">for</span> search keyword.
<span class="number">19</span><span class="symbol">:goooooogle</span> yes!
</code></pre><h4 id="基础的正规表示法特殊字符">基础的正规表示法特殊字符</h4>
<p><img src="/img/Shell/sed/sed_2.jpg" alt="正则表达式特殊字符 "><br><img src="/img/Shell/sed/sed_3.jpg" alt="正则表达式特殊字符 "></p>
<h4 id="sed的使用">sed的使用</h4>
<p>[root@localhost ~]# sed [-nefr] [动作]选项与参数：</p>
<pre><code>-<span class="ruby">n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 <span class="constant">STDIN</span> 
</span>     的数据一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过
     sed 特殊处理的那一行(或者动作)才会被列出来。
-<span class="ruby">e ：直接在命令列模式上进行 sed 的动作编辑；
</span>-<span class="ruby">f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 
</span>     sed 动作；
-<span class="ruby">r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)
</span>-<span class="ruby">i ：直接修改读取的文件内容，而不是由萤幕输出。</span>
</code></pre><p>动作说明： [n1[,n2]]function</p>
<pre><code>n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作
         是需要在 <span class="number">10</span> 到 <span class="number">20</span> 行之间进行的，则『 <span class="number">10</span>,<span class="number">20</span>[动作行为] 』
<span class="function"><span class="keyword">function</span> ：</span>
<span class="operator">a</span> ：新增， <span class="operator">a</span> 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～
c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！
d ：删除，因为是删除啊，所以 d 后面通常不接任何东西；
i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；
p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～
s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配
</code></pre><h6 id="例一：将_/etc/passwd_的内容列出并且列印行号，同时，请将第_2~5_行删除！">例一：将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed '2,5d'</span>
<span class="number">1</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
<span class="number">6</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span>
<span class="number">7</span> <span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span>
.....(后面省略).....
</code></pre><h6 id="例二：承上题，在第二行后(亦即是加在第三行)加上『drink_tea?』字样！">例二：承上题，在第二行后(亦即是加在第三行)加上『drink tea?』字样！</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed '2a drink tea'</span>
<span class="number">1</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
<span class="number">2</span> <span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/sbin/nologin</span>
drink tea
<span class="number">3</span> <span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:daemon</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/nologin</span>
.....(后面省略).....
</code></pre><h6 id="例三：我想将第2-5行的内容取代成为“No_2-5_number”呢？">例三：我想将第2-5行的内容取代成为“No 2-5 number”呢？</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed '2,5c No 2-5 number'</span>
<span class="number">1</span> <span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span>
<span class="constant">No</span> <span class="number">2</span>-<span class="number">5</span> number
<span class="number">6</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span>
.....(后面省略).....
</code></pre><h6 id="例四：仅列出_/etc/passwd_文件内的第_5-7_行">例四：仅列出 /etc/passwd 文件内的第 5-7 行</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># nl /etc/passwd | sed -n '5,7p'</span>
<span class="number">5</span> <span class="symbol">lp:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:lp</span><span class="symbol">:/var/spool/lpd</span><span class="symbol">:/sbin/nologin</span>
<span class="number">6</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:sync</span><span class="symbol">:/sbin</span><span class="symbol">:/bin/sync</span>
<span class="number">7</span> <span class="symbol">shutdown:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:shutdown</span><span class="symbol">:/sbin</span><span class="symbol">:/sbin/shutdown</span>
</code></pre><h5 id="部分数据的搜寻并取代的功能">部分数据的搜寻并取代的功能</h5>
<p>基本使用方式：sed ‘s/要被取代的字串/新的字串/g’</p>
<h6 id="步骤一：先观察原始信息，利用_/sbin/ifconfig_查询_IP_为何？">步骤一：先观察原始信息，利用 /sbin/ifconfig 查询 IP 为何？</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0</span>
eth<span class="number">0</span> <span class="constant">Link</span> <span class="symbol">encap:</span><span class="constant">Ethernet</span> <span class="constant">HWaddr</span> <span class="number">00</span><span class="symbol">:</span><span class="number">90</span><span class="symbol">:CC</span><span class="symbol">:A6</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:</span><span class="number">84</span>
inet <span class="symbol">addr:</span><span class="number">192.168</span>.<span class="number">1.100</span> <span class="constant">Bcast</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">1.255</span> <span class="constant">Mask</span><span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span>
inet6 <span class="symbol">addr:</span> <span class="symbol">fe80:</span><span class="symbol">:</span><span class="number">290</span><span class="symbol">:ccff</span><span class="symbol">:fea6</span><span class="symbol">:</span><span class="number">3484</span>/<span class="number">64</span> <span class="constant">Scope</span><span class="symbol">:Link</span>
<span class="constant">UP</span> <span class="constant">BROADCAST</span> <span class="constant">RUNNING</span> <span class="constant">MULTICAST</span> <span class="constant">MTU</span><span class="symbol">:</span><span class="number">1500</span> <span class="constant">Metric</span><span class="symbol">:</span><span class="number">1</span>
.....(以下省略).....
</code></pre><p>我们的重点在第二行，也就是 192.168.1.100 那一行而已！先利用关键字捉出那一行！</p>
<h6 id="步骤二：利用关键字配合_grep_撷取出关键的一行数据">步骤二：利用关键字配合 grep 撷取出关键的一行数据</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0 | grep 'inet addr'</span>
inet <span class="symbol">addr:</span><span class="number">192.168</span>.<span class="number">1.100</span> <span class="constant">Bcast</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">1.255</span> <span class="constant">Mask</span><span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span>
</code></pre><p>当场仅剩下一行！接下来，我们要将开始到 addr: 通通删除，删除关键在於『 ^.*inet addr: 』啦！正规表示法出现！<br>，</p>
<h6 id="步骤三：将_IP_前面的部分予以删除">步骤三：将 IP 前面的部分予以删除</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0 | grep 'inet addr' | \</span>
&gt; sed <span class="string">'s/^.*addr://g'</span>
<span class="number">192.168</span>.<span class="number">1.100</span> <span class="constant">Bcast</span><span class="symbol">:</span><span class="number">192.168</span>.<span class="number">1.255</span> <span class="constant">Mask</span><span class="symbol">:</span><span class="number">255.255</span>.<span class="number">255.0</span>
</code></pre><p> 仔细与上个步骤比较一下，前面的部分不见了！接下来则是删除后续的部分，此时所需的正规表示法为：『 Bcast.*$ 』就是啦！</p>
<h6 id="步骤四：将_IP_后面的部分予以删除">步骤四：将 IP 后面的部分予以删除</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># /sbin/ifconfig eth0 | grep 'inet addr' | \</span>
&gt; sed <span class="string">'s/^.*addr://g'</span> | sed <span class="string">'s/Bcast.*$//g'</span>
<span class="number">192.168</span>.<span class="number">1.100</span>
</code></pre><h6 id="例六：利用_sed_将_regular_express-txt_内每一行结尾若为_-_则换成_!">例六：利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</h6>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># sed -i 's/\.$/\!/g' regular_express.txt  </span>
</code></pre><p>上头的 -i 选项可以让你的 sed 直接去修改后面接的文件内容而不是由屏幕输出！注意使用的时候需要对 ‘.’ 进行转义，而且需要指明是对结尾为‘.’ 的进行替换，使用 $ 符号<br>这里就顺便来实践一下，我有一个dos环境下创建的文件，当复制到 unix 环境下之后，结尾就会出现难看的“^M” 符号，如果要把这个符号去掉使用sed工具可以轻松搞定：</p>
<pre><code>[root<span class="variable">@localhost</span> ~]<span class="comment"># sed -i 's/\^M$//g' regular_express.txt</span>
</code></pre>]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="sed" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/sed/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vi编译器的使用]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/vi/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/19/Shell/vi/</id>
    <published>2014-05-19T10:55:08.000Z</published>
    <updated>2014-05-19T11:12:15.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Vi编译器的使用">Vi编译器的使用</h4>
<p>工欲善其事，必先利其器。Linux下vi的强大之处不解释。</p>
<p>Vi 有三种工作模式，刚进vi是一般模式，通过i|o|h可以进入输入模式，ctrl+c又可以进入一般模式，“：命令”可以完成命令的操作</p>
<p>命令如下：<br><img src="/img/Shell/vi/vi_1.png" alt="图1 "><br><img src="/img/Shell/vi/vi_2.png" alt="图2 "><br><img src="/img/Shell/vi/vi_3.png" alt="图3 "><br><img src="/img/Shell/vi/vi_4.png" alt="图4 "></p>
<h4 id="Vi的配置文件">Vi的配置文件</h4>
<p>编写~./vimrc文件<br><img src="/img/Shell/vi/vi_5.png" alt="图5 "></p>
]]></content>
    
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Shell/"/>
    
      <category term="Shell" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Shell/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[12-15周学习计划]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/14/%E6%9D%82%E8%B0%88/plan/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/14/杂谈/plan/</id>
    <published>2014-05-14T11:55:11.000Z</published>
    <updated>2014-05-18T13:04:34.000Z</updated>
    <content type="html"><![CDATA[<p>离大三结束还剩50天吧，最近思来想后，这几周干什么！？最终还是决定把基础知识抓一抓，准备写几个专题，也是对自己的查缺补漏，使自己的基本功更扎实。</p>
<ul>
<li>设计模式  阅读《大话设计模式》 对某些设计模式进行java和python的改写</li>
<li>Shell基础与实战  参考《Shell脚本学习指南》</li>
<li>Python学习总结  写写案例，总结常用模块</li>
<li>基本的数据结构与算法     用C或者JAVA实现 </li>
<li>Oracle     理论与实验并行，原先在OneNote上的笔记 整理整理</li>
</ul>
<p>学习任务很多，给自己一个鼓励，努力坚持！</p>
]]></content>
    
    
      <category term="学习计划" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
    
      <category term="杂谈" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sqoop的安装及数据在Mysql与HDFS之间的导入导出]]></title>
    <link href="https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/sqoop/"/>
    <id>https://github.com/DaMinger/DaMinger.github.io.git/2014/05/12/Hadoop/sqoop/</id>
    <published>2014-05-12T07:16:57.000Z</published>
    <updated>2014-05-12T07:19:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="解压Sqoop并cp相应的hadoop以及mysql的jar包">解压Sqoop并cp相应的hadoop以及mysql的jar包</h4>
<pre><code>[grid@hadoop01 ~]$ tar -xzvf sqoop-<span class="number">1.4</span><span class="number">.4</span><span class="preprocessor">.bin</span>__hadoop-<span class="number">1.0</span><span class="number">.0</span><span class="preprocessor">.tar</span><span class="preprocessor">.gz</span> 

[grid@hadoop01 hadoop-<span class="number">1.2</span><span class="number">.1</span>]$ <span class="keyword">cp</span> hadoop-core-<span class="number">1.2</span><span class="number">.1</span><span class="preprocessor">.jar</span> ~/sqoop-<span class="number">1.4</span><span class="number">.4</span><span class="preprocessor">.bin</span>__hadoop-<span class="number">1.0</span><span class="number">.0</span>/lib/

[grid@hadoop01 lib]$ <span class="keyword">cp</span> ~/mysql-connector-java-<span class="number">5.1</span><span class="number">.25</span>-bin<span class="preprocessor">.jar</span>   ~/sqoop-<span class="number">1.4</span><span class="number">.4</span><span class="preprocessor">.bin</span>__hadoop-<span class="number">1.0</span><span class="number">.0</span>/lib/
[grid@hadoop01 ~]$ <span class="keyword">cp</span> mysql-connector-java-<span class="number">5.1</span><span class="number">.25</span>-bin<span class="preprocessor">.jar</span>  hadoop-<span class="number">1.2</span><span class="number">.1</span>/lib
</code></pre><h4 id="编辑环境变量">编辑环境变量</h4>
<pre><code>export SQOOP_HOME=/home/<span class="keyword">grid</span>/sqoop-<span class="number">1.4</span><span class="number">.4</span>.bin__hadoop-<span class="number">1.0</span><span class="number">.0</span>
export PATH=<span class="variable">$PATH</span>:<span class="variable">$SQOOP_HOME</span>/bin:<span class="variable">$SQOOP_HOME</span>
[root<span class="variable">@hadoop01</span> ~]# <span class="keyword">source</span> /etc/profile

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> conf]# cp sqoop-<span class="keyword">env</span>-template.sh  sqoop-<span class="keyword">env</span>.sh

#Set path to where bin/hadoop is available
 export HADOOP_COMMON_HOME=/home/<span class="keyword">grid</span>/hadoop-<span class="number">1.2</span><span class="number">.1</span>

#Set path to where hadoop-<span class="variable">*-</span>core.jar is available
 export HADOOP_MAPRED_HOME=/home/<span class="keyword">grid</span>/hadoop-<span class="number">1.2</span><span class="number">.1</span>
</code></pre><h4 id="建立测试表">建立测试表</h4>
<pre><code><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> sqoop;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'sqoop'</span>@<span class="string">'192.168.255.151'</span> identified <span class="keyword">by</span> <span class="string">'sqoop'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>
flush privileges;

use sqoop;
<span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> tb1 <span class="keyword">as</span> <span class="keyword">select</span> table_schema,table_name,table_type <span class="keyword">from</span> information_schema.TABLES;</span>
<span class="operator"><span class="keyword">show</span> tables;</span>
</code></pre><h4 id="用Sqoop把该表里的数据拷贝到HDFS上">用Sqoop把该表里的数据拷贝到HDFS上</h4>
<h5 id="测试连接">测试连接</h5>
<pre><code>sqoop <span class="type">list</span>-databases <span class="comment">--connect jdbc:mysql://192.168.255.151:3306/ --username sqoop --password sqoop</span>
sqoop <span class="type">list</span>-tables <span class="comment">--connect jdbc:mysql://192.168.255.151:3306/sqoop --username sqoop --password sqoop</span>

[grid@hadoop01 ~]$ sqoop <span class="type">list</span>-databases <span class="comment">--connect jdbc:mysql://192.168.255.151:3306/ --username sqoop password sqoop</span>
Warning: /usr/lib/hcatalog <span class="keyword">does</span> <span class="keyword">not</span> exist! HCatalog jobs will fail.
Please <span class="keyword">set</span> $HCAT_HOME <span class="keyword">to</span> <span class="keyword">the</span> root <span class="keyword">of</span> your HCatalog installation.
Warning: $HADOOP_HOME <span class="keyword">is</span> deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">43</span>:<span class="number">12</span> WARN tool.BaseSqoopTool: Setting your password <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> command-line <span class="keyword">is</span> insecure. Consider using -P instead.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">43</span>:<span class="number">12</span> INFO manager.MySQLManager: Preparing <span class="keyword">to</span> use a MySQL streaming resultset.
information_schema
hive
mysql
performance_schema
sqoop
test
</code></pre><h4 id="将数据拷贝到HDFS上">将数据拷贝到HDFS上</h4>
<pre><code>sqoop import --connect jdbc:mysql:<span class="comment">//192.168.255.151:3306/sqoop --username sqoop --password sqoop --table tb1 -m 1</span>
这个时候报错了
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">45</span>:<span class="number">52</span> INFO mapred.JobClient: Task Id : attempt_201405101008_0008_m_000000_0, Status : FAILED
java.lang.RuntimeException: java.lang.RuntimeException: java.sql.SQLException: Access denied <span class="keyword">for</span> user <span class="string">'sqoop'</span>@<span class="string">'hadoop03.myhadoop.com'</span> (<span class="keyword">using</span> password: YES)
        at org.apache.sqoop.mapreduce.db.DBInputFormat.setConf(DBInputFormat.java:<span class="number">167</span>)
        at org.apache.hadoop.util.ReflectionUtils.setConf(ReflectionUtils.java:<span class="number">62</span>)
        at org.apache.hadoop.util.ReflectionUtils.newInstance(ReflectionUtils.java:<span class="number">117</span>)
        at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:<span class="number">722</span>)
        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:<span class="number">364</span>)
        at org.apache.hadoop.mapred.Child$<span class="number">4</span>.run(Child.java:<span class="number">255</span>)
        at java.security.AccessController.doPrivileged(Native <span class="function"><span class="keyword">Method</span>)</span>
</code></pre><h5 id="解决办法，其他节点也要设置权限">解决办法，其他节点也要设置权限</h5>
<pre><code><span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'sqoop'</span>@<span class="string">'192.168.255.152'</span> identified <span class="keyword">by</span> <span class="string">'sqoop'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>
<span class="operator"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'sqoop'</span>@<span class="string">'192.168.255.153'</span> identified <span class="keyword">by</span> <span class="string">'sqoop'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span>
flush privileges;
<span class="operator"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CONCAT(<span class="string">'User: '''</span>,<span class="keyword">user</span>,<span class="string">'''@'''</span>,host,<span class="string">''';'</span>) <span class="keyword">AS</span> query <span class="keyword">FROM</span> mysql.<span class="keyword">user</span>;</span>
</code></pre><h4 id="重新导入">重新导入</h4>
<pre><code>[grid@hadoop01 ~]$ sqoop import --connect jdbc:mysql://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">3306</span>/sqoop --username sqoop --password sqoop --table tb1 -m <span class="number">1</span>
<span class="label">Warning:</span> /usr/lib/hcatalog does not exist! HCatalog jobs will fail.
Please <span class="keyword">set</span> $HCAT_HOME to the root of your HCatalog installation.
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">30</span> WARN tool<span class="preprocessor">.BaseSqoopTool</span>: Setting your password on the command-line is insecure. Consider using -P instead.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">30</span> INFO manager<span class="preprocessor">.MySQLManager</span>: Preparing to use a MySQL streaming resultset.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">30</span> INFO tool<span class="preprocessor">.CodeGenTool</span>: Beginning code generation
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">31</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">31</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">31</span> INFO orm<span class="preprocessor">.CompilationManager</span>: HADOOP_MAPRED_HOME is /home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>
<span class="label">Note:</span> /tmp/sqoop-grid/compile/<span class="number">4</span>a0739c3b0538ec549c03cafb8dace32/tb1<span class="preprocessor">.java</span> uses <span class="keyword">or</span> overrides a deprecated API.
<span class="label">Note:</span> Recompile with -Xlint:deprecation for details.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> INFO orm<span class="preprocessor">.CompilationManager</span>: Writing jar file: /tmp/sqoop-grid/compile/<span class="number">4</span>a0739c3b0538ec549c03cafb8dace32/tb1<span class="preprocessor">.jar</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> WARN manager<span class="preprocessor">.MySQLManager</span>: It looks like you are importing from mysql.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> WARN manager<span class="preprocessor">.MySQLManager</span>: This transfer can be faster! Use the --direct
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> WARN manager<span class="preprocessor">.MySQLManager</span>: option to exercise a MySQL-specific fast path.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> INFO manager<span class="preprocessor">.MySQLManager</span>: Setting zero DATETIME behavior to convertToNull (mysql)
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">38</span> INFO mapreduce<span class="preprocessor">.ImportJobBase</span>: Beginning import of tb1
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">43</span> INFO mapred<span class="preprocessor">.JobClient</span>: Running job: job_201405101008_0009
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">44</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">0</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span>:<span class="number">59</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">100</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>: Job complete: job_201405101008_0009
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>: Counters: <span class="number">18</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Job Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_MAPS=<span class="number">16169</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all reduces waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all maps waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Launched map tasks=<span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_REDUCES=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Output Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Written=<span class="number">4249</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   FileSystemCounters
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     HDFS_BYTES_READ=<span class="number">87</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     FILE_BYTES_WRITTEN=<span class="number">70026</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     HDFS_BYTES_WRITTEN=<span class="number">4249</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Input Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Read=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Map-Reduce Framework
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map input records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Physical memory (bytes) snapshot=<span class="number">73797632</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Spilled Records=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     CPU time spent (ms)=<span class="number">1540</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total committed heap usage (bytes)=<span class="number">15728640</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Virtual memory (bytes) snapshot=<span class="number">1564905472</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map output records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SPLIT_RAW_BYTES=<span class="number">87</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapreduce<span class="preprocessor">.ImportJobBase</span>: Transferred <span class="number">4.1494</span> KB <span class="keyword">in</span> <span class="number">24.7602</span> seconds (<span class="number">171.6062</span> bytes/<span class="keyword">sec</span>)
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span>:<span class="number">03</span> INFO mapreduce<span class="preprocessor">.ImportJobBase</span>: Retrieved <span class="number">112</span> records.
</code></pre><h4 id="查看导入的文件">查看导入的文件</h4>
<pre><code>[<span class="keyword">grid</span><span class="variable">@hadoop01</span> bin]$ hadoop fs -<span class="keyword">ls</span> tb1
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

Found <span class="number">3</span> items
-rw-r--r--   <span class="number">2</span> <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">51</span> /user/<span class="keyword">grid</span>/tb1/_SUCCESS
drwxr-xr-x   - <span class="keyword">grid</span> supergroup          <span class="number">0</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span> /user/<span class="keyword">grid</span>/tb1/_logs
-rw-r--r--   <span class="number">2</span> <span class="keyword">grid</span> supergroup       <span class="number">4249</span> <span class="number">2014</span>-<span class="number">05</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">50</span> /user/<span class="keyword">grid</span>/tb1/part-m-<span class="number">00000</span>

[<span class="keyword">grid</span><span class="variable">@hadoop01</span> bin]$ hadoop fs -cat tb1/part-m-<span class="number">00000</span>
Warning: <span class="variable">$HADOOP_HOME</span> is deprecated.

information_schema,CHARACTER_SETS,SYSTEM VIEW
information_schema,COLLATIONS,SYSTEM VIEW
information_schema,COLLATION_CHARACTER_SET_APPLICABILITY,SYSTEM VIEW
information_schema,COLUMNS,SYSTEM VIEW
information_schema,COLUMN_PRIVILEGES,SYSTEM VIEW
information_schema,ENGINES,SYSTEM VIEW
information_schema,EVENTS,SYSTEM VIEW
information_schema,FILES,SYSTEM VIEW
information_schema,GLOBAL_STATUS,SYSTEM VIEW
information_schema,GLOBAL_VARIABLES,SYSTEM VIEW
information_schema,KEY_COLUMN_USAGE,SYSTEM VIEW
information_schema,PARAMETERS,SYSTEM VIEW
information_schema,PARTITIONS,SYSTEM VIEW
information_schema,PLUGINS,SYSTEM VIEW
information_schema,PROCESSLIST,SYSTEM VIEW
information_schema,PROFILING,SYSTEM VIEW
information_schema,REFERENTIAL_CONSTRAINTS,SYSTEM VIEW
information_schema,ROUTINES,SYSTEM VIEW
information_schema,SCHEMATA,SYSTEM VIEW
information_schema,SCHEMA_PRIVILEGES,SYSTEM VIEW
information_schema,SESSION_STATUS,SYSTEM VIEW
information_schema,SESSION_VARIABLES,SYSTEM VIEW
information_schema,STATISTICS,SYSTEM VIEW
information_schema,TABLES,SYSTEM VIEW
information_schema,TABLESPACES,SYSTEM VIEW
information_schema,TABLE_CONSTRAINTS,SYSTEM VIEW
information_schema,TABLE_PRIVILEGES,SYSTEM VIEW
information_schema,TRIGGERS,SYSTEM VIEW

OK
</code></pre><h4 id="把HDFS的数据导回去mysql">把HDFS的数据导回去mysql</h4>
<pre><code>mysql&gt; use sqoop
Database changed
mysql&gt; show tables<span class="comment">;</span>
+-----------------+
| Tables_in_sqoop |
+-----------------+
| tb1             |
+-----------------+
<span class="number">1</span> row <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> <span class="keyword">sec</span>)

mysql&gt; truncate tb1<span class="comment">;</span>
Query OK, <span class="number">0</span> rows affected (<span class="number">0.01</span> <span class="keyword">sec</span>)

sqoop export  --connect jdbc:mysql://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">3306</span>/sqoop --username sqoop --password sqoop --table tb1 --export-dir hdfs://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">9000</span>/user/grid/tb1/

[grid@hadoop01 ~]$ sqoop export  --connect jdbc:mysql://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">3306</span>/sqoop --username sqoop --password sqoop --table tb1 --export-dir hdfs://<span class="number">192.168</span><span class="number">.255</span><span class="number">.151</span>:<span class="number">9000</span>/user/grid/tb1/
<span class="label">Warning:</span> /usr/lib/hcatalog does not exist! HCatalog jobs will fail.
Please <span class="keyword">set</span> $HCAT_HOME to the root of your HCatalog installation.
<span class="label">Warning:</span> $HADOOP_HOME is deprecated.

<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">19</span> WARN tool<span class="preprocessor">.BaseSqoopTool</span>: Setting your password on the command-line is insecure. Consider using -P instead.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">20</span> INFO manager<span class="preprocessor">.MySQLManager</span>: Preparing to use a MySQL streaming resultset.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">20</span> INFO tool<span class="preprocessor">.CodeGenTool</span>: Beginning code generation
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">21</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">21</span> INFO manager<span class="preprocessor">.SqlManager</span>: Executing SQL statement: SELECT t.* FROM `tb1` AS t LIMIT <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">21</span> INFO orm<span class="preprocessor">.CompilationManager</span>: HADOOP_MAPRED_HOME is /home/grid/hadoop-<span class="number">1.2</span><span class="number">.1</span>
<span class="label">Note:</span> /tmp/sqoop-grid/compile/<span class="number">605</span>c350fea684271f2c51e2f616406c7/tb1<span class="preprocessor">.java</span> uses <span class="keyword">or</span> overrides a deprecated API.
<span class="label">Note:</span> Recompile with -Xlint:deprecation for details.
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">27</span> INFO orm<span class="preprocessor">.CompilationManager</span>: Writing jar file: /tmp/sqoop-grid/compile/<span class="number">605</span>c350fea684271f2c51e2f616406c7/tb1<span class="preprocessor">.jar</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">27</span> INFO mapreduce<span class="preprocessor">.ExportJobBase</span>: Beginning export of tb1
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> INFO input<span class="preprocessor">.FileInputFormat</span>: Total input paths to process : <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> INFO input<span class="preprocessor">.FileInputFormat</span>: Total input paths to process : <span class="number">1</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> INFO util<span class="preprocessor">.NativeCodeLoader</span>: Loaded the native-hadoop library
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">32</span> WARN snappy<span class="preprocessor">.LoadSnappy</span>: Snappy native library not loaded
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">33</span> INFO mapred<span class="preprocessor">.JobClient</span>: Running job: job_201405101008_0010
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">34</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">0</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">06</span>:<span class="number">58</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">50</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">00</span> INFO mapred<span class="preprocessor">.JobClient</span>:  map <span class="number">100</span>% reduce <span class="number">0</span>%
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>: Job complete: job_201405101008_0010
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>: Counters: <span class="number">19</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Job Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_MAPS=<span class="number">71976</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all reduces waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total time spent by all maps waiting after reserving slots (ms)=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Rack-local map tasks=<span class="number">2</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Launched map tasks=<span class="number">4</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Data-local map tasks=<span class="number">2</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SLOTS_MILLIS_REDUCES=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Output Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Written=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   FileSystemCounters
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     HDFS_BYTES_READ=<span class="number">11629</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     FILE_BYTES_WRITTEN=<span class="number">279312</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   File Input Format Counters 
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Bytes Read=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:   Map-Reduce Framework
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map input records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Physical memory (bytes) snapshot=<span class="number">301490176</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Spilled Records=<span class="number">0</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     CPU time spent (ms)=<span class="number">5450</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Total committed heap usage (bytes)=<span class="number">62914560</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Virtual memory (bytes) snapshot=<span class="number">6251151360</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     Map output records=<span class="number">112</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapred<span class="preprocessor">.JobClient</span>:     SPLIT_RAW_BYTES=<span class="number">611</span>
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapreduce<span class="preprocessor">.ExportJobBase</span>: Transferred <span class="number">11.3564</span> KB <span class="keyword">in</span> <span class="number">34.5615</span> seconds (<span class="number">336.4727</span> bytes/<span class="keyword">sec</span>)
<span class="number">14</span>/<span class="number">05</span>/<span class="number">10</span> <span class="number">12</span>:<span class="number">07</span>:<span class="number">04</span> INFO mapreduce<span class="preprocessor">.ExportJobBase</span>: Exported <span class="number">112</span> records.
</code></pre><h4 id="验证">验证</h4>
<pre><code>mysql&gt; use sqoop;
Database changed
<span class="header">mysql&gt; show tables;
+-----------------+</span>
<span class="header">| Tables_in_sqoop |
+-----------------+</span>
<span class="header">| tb1             |
+-----------------+</span>
1 row in set (0.00 sec)
</code></pre>]]></content>
    
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Hadoop/"/>
    
      <category term="Sqoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/tags/Sqoop/"/>
    
      <category term="Hadoop" scheme="https://github.com/DaMinger/DaMinger.github.io.git/categories/Hadoop/"/>
    
  </entry>
  
</feed>
